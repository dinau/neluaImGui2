-- # Refer to:
-- #   OpenGLでの描画内容の画像化と保存(2012-11-07)
-- #     https://npal-shared.hatenablog.com/entry/20121107/1352284053

require'stb_image_write'

local function even(x: cint): cint
  return (( x // 2 ) * 2)
end

----------------
--- saveImage()
----------------
global saveImage = function(fname:string, xs:cint, ys:cint, imageWidth:cint, imageHeight:cint, comp:cint, quality:cint)
  if comp ~= nil then
    if comp ~= STBI_rgb then
      error("Error!: Color component numbers must be 3 (RGB) at saveImage.nelua")
      return
    end
  end
  local iWidth = even(imageWidth)
  local iHeight = even(imageHeight)
  if 1 > iWidth or 1 > iHeight then
    print("Error!: Rect of save image is mismatch at saveImage.nelua")
    return
  end
  local sz = iWidth * iHeight * comp
  local pTexBuffer =  (@*GLuByte)(default_allocator:alloc(sz))
  defer delete(pTexBuffer) end
  local pDataBuffer = (@*GLuByte)(default_allocator:alloc(sz))
  defer delete(pDataBuffer) end

  glReadBuffer( GL_BACK ) -- # Specify OpenGL buffer to be read, 'GL_FRONT': Front buffer, 'GL_BACK': Back buffer
  -- # Read form OpenGL buffer and save to local buffer
  glReadPixels( xs, ys,                  -- # x,y position (left down) at start //0 or getCurrentWidth() - 1
                iWidth, iHeight, -- # width, height to be read
                GL_RGB,                  -- # Read type
                GL_UNSIGNED_BYTE,        -- # Save type
                pTexBuffer)              -- # Pointer to pixel data
  -- # Fix upside-down of image
  local  widthStep = 3 * iWidth
  local n = 0
  for y=0,<iHeight do
    for x=0,<iWidth do
     $((@*GLuByte)(((@usize)(pDataBuffer)) + (iHeight - y - 1 ) * widthStep + (x * 3) + 0 )) = $((@*GLuByte)(((@usize)(pTexBuffer)) + (n + 0))) -- # copy R
     $((@*GLuByte)(((@usize)(pDataBuffer)) + (iHeight - y - 1 ) * widthStep + (x * 3) + 1 )) = $((@*GLuByte)(((@usize)(pTexBuffer)) + (n + 1))) -- # copy G
     $((@*GLuByte)(((@usize)(pDataBuffer)) + (iHeight - y - 1 ) * widthStep + (x * 3) + 2 )) = $((@*GLuByte)(((@usize)(pTexBuffer)) + (n + 2))) -- # copy B
      n = n + 3
    end
  end

  -- # Save image
  local r, seqStr = string.match(string.lower(fname),".+(%..+)$")
  local ext:string
  if r then
    ext = seqStr[1]
  else
    error("Error!: Image extension error!")
  end
  local res: cint
  if ext == ".jpg" or ext == ".jpeg" then
    -- # JPEG quality is 90% default. quality=1..100
    local qt = quality
    if quality <= 0 then
      qt = 90
    end
    res = stbi_write_jpg(fname, iWidth, iHeight, comp, pDataBuffer, quality)
  elseif ext == ".png" then
    res = stbi_write_png(fname, iWidth, iHeight, comp, pDataBuffer)
  elseif ext == ".bmp" then
    res = stbi_write_bmp(fname, iWidth, iHeight, comp, pDataBuffer)
  elseif ext == ".tga" then
    res = stbi_write_tga(fname, iWidth, iHeight, comp, pDataBuffer)
  else
    print(string.format("Error! Unrecognize image extension: [%s]", ext))
    res = 0
  end
  if res == 0 then
    print("Error!: at stbiw.writeNNN() function in saveImage.nelua")
  end
end
