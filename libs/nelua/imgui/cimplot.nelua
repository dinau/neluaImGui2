--
-- This file has been auto generated. Don't edit this file.
--

##[==[
cdefine "CIMGUI_DEFINE_ENUMS_AND_STRUCTS"
cinclude "cimgui.h"
cinclude "cimplot.h"
]==]
global ImVec2: type <cimport,nodecl,forwarddecl> = @record{}
global ImVec4: type <cimport,nodecl,forwarddecl> = @record{}
global ImTextureRef: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_char: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiStoragePair: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiSelectionRequest: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImDrawChannel: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImDrawCmd: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImDrawIdx: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImDrawVert: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImVec2: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImVec4: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImTextureRef: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImU8: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImDrawListPtr: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImTextureRect: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImU32: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImWchar: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImFontPtr: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImFontConfig: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImDrawListSharedDataPtr: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_float: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImU16: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImFontGlyph: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImFontConfigPtr: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiPlatformMonitor: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImTextureDataPtr: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiViewportPtr: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawCmdHeader: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawChannel: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawCmd: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawData: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawList: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawListSharedData: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawListSplitter: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawVert: type <cimport,nodecl,forwarddecl> = @record{}
global ImFont: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontAtlas: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontAtlasBuilder: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontAtlasCustomRect: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontBaked: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontConfig: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontGlyph: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontBuilderIO: type <cimport,nodecl,forwarddecl> = @record{}
global ImTextureData: type <cimport,nodecl,forwarddecl> = @record{}
global ImTextureRect: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiContext: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiIO: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiKeyData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiListClipper: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiMultiSelectIO: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiPayload: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiPlatformIO: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiPlatformImeData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiPlatformMonitor: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiSelectionRequest: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiSizeCallbackData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiStorage: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiStoragePair: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiStyle: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableSortSpecs: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableColumnSortSpecs: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTextBuffer: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiViewport: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiWindowClass: type <cimport,nodecl,forwarddecl> = @record{}
ImVec2 = @record{
  x: float32,
  y: float32
}
ImVec4 = @record{
  x: float32,
  y: float32,
  z: float32,
  w: float32
}
ImTextureRef = @record{
  _TexData: *ImTextureData,
  _TexID: culonglong
}
ImGuiTableSortSpecs = @record{
  Specs: *ImGuiTableColumnSortSpecs,
  SpecsCount: cint,
  SpecsDirty: boolean
}
ImGuiTableColumnSortSpecs = @record{
  ColumnUserID: cuint,
  ColumnIndex: cshort,
  SortOrder: cshort,
  SortDirection: cuchar
}
ImVector_char = @record{
  Size: cint,
  Capacity: cint,
  Data: cstring
}
ImVector_ImGuiStoragePair = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiStoragePair
}
ImVector_ImGuiSelectionRequest = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiSelectionRequest
}
ImVector_ImDrawChannel = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImDrawChannel
}
ImVector_ImDrawCmd = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImDrawCmd
}
ImVector_ImDrawIdx = @record{
  Size: cint,
  Capacity: cint,
  Data: *cuint
}
ImVector_ImDrawVert = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImDrawVert
}
ImVector_ImVec2 = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImVec2
}
ImVector_ImVec4 = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImVec4
}
ImVector_ImTextureRef = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImTextureRef
}
ImVector_ImU8 = @record{
  Size: cint,
  Capacity: cint,
  Data: *cuchar
}
ImVector_ImDrawListPtr = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImDrawList
}
ImVector_ImTextureRect = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImTextureRect
}
ImVector_ImU32 = @record{
  Size: cint,
  Capacity: cint,
  Data: *cuint
}
ImVector_ImWchar = @record{
  Size: cint,
  Capacity: cint,
  Data: *cushort
}
ImVector_ImFontPtr = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImFont
}
ImVector_ImFontConfig = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImFontConfig
}
ImVector_ImDrawListSharedDataPtr = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImDrawListSharedData
}
ImVector_float = @record{
  Size: cint,
  Capacity: cint,
  Data: *float32
}
ImVector_ImU16 = @record{
  Size: cint,
  Capacity: cint,
  Data: *cushort
}
ImVector_ImFontGlyph = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImFontGlyph
}
ImVector_ImFontConfigPtr = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImFontConfig
}
ImVector_ImGuiPlatformMonitor = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiPlatformMonitor
}
ImVector_ImTextureDataPtr = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImTextureData
}
ImVector_ImGuiViewportPtr = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImGuiViewport
}
ImGuiStyle = @record{
  FontSizeBase: float32,
  FontScaleMain: float32,
  FontScaleDpi: float32,
  Alpha: float32,
  DisabledAlpha: float32,
  WindowPadding: ImVec2,
  WindowRounding: float32,
  WindowBorderSize: float32,
  WindowBorderHoverPadding: float32,
  WindowMinSize: ImVec2,
  WindowTitleAlign: ImVec2,
  WindowMenuButtonPosition: cint,
  ChildRounding: float32,
  ChildBorderSize: float32,
  PopupRounding: float32,
  PopupBorderSize: float32,
  FramePadding: ImVec2,
  FrameRounding: float32,
  FrameBorderSize: float32,
  ItemSpacing: ImVec2,
  ItemInnerSpacing: ImVec2,
  CellPadding: ImVec2,
  TouchExtraPadding: ImVec2,
  IndentSpacing: float32,
  ColumnsMinSpacing: float32,
  ScrollbarSize: float32,
  ScrollbarRounding: float32,
  GrabMinSize: float32,
  GrabRounding: float32,
  LogSliderDeadzone: float32,
  ImageBorderSize: float32,
  TabRounding: float32,
  TabBorderSize: float32,
  TabMinWidthBase: float32,
  TabMinWidthShrink: float32,
  TabCloseButtonMinWidthSelected: float32,
  TabCloseButtonMinWidthUnselected: float32,
  TabBarBorderSize: float32,
  TabBarOverlineSize: float32,
  TableAngledHeadersAngle: float32,
  TableAngledHeadersTextAlign: ImVec2,
  TreeLinesFlags: cint,
  TreeLinesSize: float32,
  TreeLinesRounding: float32,
  ColorButtonPosition: cint,
  ButtonTextAlign: ImVec2,
  SelectableTextAlign: ImVec2,
  SeparatorTextBorderSize: float32,
  SeparatorTextAlign: ImVec2,
  SeparatorTextPadding: ImVec2,
  DisplayWindowPadding: ImVec2,
  DisplaySafeAreaPadding: ImVec2,
  DockingSeparatorSize: float32,
  MouseCursorScale: float32,
  AntiAliasedLines: boolean,
  AntiAliasedLinesUseTex: boolean,
  AntiAliasedFill: boolean,
  CurveTessellationTol: float32,
  CircleTessellationMaxError: float32,
  Colors: [60]ImVec4,
  HoverStationaryDelay: float32,
  HoverDelayShort: float32,
  HoverDelayNormal: float32,
  HoverFlagsForTooltipMouse: cint,
  HoverFlagsForTooltipNav: cint,
  _MainScale: float32,
  _NextFrameFontSizeBase: float32
}
ImGuiKeyData = @record{
  Down: boolean,
  DownDuration: float32,
  DownDurationPrev: float32,
  AnalogValue: float32
}
ImGuiIO = @record{
  ConfigFlags: cint,
  BackendFlags: cint,
  DisplaySize: ImVec2,
  DisplayFramebufferScale: ImVec2,
  DeltaTime: float32,
  IniSavingRate: float32,
  IniFilename: cstring,
  LogFilename: cstring,
  UserData: pointer,
  Fonts: *ImFontAtlas,
  FontDefault: *ImFont,
  FontAllowUserScaling: boolean,
  ConfigNavSwapGamepadButtons: boolean,
  ConfigNavMoveSetMousePos: boolean,
  ConfigNavCaptureKeyboard: boolean,
  ConfigNavEscapeClearFocusItem: boolean,
  ConfigNavEscapeClearFocusWindow: boolean,
  ConfigNavCursorVisibleAuto: boolean,
  ConfigNavCursorVisibleAlways: boolean,
  ConfigDockingNoSplit: boolean,
  ConfigDockingWithShift: boolean,
  ConfigDockingAlwaysTabBar: boolean,
  ConfigDockingTransparentPayload: boolean,
  ConfigViewportsNoAutoMerge: boolean,
  ConfigViewportsNoTaskBarIcon: boolean,
  ConfigViewportsNoDecoration: boolean,
  ConfigViewportsNoDefaultParent: boolean,
  ConfigViewportPlatformFocusSetsImGuiFocus: boolean,
  ConfigDpiScaleFonts: boolean,
  ConfigDpiScaleViewports: boolean,
  MouseDrawCursor: boolean,
  ConfigMacOSXBehaviors: boolean,
  ConfigInputTrickleEventQueue: boolean,
  ConfigInputTextCursorBlink: boolean,
  ConfigInputTextEnterKeepActive: boolean,
  ConfigDragClickToInputText: boolean,
  ConfigWindowsResizeFromEdges: boolean,
  ConfigWindowsMoveFromTitleBarOnly: boolean,
  ConfigWindowsCopyContentsWithCtrlC: boolean,
  ConfigScrollbarScrollByPage: boolean,
  ConfigMemoryCompactTimer: float32,
  MouseDoubleClickTime: float32,
  MouseDoubleClickMaxDist: float32,
  MouseDragThreshold: float32,
  KeyRepeatDelay: float32,
  KeyRepeatRate: float32,
  ConfigErrorRecovery: boolean,
  ConfigErrorRecoveryEnableAssert: boolean,
  ConfigErrorRecoveryEnableDebugLog: boolean,
  ConfigErrorRecoveryEnableTooltip: boolean,
  ConfigDebugIsDebuggerPresent: boolean,
  ConfigDebugHighlightIdConflicts: boolean,
  ConfigDebugHighlightIdConflictsShowItemPicker: boolean,
  ConfigDebugBeginReturnValueOnce: boolean,
  ConfigDebugBeginReturnValueLoop: boolean,
  ConfigDebugIgnoreFocusLoss: boolean,
  ConfigDebugIniSettings: boolean,
  BackendPlatformName: cstring,
  BackendRendererName: cstring,
  BackendPlatformUserData: pointer,
  BackendRendererUserData: pointer,
  BackendLanguageUserData: pointer,
  WantCaptureMouse: boolean,
  WantCaptureKeyboard: boolean,
  WantTextInput: boolean,
  WantSetMousePos: boolean,
  WantSaveIniSettings: boolean,
  NavActive: boolean,
  NavVisible: boolean,
  Framerate: float32,
  MetricsRenderVertices: cint,
  MetricsRenderIndices: cint,
  MetricsRenderWindows: cint,
  MetricsActiveWindows: cint,
  MouseDelta: ImVec2,
  Ctx: *ImGuiContext,
  MousePos: ImVec2,
  MouseDown: [5]boolean,
  MouseWheel: float32,
  MouseWheelH: float32,
  MouseSource: cint,
  MouseHoveredViewport: cuint,
  KeyCtrl: boolean,
  KeyShift: boolean,
  KeyAlt: boolean,
  KeySuper: boolean,
  KeyMods: cint,
  KeysData: [155]ImGuiKeyData,
  WantCaptureMouseUnlessPopupClose: boolean,
  MousePosPrev: ImVec2,
  MouseClickedPos: [5]ImVec2,
  MouseClickedTime: [5]float64,
  MouseClicked: [5]boolean,
  MouseDoubleClicked: [5]boolean,
  MouseClickedCount: [5]cushort,
  MouseClickedLastCount: [5]cushort,
  MouseReleased: [5]boolean,
  MouseReleasedTime: [5]float64,
  MouseDownOwned: [5]boolean,
  MouseDownOwnedUnlessPopupClose: [5]boolean,
  MouseWheelRequestAxisSwap: boolean,
  MouseCtrlLeftAsRightClick: boolean,
  MouseDownDuration: [5]float32,
  MouseDownDurationPrev: [5]float32,
  MouseDragMaxDistanceAbs: [5]ImVec2,
  MouseDragMaxDistanceSqr: [5]float32,
  PenPressure: float32,
  AppFocusLost: boolean,
  AppAcceptingEvents: boolean,
  InputQueueSurrogate: cushort,
  InputQueueCharacters: ImVector_ImWchar,
  FontGlobalScale: float32,
  GetClipboardTextFn: function(user_data: pointer): cstring,
  SetClipboardTextFn: function(user_data: pointer, text: cstring): void,
  ClipboardUserData: pointer
}
ImGuiSizeCallbackData = @record{
  UserData: pointer,
  Pos: ImVec2,
  CurrentSize: ImVec2,
  DesiredSize: ImVec2
}
ImGuiWindowClass = @record{
  ClassId: cuint,
  ParentViewportId: cuint,
  FocusRouteParentWindowId: cuint,
  ViewportFlagsOverrideSet: cint,
  ViewportFlagsOverrideClear: cint,
  TabItemFlagsOverrideSet: cint,
  DockNodeFlagsOverrideSet: cint,
  DockingAlwaysTabBar: boolean,
  DockingAllowUnclassed: boolean
}
ImGuiPayload = @record{
  Data: pointer,
  DataSize: cint,
  SourceId: cuint,
  SourceParentId: cuint,
  DataFrameCount: cint,
  DataType: [33]cchar,
  Preview: boolean,
  Delivery: boolean
}
ImGuiTextBuffer = @record{
  Buf: ImVector_char
}
ImGuiStoragePair = @record{
  key: cuint,
  __unnamed2: union{
    val_i: cint,
    val_f: float32,
    val_p: pointer
  }
}
ImGuiStorage = @record{
  Data: ImVector_ImGuiStoragePair
}
ImGuiListClipper = @record{
  Ctx: *ImGuiContext,
  DisplayStart: cint,
  DisplayEnd: cint,
  ItemsCount: cint,
  ItemsHeight: float32,
  StartPosY: float64,
  StartSeekOffsetY: float64,
  TempData: pointer
}
ImGuiMultiSelectIO = @record{
  Requests: ImVector_ImGuiSelectionRequest,
  RangeSrcItem: clonglong,
  NavIdItem: clonglong,
  NavIdSelected: boolean,
  RangeSrcReset: boolean,
  ItemsCount: cint
}
global ImGuiSelectionRequestType: type <cimport,nodecl,using> = @enum(cint){
  ImGuiSelectionRequestType_None = 0,
  ImGuiSelectionRequestType_SetAll = 1,
  ImGuiSelectionRequestType_SetRange = 2
}
ImGuiSelectionRequest = @record{
  Type: ImGuiSelectionRequestType,
  Selected: boolean,
  RangeDirection: cschar,
  RangeFirstItem: clonglong,
  RangeLastItem: clonglong
}
ImDrawCmd = @record{
  ClipRect: ImVec4,
  TexRef: ImTextureRef,
  VtxOffset: cuint,
  IdxOffset: cuint,
  ElemCount: cuint,
  UserCallback: function(parent_list: *ImDrawList, cmd: *ImDrawCmd): void,
  UserCallbackData: pointer,
  UserCallbackDataSize: cint,
  UserCallbackDataOffset: cint
}
ImDrawVert = @record{
  pos: ImVec2,
  uv: ImVec2,
  col: cuint
}
ImDrawCmdHeader = @record{
  ClipRect: ImVec4,
  TexRef: ImTextureRef,
  VtxOffset: cuint
}
ImDrawChannel = @record{
  _CmdBuffer: ImVector_ImDrawCmd,
  _IdxBuffer: ImVector_ImDrawIdx
}
ImDrawListSplitter = @record{
  _Current: cint,
  _Count: cint,
  _Channels: ImVector_ImDrawChannel
}
ImDrawList = @record{
  CmdBuffer: ImVector_ImDrawCmd,
  IdxBuffer: ImVector_ImDrawIdx,
  VtxBuffer: ImVector_ImDrawVert,
  Flags: cint,
  _VtxCurrentIdx: cuint,
  _Data: *ImDrawListSharedData,
  _VtxWritePtr: *ImDrawVert,
  _IdxWritePtr: *cuint,
  _Path: ImVector_ImVec2,
  _CmdHeader: ImDrawCmdHeader,
  _Splitter: ImDrawListSplitter,
  _ClipRectStack: ImVector_ImVec4,
  _TextureStack: ImVector_ImTextureRef,
  _CallbacksDataBuf: ImVector_ImU8,
  _FringeScale: float32,
  _OwnerName: cstring
}
ImDrawData = @record{
  Valid: boolean,
  CmdListsCount: cint,
  TotalIdxCount: cint,
  TotalVtxCount: cint,
  CmdLists: ImVector_ImDrawListPtr,
  DisplayPos: ImVec2,
  DisplaySize: ImVec2,
  FramebufferScale: ImVec2,
  OwnerViewport: *ImGuiViewport,
  Textures: *ImVector_ImTextureDataPtr
}
global ImTextureFormat: type <cimport,nodecl,using> = @enum(cint){
  ImTextureFormat_RGBA32 = 0,
  ImTextureFormat_Alpha8 = 1
}
global ImTextureStatus: type <cimport,nodecl,using> = @enum(cint){
  ImTextureStatus_OK = 0,
  ImTextureStatus_Destroyed = 1,
  ImTextureStatus_WantCreate = 2,
  ImTextureStatus_WantUpdates = 3,
  ImTextureStatus_WantDestroy = 4
}
ImTextureRect = @record{
  x: cushort,
  y: cushort,
  w: cushort,
  h: cushort
}
ImTextureData = @record{
  UniqueID: cint,
  Status: ImTextureStatus,
  BackendUserData: pointer,
  TexID: culonglong,
  Format: ImTextureFormat,
  Width: cint,
  Height: cint,
  BytesPerPixel: cint,
  Pixels: *cuchar,
  UsedRect: ImTextureRect,
  UpdateRect: ImTextureRect,
  Updates: ImVector_ImTextureRect,
  UnusedFrames: cint,
  RefCount: cushort,
  UseColors: boolean,
  WantDestroyNextFrame: boolean
}
ImFontConfig = @record{
  Name: [40]cchar,
  FontData: pointer,
  FontDataSize: cint,
  FontDataOwnedByAtlas: boolean,
  MergeMode: boolean,
  PixelSnapH: boolean,
  PixelSnapV: boolean,
  OversampleH: cschar,
  OversampleV: cschar,
  EllipsisChar: cushort,
  SizePixels: float32,
  GlyphRanges: *cushort,
  GlyphExcludeRanges: *cushort,
  GlyphOffset: ImVec2,
  GlyphMinAdvanceX: float32,
  GlyphMaxAdvanceX: float32,
  GlyphExtraAdvanceX: float32,
  FontNo: cuint,
  FontLoaderFlags: cuint,
  RasterizerMultiply: float32,
  RasterizerDensity: float32,
  Flags: cint,
  DstFont: *ImFont,
  FontLoader: *ImFontBuilderIO,
  FontLoaderData: pointer
}
ImFontGlyph = @record{
  Colored: cuint,
  Visible: cuint,
  SourceIdx: cuint,
  Codepoint: cuint,
  AdvanceX: float32,
  X0: float32,
  Y0: float32,
  X1: float32,
  Y1: float32,
  U0: float32,
  V0: float32,
  U1: float32,
  V1: float32,
  PackId: cint
}
ImFontAtlasCustomRect = @record{
  x: cushort,
  y: cushort,
  w: cushort,
  h: cushort,
  uv0: ImVec2,
  uv1: ImVec2
}
ImFontAtlas = @record{
  Flags: cint,
  TexDesiredFormat: ImTextureFormat,
  TexGlyphPadding: cint,
  TexMinWidth: cint,
  TexMinHeight: cint,
  TexMaxWidth: cint,
  TexMaxHeight: cint,
  UserData: pointer,
  __unnamed9: union{
    TexRef: ImTextureRef,
    TexID: ImTextureRef
  },
  TexData: *ImTextureData,
  TexList: ImVector_ImTextureDataPtr,
  Locked: boolean,
  RendererHasTextures: boolean,
  TexIsBuilt: boolean,
  TexPixelsUseColors: boolean,
  TexUvScale: ImVec2,
  TexUvWhitePixel: ImVec2,
  Fonts: ImVector_ImFontPtr,
  Sources: ImVector_ImFontConfig,
  TexUvLines: [33]ImVec4,
  TexNextUniqueID: cint,
  FontNextUniqueID: cint,
  DrawListSharedDatas: ImVector_ImDrawListSharedDataPtr,
  Builder: *ImFontAtlasBuilder,
  FontLoader: *ImFontBuilderIO,
  FontLoaderName: cstring,
  FontLoaderData: pointer,
  FontLoaderFlags: cuint,
  RefCount: cint,
  OwnerContext: *ImGuiContext,
  TempRect: ImFontAtlasCustomRect
}
ImFontBaked = @record{
  IndexAdvanceX: ImVector_float,
  FallbackAdvanceX: float32,
  Size: float32,
  RasterizerDensity: float32,
  IndexLookup: ImVector_ImU16,
  Glyphs: ImVector_ImFontGlyph,
  FallbackGlyphIndex: cint,
  Ascent: float32,
  Descent: float32,
  MetricsTotalSurface: cuint,
  WantDestroy: cuint,
  LoadNoFallback: cuint,
  LoadNoRenderOnLayout: cuint,
  LastUsedFrame: cint,
  BakedId: cuint,
  ContainerFont: *ImFont,
  FontLoaderDatas: pointer
}
ImFont = @record{
  LastBaked: *ImFontBaked,
  ContainerAtlas: *ImFontAtlas,
  Flags: cint,
  CurrentRasterizerDensity: float32,
  FontId: cuint,
  LegacySize: float32,
  Sources: ImVector_ImFontConfigPtr,
  EllipsisChar: cushort,
  FallbackChar: cushort,
  Used8kPagesMap: [1]cuchar,
  EllipsisAutoBake: boolean,
  RemapPairs: ImGuiStorage,
  Scale: float32
}
ImGuiViewport = @record{
  ID: cuint,
  Flags: cint,
  Pos: ImVec2,
  Size: ImVec2,
  FramebufferScale: ImVec2,
  WorkPos: ImVec2,
  WorkSize: ImVec2,
  DpiScale: float32,
  ParentViewportId: cuint,
  DrawData: *ImDrawData,
  RendererUserData: pointer,
  PlatformUserData: pointer,
  PlatformHandle: pointer,
  PlatformHandleRaw: pointer,
  PlatformWindowCreated: boolean,
  PlatformRequestMove: boolean,
  PlatformRequestResize: boolean,
  PlatformRequestClose: boolean
}
ImGuiPlatformIO = @record{
  Platform_GetClipboardTextFn: function(ctx: *ImGuiContext): cstring,
  Platform_SetClipboardTextFn: function(ctx: *ImGuiContext, text: cstring): void,
  Platform_ClipboardUserData: pointer,
  Platform_OpenInShellFn: function(ctx: *ImGuiContext, path: cstring): boolean,
  Platform_OpenInShellUserData: pointer,
  Platform_SetImeDataFn: function(ctx: *ImGuiContext, viewport: *ImGuiViewport, data: *ImGuiPlatformImeData): void,
  Platform_ImeUserData: pointer,
  Platform_LocaleDecimalPoint: cushort,
  Renderer_TextureMaxWidth: cint,
  Renderer_TextureMaxHeight: cint,
  Renderer_RenderState: pointer,
  Platform_CreateWindow: function(vp: *ImGuiViewport): void,
  Platform_DestroyWindow: function(vp: *ImGuiViewport): void,
  Platform_ShowWindow: function(vp: *ImGuiViewport): void,
  Platform_SetWindowPos: function(vp: *ImGuiViewport, pos: ImVec2): void,
  Platform_GetWindowPos: function(vp: *ImGuiViewport): ImVec2,
  Platform_SetWindowSize: function(vp: *ImGuiViewport, size: ImVec2): void,
  Platform_GetWindowSize: function(vp: *ImGuiViewport): ImVec2,
  Platform_GetWindowFramebufferScale: function(vp: *ImGuiViewport): ImVec2,
  Platform_SetWindowFocus: function(vp: *ImGuiViewport): void,
  Platform_GetWindowFocus: function(vp: *ImGuiViewport): boolean,
  Platform_GetWindowMinimized: function(vp: *ImGuiViewport): boolean,
  Platform_SetWindowTitle: function(vp: *ImGuiViewport, str: cstring): void,
  Platform_SetWindowAlpha: function(vp: *ImGuiViewport, alpha: float32): void,
  Platform_UpdateWindow: function(vp: *ImGuiViewport): void,
  Platform_RenderWindow: function(vp: *ImGuiViewport, render_arg: pointer): void,
  Platform_SwapBuffers: function(vp: *ImGuiViewport, render_arg: pointer): void,
  Platform_GetWindowDpiScale: function(vp: *ImGuiViewport): float32,
  Platform_OnChangedViewport: function(vp: *ImGuiViewport): void,
  Platform_GetWindowWorkAreaInsets: function(vp: *ImGuiViewport): ImVec4,
  Platform_CreateVkSurface: function(vp: *ImGuiViewport, vk_inst: culonglong, vk_allocators: pointer, out_vk_surface: *culonglong): cint,
  Renderer_CreateWindow: function(vp: *ImGuiViewport): void,
  Renderer_DestroyWindow: function(vp: *ImGuiViewport): void,
  Renderer_SetWindowSize: function(vp: *ImGuiViewport, size: ImVec2): void,
  Renderer_RenderWindow: function(vp: *ImGuiViewport, render_arg: pointer): void,
  Renderer_SwapBuffers: function(vp: *ImGuiViewport, render_arg: pointer): void,
  Monitors: ImVector_ImGuiPlatformMonitor,
  Textures: ImVector_ImTextureDataPtr,
  Viewports: ImVector_ImGuiViewportPtr
}
ImGuiPlatformMonitor = @record{
  MainPos: ImVec2,
  MainSize: ImVec2,
  WorkPos: ImVec2,
  WorkSize: ImVec2,
  DpiScale: float32,
  PlatformHandle: pointer
}
ImGuiPlatformImeData = @record{
  WantVisible: boolean,
  WantTextInput: boolean,
  InputPos: ImVec2,
  InputLineHeight: float32,
  ViewportId: cuint
}
global ImVector_ImFontBakedPtr: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImFontBaked
}
global ImVector_ImFontAtlasPtr: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImFontAtlas
}
global FILE: type <cimport,nodecl,cincomplete> = @record{}
global ImVec1: type <cimport,nodecl,forwarddecl> = @record{}
global ImVec2i: type <cimport,nodecl,forwarddecl> = @record{}
global ImVec2ih: type <cimport,nodecl,forwarddecl> = @record{}
global ImSpan_ImGuiTableColumn: type <cimport,nodecl,forwarddecl> = @record{}
global ImSpan_ImGuiTableColumnIdx: type <cimport,nodecl,forwarddecl> = @record{}
global ImSpan_ImGuiTableCellData: type <cimport,nodecl,forwarddecl> = @record{}
global ImStableVector_ImFontBaked_32: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontStackData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImFontStackData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiDataTypeStorage: type <cimport,nodecl,forwarddecl> = @record{}
global ImChunkStream_ImGuiTableSettings: type <cimport,nodecl,forwarddecl> = @record{}
global ImChunkStream_ImGuiWindowSettings: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_unsigned_char: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiWindowStackData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiWindowPtr: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiViewportPPtr: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiTreeNodeStackData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiTableTempData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiTableInstanceData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiTableHeaderData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiTableColumnSortSpecs: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiTable: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiTabItem: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiTabBar: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiStyleMod: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiStackLevelInfo: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiShrinkWidthItem: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiSettingsHandler: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiPtrOrIndex: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiPopupData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiOldColumns: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiOldColumnData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiMultiSelectTempData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiMultiSelectState: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiListClipperRange: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiListClipperData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiKeyRoutingData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiItemFlags: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiInputEvent: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiID: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiGroupData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiFocusScopeData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiDockRequest: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiDockNodeSettings: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiContextHook: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiColorMod: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_int: type <cimport,nodecl,forwarddecl> = @record{}
global ImPool_ImGuiMultiSelectState: type <cimport,nodecl,forwarddecl> = @record{}
global ImPool_ImGuiTabBar: type <cimport,nodecl,forwarddecl> = @record{}
global ImPool_ImGuiTable: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTextIndex: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiComboPreviewData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputTextDeactivatedState: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiWindowStackData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiShrinkWidthItem: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiPtrOrIndex: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputEventMousePos: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputEventMouseWheel: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputEventMouseButton: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputEventMouseViewport: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputEventKey: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputEventText: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputEventAppFocused: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputEvent: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiKeyRoutingData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiKeyRoutingTable: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiKeyOwnerData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiListClipperRange: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiListClipperData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiFocusScopeData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiViewportP: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiDebugAllocEntry: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiDebugAllocInfo: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiStackLevelInfo: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiIDStackTool: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableCellData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImFontAtlasRectEntry: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_stbrp_node_im: type <cimport,nodecl,forwarddecl> = @record{}
global stbrp_context_opaque: type <cimport,nodecl,forwarddecl> = @record{}
global ImRect: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawDataBuilder: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontAtlasRectEntry: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiBoxSelectState: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiColorMod: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiContextHook: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiDeactivatedItemData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiDockContext: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiDockRequest: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiDockNode: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiDockNodeSettings: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiErrorRecoveryState: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiGroupData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputTextState: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiLastItemData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiMenuColumns: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiMultiSelectState: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiMultiSelectTempData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiNavItemData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiMetricsConfig: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiNextWindowData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiNextItemData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiOldColumnData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiOldColumns: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiPopupData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiSettingsHandler: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiStyleMod: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTabBar: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTabItem: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTable: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableHeaderData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableColumn: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableInstanceData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableTempData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTreeNodeStackData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTypingSelectState: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTypingSelectRequest: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiWindow: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiWindowDockStyle: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiWindowTempData: type <cimport,nodecl,forwarddecl> = @record{}
ImVec1 = @record{
  x: float32
}
ImVec2i = @record{
  x: cint,
  y: cint
}
ImVec2ih = @record{
  x: cshort,
  y: cshort
}
ImRect = @record{
  Min: ImVec2,
  Max: ImVec2
}
ImSpan_ImGuiTableColumn = @record{
  Data: *ImGuiTableColumn,
  DataEnd: *ImGuiTableColumn
}
ImSpan_ImGuiTableColumnIdx = @record{
  Data: *cshort,
  DataEnd: *cshort
}
ImSpan_ImGuiTableCellData = @record{
  Data: *ImGuiTableCellData,
  DataEnd: *ImGuiTableCellData
}
ImStableVector_ImFontBaked_32 = @record{
  Size: cint,
  Capacity: cint,
  Blocks: ImVector_ImFontBakedPtr
}
ImDrawListSharedData = @record{
  TexUvWhitePixel: ImVec2,
  TexUvLines: *ImVec4,
  FontAtlas: *ImFontAtlas,
  Font: *ImFont,
  FontSize: float32,
  FontScale: float32,
  CurveTessellationTol: float32,
  CircleSegmentMaxError: float32,
  InitialFringeScale: float32,
  InitialFlags: cint,
  ClipRectFullscreen: ImVec4,
  TempBuffer: ImVector_ImVec2,
  DrawLists: ImVector_ImDrawListPtr,
  Context: *ImGuiContext,
  ArcFastVtx: [48]ImVec2,
  ArcFastRadiusCutoff: float32,
  CircleSegmentCounts: [64]cuchar
}
ImDrawDataBuilder = @record{
  Layers: [2]*ImVector_ImDrawListPtr,
  LayerData1: ImVector_ImDrawListPtr
}
ImFontStackData = @record{
  Font: *ImFont,
  FontSizeBeforeScaling: float32,
  FontSizeAfterScaling: float32
}
ImVector_ImFontStackData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImFontStackData
}
ImGuiColorMod = @record{
  Col: cint,
  BackupValue: ImVec4
}
ImGuiStyleMod = @record{
  VarIdx: cint,
  __unnamed2: union{
    BackupInt: [2]cint,
    BackupFloat: [2]float32
  }
}
ImGuiDataTypeStorage = @record{
  Data: [8]cuchar
}
ImChunkStream_ImGuiTableSettings = @record{
  Buf: ImVector_char
}
ImChunkStream_ImGuiWindowSettings = @record{
  Buf: ImVector_char
}
ImVector_unsigned_char = @record{
  Size: cint,
  Capacity: cint,
  Data: *cuchar
}
ImVector_ImGuiWindowStackData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiWindowStackData
}
ImVector_ImGuiWindowPtr = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImGuiWindow
}
ImVector_ImGuiViewportPPtr = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImGuiViewportP
}
ImVector_ImGuiTreeNodeStackData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTreeNodeStackData
}
ImVector_ImGuiTableTempData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTableTempData
}
ImVector_ImGuiTableInstanceData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTableInstanceData
}
ImVector_ImGuiTableHeaderData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTableHeaderData
}
ImVector_ImGuiTableColumnSortSpecs = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTableColumnSortSpecs
}
ImVector_ImGuiTable = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTable
}
ImVector_ImGuiTabItem = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTabItem
}
ImVector_ImGuiTabBar = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTabBar
}
ImVector_ImGuiStyleMod = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiStyleMod
}
ImVector_ImGuiStackLevelInfo = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiStackLevelInfo
}
ImVector_ImGuiShrinkWidthItem = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiShrinkWidthItem
}
ImVector_ImGuiSettingsHandler = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiSettingsHandler
}
ImVector_ImGuiPtrOrIndex = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiPtrOrIndex
}
ImVector_ImGuiPopupData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiPopupData
}
ImVector_ImGuiOldColumns = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiOldColumns
}
ImVector_ImGuiOldColumnData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiOldColumnData
}
ImVector_ImGuiMultiSelectTempData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiMultiSelectTempData
}
ImVector_ImGuiMultiSelectState = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiMultiSelectState
}
ImVector_ImGuiListClipperRange = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiListClipperRange
}
ImVector_ImGuiListClipperData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiListClipperData
}
ImVector_ImGuiKeyRoutingData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiKeyRoutingData
}
ImVector_ImGuiItemFlags = @record{
  Size: cint,
  Capacity: cint,
  Data: *cint
}
ImVector_ImGuiInputEvent = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiInputEvent
}
ImVector_ImGuiID = @record{
  Size: cint,
  Capacity: cint,
  Data: *cuint
}
ImVector_ImGuiGroupData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiGroupData
}
ImVector_ImGuiFocusScopeData = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiFocusScopeData
}
ImVector_ImGuiDockRequest = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiDockRequest
}
ImVector_ImGuiDockNodeSettings = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiDockNodeSettings
}
ImVector_ImGuiContextHook = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiContextHook
}
ImVector_ImGuiColorMod = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiColorMod
}
ImVector_int = @record{
  Size: cint,
  Capacity: cint,
  Data: *cint
}
ImPool_ImGuiMultiSelectState = @record{
  Buf: ImVector_ImGuiMultiSelectState,
  Map: ImGuiStorage,
  FreeIdx: cint,
  AliveCount: cint
}
ImPool_ImGuiTabBar = @record{
  Buf: ImVector_ImGuiTabBar,
  Map: ImGuiStorage,
  FreeIdx: cint,
  AliveCount: cint
}
ImPool_ImGuiTable = @record{
  Buf: ImVector_ImGuiTable,
  Map: ImGuiStorage,
  FreeIdx: cint,
  AliveCount: cint
}
ImGuiTextIndex = @record{
  LineOffsets: ImVector_int,
  EndOffset: cint
}
global ImGuiAxis: type <cimport,nodecl,using> = @enum(cint){
  ImGuiAxis_None = -1,
  ImGuiAxis_X = 0,
  ImGuiAxis_Y = 1
}
ImGuiComboPreviewData = @record{
  PreviewRect: ImRect,
  BackupCursorPos: ImVec2,
  BackupCursorMaxPos: ImVec2,
  BackupCursorPosPrevLine: ImVec2,
  BackupPrevLineTextBaseOffset: float32,
  BackupLayout: cint
}
ImGuiGroupData = @record{
  WindowID: cuint,
  BackupCursorPos: ImVec2,
  BackupCursorMaxPos: ImVec2,
  BackupCursorPosPrevLine: ImVec2,
  BackupIndent: ImVec1,
  BackupGroupOffset: ImVec1,
  BackupCurrLineSize: ImVec2,
  BackupCurrLineTextBaseOffset: float32,
  BackupActiveIdIsAlive: cuint,
  BackupDeactivatedIdIsAlive: boolean,
  BackupHoveredIdIsAlive: boolean,
  BackupIsSameLine: boolean,
  EmitItem: boolean
}
ImGuiMenuColumns = @record{
  TotalWidth: cuint,
  NextTotalWidth: cuint,
  Spacing: cushort,
  OffsetIcon: cushort,
  OffsetLabel: cushort,
  OffsetShortcut: cushort,
  OffsetMark: cushort,
  Widths: [4]cushort
}
ImGuiInputTextDeactivatedState = @record{
  ID: cuint,
  TextA: ImVector_char
}
ImGuiInputTextState = @record{
  Ctx: *ImGuiContext,
  Stb: pointer,
  Flags: cint,
  ID: cuint,
  TextLen: cint,
  TextSrc: cstring,
  TextA: ImVector_char,
  TextToRevertTo: ImVector_char,
  CallbackTextBackup: ImVector_char,
  BufCapacity: cint,
  Scroll: ImVec2,
  CursorAnim: float32,
  CursorFollow: boolean,
  SelectedAllMouseLock: boolean,
  Edited: boolean,
  WantReloadUserBuf: boolean,
  ReloadSelectionStart: cint,
  ReloadSelectionEnd: cint
}
ImGuiNextWindowData = @record{
  HasFlags: cint,
  PosCond: cint,
  SizeCond: cint,
  CollapsedCond: cint,
  DockCond: cint,
  PosVal: ImVec2,
  PosPivotVal: ImVec2,
  SizeVal: ImVec2,
  ContentSizeVal: ImVec2,
  ScrollVal: ImVec2,
  WindowFlags: cint,
  ChildFlags: cint,
  PosUndock: boolean,
  CollapsedVal: boolean,
  SizeConstraintRect: ImRect,
  SizeCallback: function(data: *ImGuiSizeCallbackData): void,
  SizeCallbackUserData: pointer,
  BgAlphaVal: float32,
  ViewportId: cuint,
  DockId: cuint,
  WindowClass: ImGuiWindowClass,
  MenuBarOffsetMinVal: ImVec2,
  RefreshFlagsVal: cint
}
ImGuiNextItemData = @record{
  HasFlags: cint,
  ItemFlags: cint,
  FocusScopeId: cuint,
  SelectionUserData: clonglong,
  Width: float32,
  Shortcut: cint,
  ShortcutFlags: cint,
  OpenVal: boolean,
  OpenCond: cuchar,
  RefVal: ImGuiDataTypeStorage,
  StorageId: cuint
}
ImGuiLastItemData = @record{
  ID: cuint,
  ItemFlags: cint,
  StatusFlags: cint,
  Rect: ImRect,
  NavRect: ImRect,
  DisplayRect: ImRect,
  ClipRect: ImRect,
  Shortcut: cint
}
ImGuiTreeNodeStackData = @record{
  ID: cuint,
  TreeFlags: cint,
  ItemFlags: cint,
  NavRect: ImRect,
  DrawLinesX1: float32,
  DrawLinesToNodesY2: float32,
  DrawLinesTableColumn: cshort
}
ImGuiErrorRecoveryState = @record{
  SizeOfWindowStack: cshort,
  SizeOfIDStack: cshort,
  SizeOfTreeStack: cshort,
  SizeOfColorStack: cshort,
  SizeOfStyleVarStack: cshort,
  SizeOfFontStack: cshort,
  SizeOfFocusScopeStack: cshort,
  SizeOfGroupStack: cshort,
  SizeOfItemFlagsStack: cshort,
  SizeOfBeginPopupStack: cshort,
  SizeOfDisabledStack: cshort
}
ImGuiWindowStackData = @record{
  Window: *ImGuiWindow,
  ParentLastItemDataBackup: ImGuiLastItemData,
  StackSizesInBegin: ImGuiErrorRecoveryState,
  DisabledOverrideReenable: boolean,
  DisabledOverrideReenableAlphaBackup: float32
}
ImGuiShrinkWidthItem = @record{
  Index: cint,
  Width: float32,
  InitialWidth: float32
}
ImGuiPtrOrIndex = @record{
  Ptr: pointer,
  Index: cint
}
ImGuiDeactivatedItemData = @record{
  ID: cuint,
  ElapseFrame: cint,
  HasBeenEditedBefore: boolean,
  IsAlive: boolean
}
ImGuiPopupData = @record{
  PopupId: cuint,
  Window: *ImGuiWindow,
  RestoreNavWindow: *ImGuiWindow,
  ParentNavLayer: cint,
  OpenFrameCount: cint,
  OpenParentId: cuint,
  OpenPopupPos: ImVec2,
  OpenMousePos: ImVec2
}
global ImBitArrayForNamedKeys: type <cimport,nodecl> = @record{
  __dummy: [20]cchar
}
global ImGuiInputEventType: type <cimport,nodecl,using> = @enum(cint){
  ImGuiInputEventType_None = 0,
  ImGuiInputEventType_MousePos = 1,
  ImGuiInputEventType_MouseWheel = 2,
  ImGuiInputEventType_MouseButton = 3,
  ImGuiInputEventType_MouseViewport = 4,
  ImGuiInputEventType_Key = 5,
  ImGuiInputEventType_Text = 6,
  ImGuiInputEventType_Focus = 7,
  ImGuiInputEventType_COUNT = 8
}
global ImGuiInputSource: type <cimport,nodecl,using> = @enum(cint){
  ImGuiInputSource_None = 0,
  ImGuiInputSource_Mouse = 1,
  ImGuiInputSource_Keyboard = 2,
  ImGuiInputSource_Gamepad = 3,
  ImGuiInputSource_COUNT = 4
}
ImGuiInputEventMousePos = @record{
  PosX: float32,
  PosY: float32,
  MouseSource: cint
}
ImGuiInputEventMouseWheel = @record{
  WheelX: float32,
  WheelY: float32,
  MouseSource: cint
}
ImGuiInputEventMouseButton = @record{
  Button: cint,
  Down: boolean,
  MouseSource: cint
}
ImGuiInputEventMouseViewport = @record{
  HoveredViewportID: cuint
}
ImGuiInputEventKey = @record{
  Key: cint,
  Down: boolean,
  AnalogValue: float32
}
ImGuiInputEventText = @record{
  Char: cuint
}
ImGuiInputEventAppFocused = @record{
  Focused: boolean
}
ImGuiInputEvent = @record{
  Type: ImGuiInputEventType,
  Source: ImGuiInputSource,
  EventId: cuint,
  __unnamed4: union{
    MousePos: ImGuiInputEventMousePos,
    MouseWheel: ImGuiInputEventMouseWheel,
    MouseButton: ImGuiInputEventMouseButton,
    MouseViewport: ImGuiInputEventMouseViewport,
    Key: ImGuiInputEventKey,
    Text: ImGuiInputEventText,
    AppFocused: ImGuiInputEventAppFocused
  },
  AddedByTestEngine: boolean
}
ImGuiKeyRoutingData = @record{
  NextEntryIndex: cshort,
  Mods: cushort,
  RoutingCurrScore: cuchar,
  RoutingNextScore: cuchar,
  RoutingCurr: cuint,
  RoutingNext: cuint
}
ImGuiKeyRoutingTable = @record{
  Index: [155]cshort,
  Entries: ImVector_ImGuiKeyRoutingData,
  EntriesNext: ImVector_ImGuiKeyRoutingData
}
ImGuiKeyOwnerData = @record{
  OwnerCurr: cuint,
  OwnerNext: cuint,
  LockThisFrame: boolean,
  LockUntilRelease: boolean
}
ImGuiListClipperRange = @record{
  Min: cint,
  Max: cint,
  PosToIndexConvert: boolean,
  PosToIndexOffsetMin: cschar,
  PosToIndexOffsetMax: cschar
}
ImGuiListClipperData = @record{
  ListClipper: *ImGuiListClipper,
  LossynessOffset: float32,
  StepNo: cint,
  ItemsFrozen: cint,
  Ranges: ImVector_ImGuiListClipperRange
}
global ImGuiNavLayer: type <cimport,nodecl,using> = @enum(cint){
  ImGuiNavLayer_Main = 0,
  ImGuiNavLayer_Menu = 1,
  ImGuiNavLayer_COUNT = 2
}
ImGuiNavItemData = @record{
  Window: *ImGuiWindow,
  ID: cuint,
  FocusScopeId: cuint,
  RectRel: ImRect,
  ItemFlags: cint,
  DistBox: float32,
  DistCenter: float32,
  DistAxial: float32,
  SelectionUserData: clonglong
}
ImGuiFocusScopeData = @record{
  ID: cuint,
  WindowID: cuint
}
ImGuiTypingSelectRequest = @record{
  Flags: cint,
  SearchBufferLen: cint,
  SearchBuffer: cstring,
  SelectRequest: boolean,
  SingleCharMode: boolean,
  SingleCharSize: cschar
}
ImGuiTypingSelectState = @record{
  Request: ImGuiTypingSelectRequest,
  SearchBuffer: [64]cchar,
  FocusScope: cuint,
  LastRequestFrame: cint,
  LastRequestTime: float32,
  SingleCharModeLock: boolean
}
ImGuiOldColumnData = @record{
  OffsetNorm: float32,
  OffsetNormBeforeResize: float32,
  Flags: cint,
  ClipRect: ImRect
}
ImGuiOldColumns = @record{
  ID: cuint,
  Flags: cint,
  IsFirstFrame: boolean,
  IsBeingResized: boolean,
  Current: cint,
  Count: cint,
  OffMinX: float32,
  OffMaxX: float32,
  LineMinY: float32,
  LineMaxY: float32,
  HostCursorPosY: float32,
  HostCursorMaxPosX: float32,
  HostInitialClipRect: ImRect,
  HostBackupClipRect: ImRect,
  HostBackupParentWorkRect: ImRect,
  Columns: ImVector_ImGuiOldColumnData,
  Splitter: ImDrawListSplitter
}
ImGuiBoxSelectState = @record{
  ID: cuint,
  IsActive: boolean,
  IsStarting: boolean,
  IsStartedFromVoid: boolean,
  IsStartedSetNavIdOnce: boolean,
  RequestClear: boolean,
  KeyMods: cint,
  StartPosRel: ImVec2,
  EndPosRel: ImVec2,
  ScrollAccum: ImVec2,
  Window: *ImGuiWindow,
  UnclipMode: boolean,
  UnclipRect: ImRect,
  BoxSelectRectPrev: ImRect,
  BoxSelectRectCurr: ImRect
}
ImGuiMultiSelectTempData = @record{
  IO: ImGuiMultiSelectIO,
  Storage: *ImGuiMultiSelectState,
  FocusScopeId: cuint,
  Flags: cint,
  ScopeRectMin: ImVec2,
  BackupCursorMaxPos: ImVec2,
  LastSubmittedItem: clonglong,
  BoxSelectId: cuint,
  KeyMods: cint,
  LoopRequestSetAll: cschar,
  IsEndIO: boolean,
  IsFocused: boolean,
  IsKeyboardSetRange: boolean,
  NavIdPassedBy: boolean,
  RangeSrcPassedBy: boolean,
  RangeDstPassedBy: boolean
}
ImGuiMultiSelectState = @record{
  Window: *ImGuiWindow,
  ID: cuint,
  LastFrameActive: cint,
  LastSelectionSize: cint,
  RangeSelected: cschar,
  NavIdSelected: cschar,
  RangeSrcItem: clonglong,
  NavIdItem: clonglong
}
global ImGuiDockNodeState: type <cimport,nodecl,using> = @enum(cint){
  ImGuiDockNodeState_Unknown = 0,
  ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow = 1,
  ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing = 2,
  ImGuiDockNodeState_HostWindowVisible = 3
}
ImGuiDockNode = @record{
  ID: cuint,
  SharedFlags: cint,
  LocalFlags: cint,
  LocalFlagsInWindows: cint,
  MergedFlags: cint,
  State: ImGuiDockNodeState,
  ParentNode: *ImGuiDockNode,
  ChildNodes: [2]*ImGuiDockNode,
  Windows: ImVector_ImGuiWindowPtr,
  TabBar: *ImGuiTabBar,
  Pos: ImVec2,
  Size: ImVec2,
  SizeRef: ImVec2,
  SplitAxis: ImGuiAxis,
  WindowClass: ImGuiWindowClass,
  LastBgColor: cuint,
  HostWindow: *ImGuiWindow,
  VisibleWindow: *ImGuiWindow,
  CentralNode: *ImGuiDockNode,
  OnlyNodeWithWindows: *ImGuiDockNode,
  CountNodeWithWindows: cint,
  LastFrameAlive: cint,
  LastFrameActive: cint,
  LastFrameFocused: cint,
  LastFocusedNodeId: cuint,
  SelectedTabId: cuint,
  WantCloseTabId: cuint,
  RefViewportId: cuint,
  AuthorityForPos: cint,
  AuthorityForSize: cint,
  AuthorityForViewport: cint,
  IsVisible: boolean,
  IsFocused: boolean,
  IsBgDrawnThisFrame: boolean,
  HasCloseButton: boolean,
  HasWindowMenuButton: boolean,
  HasCentralNodeChild: boolean,
  WantCloseAll: boolean,
  WantLockSizeOnce: boolean,
  WantMouseMove: boolean,
  WantHiddenTabBarUpdate: boolean,
  WantHiddenTabBarToggle: boolean
}
ImGuiWindowDockStyle = @record{
  Colors: [8]cuint
}
ImGuiDockContext = @record{
  Nodes: ImGuiStorage,
  Requests: ImVector_ImGuiDockRequest,
  NodesSettings: ImVector_ImGuiDockNodeSettings,
  WantFullRebuild: boolean
}
ImGuiViewportP = @record{
  ID: cuint,
  Flags: cint,
  Pos: ImVec2,
  Size: ImVec2,
  FramebufferScale: ImVec2,
  WorkPos: ImVec2,
  WorkSize: ImVec2,
  DpiScale: float32,
  ParentViewportId: cuint,
  DrawData: *ImDrawData,
  RendererUserData: pointer,
  PlatformUserData: pointer,
  PlatformHandle: pointer,
  PlatformHandleRaw: pointer,
  PlatformWindowCreated: boolean,
  PlatformRequestMove: boolean,
  PlatformRequestResize: boolean,
  PlatformRequestClose: boolean,
  Window: *ImGuiWindow,
  Idx: cint,
  LastFrameActive: cint,
  LastFocusedStampCount: cint,
  LastNameHash: cuint,
  LastPos: ImVec2,
  LastSize: ImVec2,
  Alpha: float32,
  LastAlpha: float32,
  LastFocusedHadNavWindow: boolean,
  PlatformMonitor: cshort,
  BgFgDrawListsLastFrame: [2]cint,
  BgFgDrawLists: [2]*ImDrawList,
  DrawDataP: ImDrawData,
  DrawDataBuilder: ImDrawDataBuilder,
  LastPlatformPos: ImVec2,
  LastPlatformSize: ImVec2,
  LastRendererSize: ImVec2,
  WorkInsetMin: ImVec2,
  WorkInsetMax: ImVec2,
  BuildWorkInsetMin: ImVec2,
  BuildWorkInsetMax: ImVec2
}
ImGuiSettingsHandler = @record{
  TypeName: cstring,
  TypeHash: cuint,
  ClearAllFn: function(ctx: *ImGuiContext, handler: *ImGuiSettingsHandler): void,
  ReadInitFn: function(ctx: *ImGuiContext, handler: *ImGuiSettingsHandler): void,
  ReadOpenFn: function(ctx: *ImGuiContext, handler: *ImGuiSettingsHandler, name: cstring): pointer,
  ReadLineFn: function(ctx: *ImGuiContext, handler: *ImGuiSettingsHandler, entry: pointer, line: cstring): void,
  ApplyAllFn: function(ctx: *ImGuiContext, handler: *ImGuiSettingsHandler): void,
  WriteAllFn: function(ctx: *ImGuiContext, handler: *ImGuiSettingsHandler, out_buf: *ImGuiTextBuffer): void,
  UserData: pointer
}
ImGuiDebugAllocEntry = @record{
  FrameCount: cint,
  AllocCount: cshort,
  FreeCount: cshort
}
ImGuiDebugAllocInfo = @record{
  TotalAllocCount: cint,
  TotalFreeCount: cint,
  LastEntriesIdx: cshort,
  LastEntriesBuf: [6]ImGuiDebugAllocEntry
}
ImGuiMetricsConfig = @record{
  ShowDebugLog: boolean,
  ShowIDStackTool: boolean,
  ShowWindowsRects: boolean,
  ShowWindowsBeginOrder: boolean,
  ShowTablesRects: boolean,
  ShowDrawCmdMesh: boolean,
  ShowDrawCmdBoundingBoxes: boolean,
  ShowTextEncodingViewer: boolean,
  ShowTextureUsedRect: boolean,
  ShowDockingNodes: boolean,
  ShowWindowsRectsType: cint,
  ShowTablesRectsType: cint,
  HighlightMonitorIdx: cint,
  HighlightViewportID: cuint,
  ShowFontPreview: boolean
}
ImGuiStackLevelInfo = @record{
  ID: cuint,
  QueryFrameCount: cschar,
  QuerySuccess: boolean,
  DataType: cint,
  Desc: [57]cchar
}
ImGuiIDStackTool = @record{
  LastActiveFrame: cint,
  StackLevel: cint,
  QueryId: cuint,
  Results: ImVector_ImGuiStackLevelInfo,
  CopyToClipboardOnCtrlC: boolean,
  CopyToClipboardLastTime: float32,
  ResultPathBuf: ImGuiTextBuffer
}
global ImGuiContextHookType: type <cimport,nodecl,using> = @enum(cint){
  ImGuiContextHookType_NewFramePre = 0,
  ImGuiContextHookType_NewFramePost = 1,
  ImGuiContextHookType_EndFramePre = 2,
  ImGuiContextHookType_EndFramePost = 3,
  ImGuiContextHookType_RenderPre = 4,
  ImGuiContextHookType_RenderPost = 5,
  ImGuiContextHookType_Shutdown = 6,
  ImGuiContextHookType_PendingRemoval_ = 7
}
ImGuiContextHook = @record{
  HookId: cuint,
  Type: ImGuiContextHookType,
  Owner: cuint,
  Callback: function(ctx: *ImGuiContext, hook: *ImGuiContextHook): void,
  UserData: pointer
}
ImGuiContext = @record{
  Initialized: boolean,
  IO: ImGuiIO,
  PlatformIO: ImGuiPlatformIO,
  Style: ImGuiStyle,
  ConfigFlagsCurrFrame: cint,
  ConfigFlagsLastFrame: cint,
  FontAtlases: ImVector_ImFontAtlasPtr,
  Font: *ImFont,
  FontBaked: *ImFontBaked,
  FontSize: float32,
  FontSizeBase: float32,
  FontBakedScale: float32,
  FontRasterizerDensity: float32,
  CurrentDpiScale: float32,
  DrawListSharedData: ImDrawListSharedData,
  Time: float64,
  FrameCount: cint,
  FrameCountEnded: cint,
  FrameCountPlatformEnded: cint,
  FrameCountRendered: cint,
  WithinEndChildID: cuint,
  WithinFrameScope: boolean,
  WithinFrameScopeWithImplicitWindow: boolean,
  GcCompactAll: boolean,
  TestEngineHookItems: boolean,
  TestEngine: pointer,
  ContextName: [16]cchar,
  InputEventsQueue: ImVector_ImGuiInputEvent,
  InputEventsTrail: ImVector_ImGuiInputEvent,
  InputEventsNextMouseSource: cint,
  InputEventsNextEventId: cuint,
  Windows: ImVector_ImGuiWindowPtr,
  WindowsFocusOrder: ImVector_ImGuiWindowPtr,
  WindowsTempSortBuffer: ImVector_ImGuiWindowPtr,
  CurrentWindowStack: ImVector_ImGuiWindowStackData,
  WindowsById: ImGuiStorage,
  WindowsActiveCount: cint,
  WindowsBorderHoverPadding: float32,
  DebugBreakInWindow: cuint,
  CurrentWindow: *ImGuiWindow,
  HoveredWindow: *ImGuiWindow,
  HoveredWindowUnderMovingWindow: *ImGuiWindow,
  HoveredWindowBeforeClear: *ImGuiWindow,
  MovingWindow: *ImGuiWindow,
  WheelingWindow: *ImGuiWindow,
  WheelingWindowRefMousePos: ImVec2,
  WheelingWindowStartFrame: cint,
  WheelingWindowScrolledFrame: cint,
  WheelingWindowReleaseTimer: float32,
  WheelingWindowWheelRemainder: ImVec2,
  WheelingAxisAvg: ImVec2,
  DebugDrawIdConflictsId: cuint,
  DebugHookIdInfo: cuint,
  HoveredId: cuint,
  HoveredIdPreviousFrame: cuint,
  HoveredIdPreviousFrameItemCount: cint,
  HoveredIdTimer: float32,
  HoveredIdNotActiveTimer: float32,
  HoveredIdAllowOverlap: boolean,
  HoveredIdIsDisabled: boolean,
  ItemUnclipByLog: boolean,
  ActiveId: cuint,
  ActiveIdIsAlive: cuint,
  ActiveIdTimer: float32,
  ActiveIdIsJustActivated: boolean,
  ActiveIdAllowOverlap: boolean,
  ActiveIdNoClearOnFocusLoss: boolean,
  ActiveIdHasBeenPressedBefore: boolean,
  ActiveIdHasBeenEditedBefore: boolean,
  ActiveIdHasBeenEditedThisFrame: boolean,
  ActiveIdFromShortcut: boolean,
  ActiveIdDisabledId: cuint,
  ActiveIdMouseButton: cint,
  ActiveIdClickOffset: ImVec2,
  ActiveIdWindow: *ImGuiWindow,
  ActiveIdSource: ImGuiInputSource,
  ActiveIdPreviousFrame: cuint,
  DeactivatedItemData: ImGuiDeactivatedItemData,
  ActiveIdValueOnActivation: ImGuiDataTypeStorage,
  LastActiveId: cuint,
  LastActiveIdTimer: float32,
  LastKeyModsChangeTime: float64,
  LastKeyModsChangeFromNoneTime: float64,
  LastKeyboardKeyPressTime: float64,
  KeysMayBeCharInput: ImBitArrayForNamedKeys,
  KeysOwnerData: [155]ImGuiKeyOwnerData,
  KeysRoutingTable: ImGuiKeyRoutingTable,
  ActiveIdUsingNavDirMask: cuint,
  ActiveIdUsingAllKeyboardKeys: boolean,
  DebugBreakInShortcutRouting: cint,
  CurrentFocusScopeId: cuint,
  CurrentItemFlags: cint,
  DebugLocateId: cuint,
  NextItemData: ImGuiNextItemData,
  LastItemData: ImGuiLastItemData,
  NextWindowData: ImGuiNextWindowData,
  DebugShowGroupRects: boolean,
  DebugFlashStyleColorIdx: cint,
  ColorStack: ImVector_ImGuiColorMod,
  StyleVarStack: ImVector_ImGuiStyleMod,
  FontStack: ImVector_ImFontStackData,
  FocusScopeStack: ImVector_ImGuiFocusScopeData,
  ItemFlagsStack: ImVector_ImGuiItemFlags,
  GroupStack: ImVector_ImGuiGroupData,
  OpenPopupStack: ImVector_ImGuiPopupData,
  BeginPopupStack: ImVector_ImGuiPopupData,
  TreeNodeStack: ImVector_ImGuiTreeNodeStackData,
  Viewports: ImVector_ImGuiViewportPPtr,
  CurrentViewport: *ImGuiViewportP,
  MouseViewport: *ImGuiViewportP,
  MouseLastHoveredViewport: *ImGuiViewportP,
  PlatformLastFocusedViewportId: cuint,
  FallbackMonitor: ImGuiPlatformMonitor,
  PlatformMonitorsFullWorkRect: ImRect,
  ViewportCreatedCount: cint,
  PlatformWindowsCreatedCount: cint,
  ViewportFocusedStampCount: cint,
  NavCursorVisible: boolean,
  NavHighlightItemUnderNav: boolean,
  NavMousePosDirty: boolean,
  NavIdIsAlive: boolean,
  NavId: cuint,
  NavWindow: *ImGuiWindow,
  NavFocusScopeId: cuint,
  NavLayer: ImGuiNavLayer,
  NavActivateId: cuint,
  NavActivateDownId: cuint,
  NavActivatePressedId: cuint,
  NavActivateFlags: cint,
  NavFocusRoute: ImVector_ImGuiFocusScopeData,
  NavHighlightActivatedId: cuint,
  NavHighlightActivatedTimer: float32,
  NavNextActivateId: cuint,
  NavNextActivateFlags: cint,
  NavInputSource: ImGuiInputSource,
  NavLastValidSelectionUserData: clonglong,
  NavCursorHideFrames: cschar,
  NavAnyRequest: boolean,
  NavInitRequest: boolean,
  NavInitRequestFromMove: boolean,
  NavInitResult: ImGuiNavItemData,
  NavMoveSubmitted: boolean,
  NavMoveScoringItems: boolean,
  NavMoveForwardToNextFrame: boolean,
  NavMoveFlags: cint,
  NavMoveScrollFlags: cint,
  NavMoveKeyMods: cint,
  NavMoveDir: cint,
  NavMoveDirForDebug: cint,
  NavMoveClipDir: cint,
  NavScoringRect: ImRect,
  NavScoringNoClipRect: ImRect,
  NavScoringDebugCount: cint,
  NavTabbingDir: cint,
  NavTabbingCounter: cint,
  NavMoveResultLocal: ImGuiNavItemData,
  NavMoveResultLocalVisible: ImGuiNavItemData,
  NavMoveResultOther: ImGuiNavItemData,
  NavTabbingResultFirst: ImGuiNavItemData,
  NavJustMovedFromFocusScopeId: cuint,
  NavJustMovedToId: cuint,
  NavJustMovedToFocusScopeId: cuint,
  NavJustMovedToKeyMods: cint,
  NavJustMovedToIsTabbing: boolean,
  NavJustMovedToHasSelectionData: boolean,
  ConfigNavWindowingWithGamepad: boolean,
  ConfigNavWindowingKeyNext: cint,
  ConfigNavWindowingKeyPrev: cint,
  NavWindowingTarget: *ImGuiWindow,
  NavWindowingTargetAnim: *ImGuiWindow,
  NavWindowingListWindow: *ImGuiWindow,
  NavWindowingTimer: float32,
  NavWindowingHighlightAlpha: float32,
  NavWindowingInputSource: ImGuiInputSource,
  NavWindowingToggleLayer: boolean,
  NavWindowingToggleKey: cint,
  NavWindowingAccumDeltaPos: ImVec2,
  NavWindowingAccumDeltaSize: ImVec2,
  DimBgRatio: float32,
  DragDropActive: boolean,
  DragDropWithinSource: boolean,
  DragDropWithinTarget: boolean,
  DragDropSourceFlags: cint,
  DragDropSourceFrameCount: cint,
  DragDropMouseButton: cint,
  DragDropPayload: ImGuiPayload,
  DragDropTargetRect: ImRect,
  DragDropTargetClipRect: ImRect,
  DragDropTargetId: cuint,
  DragDropAcceptFlags: cint,
  DragDropAcceptIdCurrRectSurface: float32,
  DragDropAcceptIdCurr: cuint,
  DragDropAcceptIdPrev: cuint,
  DragDropAcceptFrameCount: cint,
  DragDropHoldJustPressedId: cuint,
  DragDropPayloadBufHeap: ImVector_unsigned_char,
  DragDropPayloadBufLocal: [16]cuchar,
  ClipperTempDataStacked: cint,
  ClipperTempData: ImVector_ImGuiListClipperData,
  CurrentTable: *ImGuiTable,
  DebugBreakInTable: cuint,
  TablesTempDataStacked: cint,
  TablesTempData: ImVector_ImGuiTableTempData,
  Tables: ImPool_ImGuiTable,
  TablesLastTimeActive: ImVector_float,
  DrawChannelsTempMergeBuffer: ImVector_ImDrawChannel,
  CurrentTabBar: *ImGuiTabBar,
  TabBars: ImPool_ImGuiTabBar,
  CurrentTabBarStack: ImVector_ImGuiPtrOrIndex,
  ShrinkWidthBuffer: ImVector_ImGuiShrinkWidthItem,
  BoxSelectState: ImGuiBoxSelectState,
  CurrentMultiSelect: *ImGuiMultiSelectTempData,
  MultiSelectTempDataStacked: cint,
  MultiSelectTempData: ImVector_ImGuiMultiSelectTempData,
  MultiSelectStorage: ImPool_ImGuiMultiSelectState,
  HoverItemDelayId: cuint,
  HoverItemDelayIdPreviousFrame: cuint,
  HoverItemDelayTimer: float32,
  HoverItemDelayClearTimer: float32,
  HoverItemUnlockedStationaryId: cuint,
  HoverWindowUnlockedStationaryId: cuint,
  MouseCursor: cint,
  MouseStationaryTimer: float32,
  MouseLastValidPos: ImVec2,
  InputTextState: ImGuiInputTextState,
  InputTextDeactivatedState: ImGuiInputTextDeactivatedState,
  InputTextPasswordFontBackupBaked: ImFontBaked,
  InputTextPasswordFontBackupFlags: cint,
  TempInputId: cuint,
  DataTypeZeroValue: ImGuiDataTypeStorage,
  BeginMenuDepth: cint,
  BeginComboDepth: cint,
  ColorEditOptions: cint,
  ColorEditCurrentID: cuint,
  ColorEditSavedID: cuint,
  ColorEditSavedHue: float32,
  ColorEditSavedSat: float32,
  ColorEditSavedColor: cuint,
  ColorPickerRef: ImVec4,
  ComboPreviewData: ImGuiComboPreviewData,
  WindowResizeBorderExpectedRect: ImRect,
  WindowResizeRelativeMode: boolean,
  ScrollbarSeekMode: cshort,
  ScrollbarClickDeltaToGrabCenter: float32,
  SliderGrabClickOffset: float32,
  SliderCurrentAccum: float32,
  SliderCurrentAccumDirty: boolean,
  DragCurrentAccumDirty: boolean,
  DragCurrentAccum: float32,
  DragSpeedDefaultRatio: float32,
  DisabledAlphaBackup: float32,
  DisabledStackSize: cshort,
  TooltipOverrideCount: cshort,
  TooltipPreviousWindow: *ImGuiWindow,
  ClipboardHandlerData: ImVector_char,
  MenusIdSubmittedThisFrame: ImVector_ImGuiID,
  TypingSelectState: ImGuiTypingSelectState,
  PlatformImeData: ImGuiPlatformImeData,
  PlatformImeDataPrev: ImGuiPlatformImeData,
  UserTextures: ImVector_ImTextureDataPtr,
  DockContext: ImGuiDockContext,
  DockNodeWindowMenuHandler: function(ctx: *ImGuiContext, node: *ImGuiDockNode, tab_bar: *ImGuiTabBar): void,
  SettingsLoaded: boolean,
  SettingsDirtyTimer: float32,
  SettingsIniData: ImGuiTextBuffer,
  SettingsHandlers: ImVector_ImGuiSettingsHandler,
  SettingsWindows: ImChunkStream_ImGuiWindowSettings,
  SettingsTables: ImChunkStream_ImGuiTableSettings,
  Hooks: ImVector_ImGuiContextHook,
  HookIdNext: cuint,
  LocalizationTable: [13]cstring,
  LogEnabled: boolean,
  LogFlags: cint,
  LogWindow: *ImGuiWindow,
  LogFile: *FILE,
  LogBuffer: ImGuiTextBuffer,
  LogNextPrefix: cstring,
  LogNextSuffix: cstring,
  LogLinePosY: float32,
  LogLineFirstItem: boolean,
  LogDepthRef: cint,
  LogDepthToExpand: cint,
  LogDepthToExpandDefault: cint,
  ErrorCallback: function(ctx: *ImGuiContext, user_data: pointer, msg: cstring): void,
  ErrorCallbackUserData: pointer,
  ErrorTooltipLockedPos: ImVec2,
  ErrorFirst: boolean,
  ErrorCountCurrentFrame: cint,
  StackSizesInNewFrame: ImGuiErrorRecoveryState,
  StackSizesInBeginForCurrentWindow: *ImGuiErrorRecoveryState,
  DebugDrawIdConflictsCount: cint,
  DebugLogFlags: cint,
  DebugLogBuf: ImGuiTextBuffer,
  DebugLogIndex: ImGuiTextIndex,
  DebugLogSkippedErrors: cint,
  DebugLogAutoDisableFlags: cint,
  DebugLogAutoDisableFrames: cuchar,
  DebugLocateFrames: cuchar,
  DebugBreakInLocateId: boolean,
  DebugBreakKeyChord: cint,
  DebugBeginReturnValueCullDepth: cschar,
  DebugItemPickerActive: boolean,
  DebugItemPickerMouseButton: cuchar,
  DebugItemPickerBreakId: cuint,
  DebugFlashStyleColorTime: float32,
  DebugFlashStyleColorBackup: ImVec4,
  DebugMetricsConfig: ImGuiMetricsConfig,
  DebugIDStackTool: ImGuiIDStackTool,
  DebugAllocInfo: ImGuiDebugAllocInfo,
  DebugHoveredDockNode: *ImGuiDockNode,
  FramerateSecPerFrame: [60]float32,
  FramerateSecPerFrameIdx: cint,
  FramerateSecPerFrameCount: cint,
  FramerateSecPerFrameAccum: float32,
  WantCaptureMouseNextFrame: cint,
  WantCaptureKeyboardNextFrame: cint,
  WantTextInputNextFrame: cint,
  TempBuffer: ImVector_char,
  TempKeychordName: [64]cchar
}
ImGuiWindowTempData = @record{
  CursorPos: ImVec2,
  CursorPosPrevLine: ImVec2,
  CursorStartPos: ImVec2,
  CursorMaxPos: ImVec2,
  IdealMaxPos: ImVec2,
  CurrLineSize: ImVec2,
  PrevLineSize: ImVec2,
  CurrLineTextBaseOffset: float32,
  PrevLineTextBaseOffset: float32,
  IsSameLine: boolean,
  IsSetPos: boolean,
  Indent: ImVec1,
  ColumnsOffset: ImVec1,
  GroupOffset: ImVec1,
  CursorStartPosLossyness: ImVec2,
  NavLayerCurrent: ImGuiNavLayer,
  NavLayersActiveMask: cshort,
  NavLayersActiveMaskNext: cshort,
  NavIsScrollPushableX: boolean,
  NavHideHighlightOneFrame: boolean,
  NavWindowHasScrollY: boolean,
  MenuBarAppending: boolean,
  MenuBarOffset: ImVec2,
  MenuColumns: ImGuiMenuColumns,
  TreeDepth: cint,
  TreeHasStackDataDepthMask: cuint,
  TreeRecordsClippedNodesY2Mask: cuint,
  ChildWindows: ImVector_ImGuiWindowPtr,
  StateStorage: *ImGuiStorage,
  CurrentColumns: *ImGuiOldColumns,
  CurrentTableIdx: cint,
  LayoutType: cint,
  ParentLayoutType: cint,
  ModalDimBgColor: cuint,
  WindowItemStatusFlags: cint,
  ChildItemStatusFlags: cint,
  DockTabItemStatusFlags: cint,
  DockTabItemRect: ImRect,
  ItemWidth: float32,
  TextWrapPos: float32,
  ItemWidthStack: ImVector_float,
  TextWrapPosStack: ImVector_float
}
ImGuiWindow = @record{
  Ctx: *ImGuiContext,
  Name: cstring,
  ID: cuint,
  Flags: cint,
  FlagsPreviousFrame: cint,
  ChildFlags: cint,
  WindowClass: ImGuiWindowClass,
  Viewport: *ImGuiViewportP,
  ViewportId: cuint,
  ViewportPos: ImVec2,
  ViewportAllowPlatformMonitorExtend: cint,
  Pos: ImVec2,
  Size: ImVec2,
  SizeFull: ImVec2,
  ContentSize: ImVec2,
  ContentSizeIdeal: ImVec2,
  ContentSizeExplicit: ImVec2,
  WindowPadding: ImVec2,
  WindowRounding: float32,
  WindowBorderSize: float32,
  TitleBarHeight: float32,
  MenuBarHeight: float32,
  DecoOuterSizeX1: float32,
  DecoOuterSizeY1: float32,
  DecoOuterSizeX2: float32,
  DecoOuterSizeY2: float32,
  DecoInnerSizeX1: float32,
  DecoInnerSizeY1: float32,
  NameBufLen: cint,
  MoveId: cuint,
  TabId: cuint,
  ChildId: cuint,
  PopupId: cuint,
  Scroll: ImVec2,
  ScrollMax: ImVec2,
  ScrollTarget: ImVec2,
  ScrollTargetCenterRatio: ImVec2,
  ScrollTargetEdgeSnapDist: ImVec2,
  ScrollbarSizes: ImVec2,
  ScrollbarX: boolean,
  ScrollbarY: boolean,
  ScrollbarXStabilizeEnabled: boolean,
  ScrollbarXStabilizeToggledHistory: cuchar,
  ViewportOwned: boolean,
  Active: boolean,
  WasActive: boolean,
  WriteAccessed: boolean,
  Collapsed: boolean,
  WantCollapseToggle: boolean,
  SkipItems: boolean,
  SkipRefresh: boolean,
  Appearing: boolean,
  Hidden: boolean,
  IsFallbackWindow: boolean,
  IsExplicitChild: boolean,
  HasCloseButton: boolean,
  ResizeBorderHovered: cschar,
  ResizeBorderHeld: cschar,
  BeginCount: cshort,
  BeginCountPreviousFrame: cshort,
  BeginOrderWithinParent: cshort,
  BeginOrderWithinContext: cshort,
  FocusOrder: cshort,
  AutoFitFramesX: cschar,
  AutoFitFramesY: cschar,
  AutoFitOnlyGrows: boolean,
  AutoPosLastDirection: cint,
  HiddenFramesCanSkipItems: cschar,
  HiddenFramesCannotSkipItems: cschar,
  HiddenFramesForRenderOnly: cschar,
  DisableInputsFrames: cschar,
  SetWindowPosAllowFlags: cint,
  SetWindowSizeAllowFlags: cint,
  SetWindowCollapsedAllowFlags: cint,
  SetWindowDockAllowFlags: cint,
  SetWindowPosVal: ImVec2,
  SetWindowPosPivot: ImVec2,
  IDStack: ImVector_ImGuiID,
  DC: ImGuiWindowTempData,
  OuterRectClipped: ImRect,
  InnerRect: ImRect,
  InnerClipRect: ImRect,
  WorkRect: ImRect,
  ParentWorkRect: ImRect,
  ClipRect: ImRect,
  ContentRegionRect: ImRect,
  HitTestHoleSize: ImVec2ih,
  HitTestHoleOffset: ImVec2ih,
  LastFrameActive: cint,
  LastFrameJustFocused: cint,
  LastTimeActive: float32,
  ItemWidthDefault: float32,
  StateStorage: ImGuiStorage,
  ColumnsStorage: ImVector_ImGuiOldColumns,
  FontWindowScale: float32,
  FontWindowScaleParents: float32,
  FontRefSize: float32,
  SettingsOffset: cint,
  DrawList: *ImDrawList,
  DrawListInst: ImDrawList,
  ParentWindow: *ImGuiWindow,
  ParentWindowInBeginStack: *ImGuiWindow,
  RootWindow: *ImGuiWindow,
  RootWindowPopupTree: *ImGuiWindow,
  RootWindowDockTree: *ImGuiWindow,
  RootWindowForTitleBarHighlight: *ImGuiWindow,
  RootWindowForNav: *ImGuiWindow,
  ParentWindowForFocusRoute: *ImGuiWindow,
  NavLastChildNavWindow: *ImGuiWindow,
  NavLastIds: [2]cuint,
  NavRectRel: [2]ImRect,
  NavPreferredScoringPosRel: [2]ImVec2,
  NavRootFocusScopeId: cuint,
  MemoryDrawListIdxCapacity: cint,
  MemoryDrawListVtxCapacity: cint,
  MemoryCompacted: boolean,
  DockIsActive: boolean,
  DockNodeIsVisible: boolean,
  DockTabIsVisible: boolean,
  DockTabWantClose: boolean,
  DockOrder: cshort,
  DockStyle: ImGuiWindowDockStyle,
  DockNode: *ImGuiDockNode,
  DockNodeAsHost: *ImGuiDockNode,
  DockId: cuint
}
ImGuiTabItem = @record{
  ID: cuint,
  Flags: cint,
  Window: *ImGuiWindow,
  LastFrameVisible: cint,
  LastFrameSelected: cint,
  Offset: float32,
  Width: float32,
  ContentWidth: float32,
  RequestedWidth: float32,
  NameOffset: cint,
  BeginOrder: cshort,
  IndexDuringLayout: cshort,
  WantClose: boolean
}
ImGuiTabBar = @record{
  Window: *ImGuiWindow,
  Tabs: ImVector_ImGuiTabItem,
  Flags: cint,
  ID: cuint,
  SelectedTabId: cuint,
  NextSelectedTabId: cuint,
  VisibleTabId: cuint,
  CurrFrameVisible: cint,
  PrevFrameVisible: cint,
  BarRect: ImRect,
  BarRectPrevWidth: float32,
  CurrTabsContentsHeight: float32,
  PrevTabsContentsHeight: float32,
  WidthAllTabs: float32,
  WidthAllTabsIdeal: float32,
  ScrollingAnim: float32,
  ScrollingTarget: float32,
  ScrollingTargetDistToVisibility: float32,
  ScrollingSpeed: float32,
  ScrollingRectMinX: float32,
  ScrollingRectMaxX: float32,
  SeparatorMinX: float32,
  SeparatorMaxX: float32,
  ReorderRequestTabId: cuint,
  ReorderRequestOffset: cshort,
  BeginCount: cschar,
  WantLayout: boolean,
  VisibleTabWasSubmitted: boolean,
  TabsAddedNew: boolean,
  ScrollButtonEnabled: boolean,
  TabsActiveCount: cshort,
  LastTabItemIdx: cshort,
  ItemSpacingY: float32,
  FramePadding: ImVec2,
  BackupCursorPos: ImVec2,
  TabsNames: ImGuiTextBuffer
}
ImGuiTableColumn = @record{
  Flags: cint,
  WidthGiven: float32,
  MinX: float32,
  MaxX: float32,
  WidthRequest: float32,
  WidthAuto: float32,
  WidthMax: float32,
  StretchWeight: float32,
  InitStretchWeightOrWidth: float32,
  ClipRect: ImRect,
  UserID: cuint,
  WorkMinX: float32,
  WorkMaxX: float32,
  ItemWidth: float32,
  ContentMaxXFrozen: float32,
  ContentMaxXUnfrozen: float32,
  ContentMaxXHeadersUsed: float32,
  ContentMaxXHeadersIdeal: float32,
  NameOffset: cshort,
  DisplayOrder: cshort,
  IndexWithinEnabledSet: cshort,
  PrevEnabledColumn: cshort,
  NextEnabledColumn: cshort,
  SortOrder: cshort,
  DrawChannelCurrent: cushort,
  DrawChannelFrozen: cushort,
  DrawChannelUnfrozen: cushort,
  IsEnabled: boolean,
  IsUserEnabled: boolean,
  IsUserEnabledNextFrame: boolean,
  IsVisibleX: boolean,
  IsVisibleY: boolean,
  IsRequestOutput: boolean,
  IsSkipItems: boolean,
  IsPreserveWidthAuto: boolean,
  NavLayerCurrent: cschar,
  AutoFitQueue: cuchar,
  CannotSkipItemsQueue: cuchar,
  SortDirection: cuchar,
  SortDirectionsAvailCount: cuchar,
  SortDirectionsAvailMask: cuchar,
  SortDirectionsAvailList: cuchar
}
ImGuiTableCellData = @record{
  BgColor: cuint,
  Column: cshort
}
ImGuiTableHeaderData = @record{
  Index: cshort,
  TextColor: cuint,
  BgColor0: cuint,
  BgColor1: cuint
}
ImGuiTableInstanceData = @record{
  TableInstanceID: cuint,
  LastOuterHeight: float32,
  LastTopHeadersRowHeight: float32,
  LastFrozenHeight: float32,
  HoveredRowLast: cint,
  HoveredRowNext: cint
}
ImGuiTable = @record{
  ID: cuint,
  Flags: cint,
  RawData: pointer,
  TempData: *ImGuiTableTempData,
  Columns: ImSpan_ImGuiTableColumn,
  DisplayOrderToIndex: ImSpan_ImGuiTableColumnIdx,
  RowCellData: ImSpan_ImGuiTableCellData,
  EnabledMaskByDisplayOrder: *cuint,
  EnabledMaskByIndex: *cuint,
  VisibleMaskByIndex: *cuint,
  SettingsLoadedFlags: cint,
  SettingsOffset: cint,
  LastFrameActive: cint,
  ColumnsCount: cint,
  CurrentRow: cint,
  CurrentColumn: cint,
  InstanceCurrent: cshort,
  InstanceInteracted: cshort,
  RowPosY1: float32,
  RowPosY2: float32,
  RowMinHeight: float32,
  RowCellPaddingY: float32,
  RowTextBaseline: float32,
  RowIndentOffsetX: float32,
  RowFlags: cint,
  LastRowFlags: cint,
  RowBgColorCounter: cint,
  RowBgColor: [2]cuint,
  BorderColorStrong: cuint,
  BorderColorLight: cuint,
  BorderX1: float32,
  BorderX2: float32,
  HostIndentX: float32,
  MinColumnWidth: float32,
  OuterPaddingX: float32,
  CellPaddingX: float32,
  CellSpacingX1: float32,
  CellSpacingX2: float32,
  InnerWidth: float32,
  ColumnsGivenWidth: float32,
  ColumnsAutoFitWidth: float32,
  ColumnsStretchSumWeights: float32,
  ResizedColumnNextWidth: float32,
  ResizeLockMinContentsX2: float32,
  RefScale: float32,
  AngledHeadersHeight: float32,
  AngledHeadersSlope: float32,
  OuterRect: ImRect,
  InnerRect: ImRect,
  WorkRect: ImRect,
  InnerClipRect: ImRect,
  BgClipRect: ImRect,
  Bg0ClipRectForDrawCmd: ImRect,
  Bg2ClipRectForDrawCmd: ImRect,
  HostClipRect: ImRect,
  HostBackupInnerClipRect: ImRect,
  OuterWindow: *ImGuiWindow,
  InnerWindow: *ImGuiWindow,
  ColumnsNames: ImGuiTextBuffer,
  DrawSplitter: *ImDrawListSplitter,
  InstanceDataFirst: ImGuiTableInstanceData,
  InstanceDataExtra: ImVector_ImGuiTableInstanceData,
  SortSpecsSingle: ImGuiTableColumnSortSpecs,
  SortSpecsMulti: ImVector_ImGuiTableColumnSortSpecs,
  SortSpecs: ImGuiTableSortSpecs,
  SortSpecsCount: cshort,
  ColumnsEnabledCount: cshort,
  ColumnsEnabledFixedCount: cshort,
  DeclColumnsCount: cshort,
  AngledHeadersCount: cshort,
  HoveredColumnBody: cshort,
  HoveredColumnBorder: cshort,
  HighlightColumnHeader: cshort,
  AutoFitSingleColumn: cshort,
  ResizedColumn: cshort,
  LastResizedColumn: cshort,
  HeldHeaderColumn: cshort,
  ReorderColumn: cshort,
  ReorderColumnDir: cshort,
  LeftMostEnabledColumn: cshort,
  RightMostEnabledColumn: cshort,
  LeftMostStretchedColumn: cshort,
  RightMostStretchedColumn: cshort,
  ContextPopupColumn: cshort,
  FreezeRowsRequest: cshort,
  FreezeRowsCount: cshort,
  FreezeColumnsRequest: cshort,
  FreezeColumnsCount: cshort,
  RowCellDataCurrent: cshort,
  DummyDrawChannel: cushort,
  Bg2DrawChannelCurrent: cushort,
  Bg2DrawChannelUnfrozen: cushort,
  NavLayer: cschar,
  IsLayoutLocked: boolean,
  IsInsideRow: boolean,
  IsInitializing: boolean,
  IsSortSpecsDirty: boolean,
  IsUsingHeaders: boolean,
  IsContextPopupOpen: boolean,
  DisableDefaultContextMenu: boolean,
  IsSettingsRequestLoad: boolean,
  IsSettingsDirty: boolean,
  IsDefaultDisplayOrder: boolean,
  IsResetAllRequest: boolean,
  IsResetDisplayOrderRequest: boolean,
  IsUnfrozenRows: boolean,
  IsDefaultSizingPolicy: boolean,
  IsActiveIdAliveBeforeTable: boolean,
  IsActiveIdInTable: boolean,
  HasScrollbarYCurr: boolean,
  HasScrollbarYPrev: boolean,
  MemoryCompacted: boolean,
  HostSkipItems: boolean
}
ImGuiTableTempData = @record{
  TableIndex: cint,
  LastTimeActive: float32,
  AngledHeadersExtraWidth: float32,
  AngledHeadersRequests: ImVector_ImGuiTableHeaderData,
  UserOuterSize: ImVec2,
  DrawSplitter: ImDrawListSplitter,
  HostBackupWorkRect: ImRect,
  HostBackupParentWorkRect: ImRect,
  HostBackupPrevLineSize: ImVec2,
  HostBackupCurrLineSize: ImVec2,
  HostBackupCursorMaxPos: ImVec2,
  HostBackupColumnsOffset: ImVec1,
  HostBackupItemWidth: float32,
  HostBackupItemWidthStackSize: cint
}
ImFontBuilderIO = @record{
  Name: cstring,
  LoaderInit: function(atlas: *ImFontAtlas): boolean,
  LoaderShutdown: function(atlas: *ImFontAtlas): void,
  FontSrcInit: function(atlas: *ImFontAtlas, src: *ImFontConfig): boolean,
  FontSrcDestroy: function(atlas: *ImFontAtlas, src: *ImFontConfig): void,
  FontSrcContainsGlyph: function(atlas: *ImFontAtlas, src: *ImFontConfig, codepoint: cushort): boolean,
  FontBakedInit: function(atlas: *ImFontAtlas, src: *ImFontConfig, baked: *ImFontBaked, loader_data_for_baked_src: pointer): boolean,
  FontBakedDestroy: function(atlas: *ImFontAtlas, src: *ImFontConfig, baked: *ImFontBaked, loader_data_for_baked_src: pointer): void,
  FontBakedLoadGlyph: function(atlas: *ImFontAtlas, src: *ImFontConfig, baked: *ImFontBaked, loader_data_for_baked_src: pointer, codepoint: cushort, out_glyph: *ImFontGlyph, out_advance_x: *float32): boolean,
  FontBakedSrcLoaderDataSize: csize
}
ImFontAtlasRectEntry = @record{
  TargetIndex: cint,
  Generation: cint,
  IsUsed: cuint
}
ImVector_ImFontAtlasRectEntry = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImFontAtlasRectEntry
}
global stbrp_node_im: type <cimport,nodecl,forwarddecl> = @record{}
ImVector_stbrp_node_im = @record{
  Size: cint,
  Capacity: cint,
  Data: *stbrp_node_im
}
stbrp_context_opaque = @record{
  data: [80]cchar
}
ImFontAtlasBuilder = @record{
  PackContext: stbrp_context_opaque,
  PackNodes: ImVector_stbrp_node_im,
  Rects: ImVector_ImTextureRect,
  RectsIndex: ImVector_ImFontAtlasRectEntry,
  TempBuffer: ImVector_unsigned_char,
  RectsIndexFreeListStart: cint,
  RectsPackedCount: cint,
  RectsPackedSurface: cint,
  RectsDiscardedCount: cint,
  RectsDiscardedSurface: cint,
  FrameCount: cint,
  MaxRectSize: ImVec2i,
  MaxRectBounds: ImVec2i,
  LockDisableResize: boolean,
  PreloadedAllGlyphsRanges: boolean,
  BakedPool: ImStableVector_ImFontBaked_32,
  BakedMap: ImGuiStorage,
  BakedDiscardedCount: cint,
  PackIdMouseCursors: cint,
  PackIdLinesTexData: cint
}
global tm: type <cimport,nodecl> = @record{
  tm_sec: cint,
  tm_min: cint,
  tm_hour: cint,
  tm_mday: cint,
  tm_mon: cint,
  tm_year: cint,
  tm_wday: cint,
  tm_yday: cint,
  tm_isdst: cint
}
global ImPlotContext: type <cimport,nodecl,forwarddecl> = @record{}
global ImPlotTick: type <cimport,nodecl,forwarddecl> = @record{}
global ImPlotAxis: type <cimport,nodecl,forwarddecl> = @record{}
global ImPlotAxisColor: type <cimport,nodecl,forwarddecl> = @record{}
global ImPlotItem: type <cimport,nodecl,forwarddecl> = @record{}
global ImPlotLegend: type <cimport,nodecl,forwarddecl> = @record{}
global ImPlotPlot: type <cimport,nodecl,forwarddecl> = @record{}
global ImPlotNextPlotData: type <cimport,nodecl,forwarddecl> = @record{}
global ImPlotTicker: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImS16: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *cshort
}
global ImVector_ImS32: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *cint
}
global ImVector_ImS64: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *clonglong
}
global ImVector_ImS8: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *cschar
}
global ImVector_ImU64: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *culonglong
}
global ImAxis: type <cimport,nodecl> = @cint
global ImPlotFlags: type <cimport,nodecl> = @cint
global ImPlotAxisFlags: type <cimport,nodecl> = @cint
global ImPlotSubplotFlags: type <cimport,nodecl> = @cint
global ImPlotLegendFlags: type <cimport,nodecl> = @cint
global ImPlotMouseTextFlags: type <cimport,nodecl> = @cint
global ImPlotDragToolFlags: type <cimport,nodecl> = @cint
global ImPlotColormapScaleFlags: type <cimport,nodecl> = @cint
global ImPlotItemFlags: type <cimport,nodecl> = @cint
global ImPlotLineFlags: type <cimport,nodecl> = @cint
global ImPlotScatterFlags: type <cimport,nodecl> = @cint
global ImPlotStairsFlags: type <cimport,nodecl> = @cint
global ImPlotShadedFlags: type <cimport,nodecl> = @cint
global ImPlotBarsFlags: type <cimport,nodecl> = @cint
global ImPlotBarGroupsFlags: type <cimport,nodecl> = @cint
global ImPlotErrorBarsFlags: type <cimport,nodecl> = @cint
global ImPlotStemsFlags: type <cimport,nodecl> = @cint
global ImPlotInfLinesFlags: type <cimport,nodecl> = @cint
global ImPlotPieChartFlags: type <cimport,nodecl> = @cint
global ImPlotHeatmapFlags: type <cimport,nodecl> = @cint
global ImPlotHistogramFlags: type <cimport,nodecl> = @cint
global ImPlotDigitalFlags: type <cimport,nodecl> = @cint
global ImPlotImageFlags: type <cimport,nodecl> = @cint
global ImPlotTextFlags: type <cimport,nodecl> = @cint
global ImPlotDummyFlags: type <cimport,nodecl> = @cint
global ImPlotCond: type <cimport,nodecl> = @cint
global ImPlotCol: type <cimport,nodecl> = @cint
global ImPlotStyleVar: type <cimport,nodecl> = @cint
global ImPlotScale: type <cimport,nodecl> = @cint
global ImPlotMarker: type <cimport,nodecl> = @cint
global ImPlotColormap: type <cimport,nodecl> = @cint
global ImPlotLocation: type <cimport,nodecl> = @cint
global ImPlotBin: type <cimport,nodecl> = @cint
global ImAxis_: type <cimport,nodecl,using> = @enum(cint){
  ImAxis_X1 = 0,
  ImAxis_X2 = 1,
  ImAxis_X3 = 2,
  ImAxis_Y1 = 3,
  ImAxis_Y2 = 4,
  ImAxis_Y3 = 5,
  ImAxis_COUNT = 6
}
global ImPlotFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotFlags_None = 0,
  ImPlotFlags_NoTitle = 1,
  ImPlotFlags_NoLegend = 2,
  ImPlotFlags_NoMouseText = 4,
  ImPlotFlags_NoInputs = 8,
  ImPlotFlags_NoMenus = 16,
  ImPlotFlags_NoBoxSelect = 32,
  ImPlotFlags_NoFrame = 64,
  ImPlotFlags_Equal = 128,
  ImPlotFlags_Crosshairs = 256,
  ImPlotFlags_CanvasOnly = 55
}
global ImPlotAxisFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotAxisFlags_None = 0,
  ImPlotAxisFlags_NoLabel = 1,
  ImPlotAxisFlags_NoGridLines = 2,
  ImPlotAxisFlags_NoTickMarks = 4,
  ImPlotAxisFlags_NoTickLabels = 8,
  ImPlotAxisFlags_NoInitialFit = 16,
  ImPlotAxisFlags_NoMenus = 32,
  ImPlotAxisFlags_NoSideSwitch = 64,
  ImPlotAxisFlags_NoHighlight = 128,
  ImPlotAxisFlags_Opposite = 256,
  ImPlotAxisFlags_Foreground = 512,
  ImPlotAxisFlags_Invert = 1024,
  ImPlotAxisFlags_AutoFit = 2048,
  ImPlotAxisFlags_RangeFit = 4096,
  ImPlotAxisFlags_PanStretch = 8192,
  ImPlotAxisFlags_LockMin = 16384,
  ImPlotAxisFlags_LockMax = 32768,
  ImPlotAxisFlags_Lock = 49152,
  ImPlotAxisFlags_NoDecorations = 15,
  ImPlotAxisFlags_AuxDefault = 258
}
global ImPlotSubplotFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotSubplotFlags_None = 0,
  ImPlotSubplotFlags_NoTitle = 1,
  ImPlotSubplotFlags_NoLegend = 2,
  ImPlotSubplotFlags_NoMenus = 4,
  ImPlotSubplotFlags_NoResize = 8,
  ImPlotSubplotFlags_NoAlign = 16,
  ImPlotSubplotFlags_ShareItems = 32,
  ImPlotSubplotFlags_LinkRows = 64,
  ImPlotSubplotFlags_LinkCols = 128,
  ImPlotSubplotFlags_LinkAllX = 256,
  ImPlotSubplotFlags_LinkAllY = 512,
  ImPlotSubplotFlags_ColMajor = 1024
}
global ImPlotLegendFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotLegendFlags_None = 0,
  ImPlotLegendFlags_NoButtons = 1,
  ImPlotLegendFlags_NoHighlightItem = 2,
  ImPlotLegendFlags_NoHighlightAxis = 4,
  ImPlotLegendFlags_NoMenus = 8,
  ImPlotLegendFlags_Outside = 16,
  ImPlotLegendFlags_Horizontal = 32,
  ImPlotLegendFlags_Sort = 64
}
global ImPlotMouseTextFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotMouseTextFlags_None = 0,
  ImPlotMouseTextFlags_NoAuxAxes = 1,
  ImPlotMouseTextFlags_NoFormat = 2,
  ImPlotMouseTextFlags_ShowAlways = 4
}
global ImPlotDragToolFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotDragToolFlags_None = 0,
  ImPlotDragToolFlags_NoCursors = 1,
  ImPlotDragToolFlags_NoFit = 2,
  ImPlotDragToolFlags_NoInputs = 4,
  ImPlotDragToolFlags_Delayed = 8
}
global ImPlotColormapScaleFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotColormapScaleFlags_None = 0,
  ImPlotColormapScaleFlags_NoLabel = 1,
  ImPlotColormapScaleFlags_Opposite = 2,
  ImPlotColormapScaleFlags_Invert = 4
}
global ImPlotItemFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotItemFlags_None = 0,
  ImPlotItemFlags_NoLegend = 1,
  ImPlotItemFlags_NoFit = 2
}
global ImPlotLineFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotLineFlags_None = 0,
  ImPlotLineFlags_Segments = 1024,
  ImPlotLineFlags_Loop = 2048,
  ImPlotLineFlags_SkipNaN = 4096,
  ImPlotLineFlags_NoClip = 8192,
  ImPlotLineFlags_Shaded = 16384
}
global ImPlotScatterFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotScatterFlags_None = 0,
  ImPlotScatterFlags_NoClip = 1024
}
global ImPlotStairsFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotStairsFlags_None = 0,
  ImPlotStairsFlags_PreStep = 1024,
  ImPlotStairsFlags_Shaded = 2048
}
global ImPlotShadedFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotShadedFlags_None = 0
}
global ImPlotBarsFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotBarsFlags_None = 0,
  ImPlotBarsFlags_Horizontal = 1024
}
global ImPlotBarGroupsFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotBarGroupsFlags_None = 0,
  ImPlotBarGroupsFlags_Horizontal = 1024,
  ImPlotBarGroupsFlags_Stacked = 2048
}
global ImPlotErrorBarsFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotErrorBarsFlags_None = 0,
  ImPlotErrorBarsFlags_Horizontal = 1024
}
global ImPlotStemsFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotStemsFlags_None = 0,
  ImPlotStemsFlags_Horizontal = 1024
}
global ImPlotInfLinesFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotInfLinesFlags_None = 0,
  ImPlotInfLinesFlags_Horizontal = 1024
}
global ImPlotPieChartFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotPieChartFlags_None = 0,
  ImPlotPieChartFlags_Normalize = 1024,
  ImPlotPieChartFlags_IgnoreHidden = 2048,
  ImPlotPieChartFlags_Exploding = 4096
}
global ImPlotHeatmapFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotHeatmapFlags_None = 0,
  ImPlotHeatmapFlags_ColMajor = 1024
}
global ImPlotHistogramFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotHistogramFlags_None = 0,
  ImPlotHistogramFlags_Horizontal = 1024,
  ImPlotHistogramFlags_Cumulative = 2048,
  ImPlotHistogramFlags_Density = 4096,
  ImPlotHistogramFlags_NoOutliers = 8192,
  ImPlotHistogramFlags_ColMajor = 16384
}
global ImPlotDigitalFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotDigitalFlags_None = 0
}
global ImPlotImageFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotImageFlags_None = 0
}
global ImPlotTextFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotTextFlags_None = 0,
  ImPlotTextFlags_Vertical = 1024
}
global ImPlotDummyFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotDummyFlags_None = 0
}
global ImPlotCond_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotCond_None = 0,
  ImPlotCond_Always = 1,
  ImPlotCond_Once = 2
}
global ImPlotCol_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotCol_Line = 0,
  ImPlotCol_Fill = 1,
  ImPlotCol_MarkerOutline = 2,
  ImPlotCol_MarkerFill = 3,
  ImPlotCol_ErrorBar = 4,
  ImPlotCol_FrameBg = 5,
  ImPlotCol_PlotBg = 6,
  ImPlotCol_PlotBorder = 7,
  ImPlotCol_LegendBg = 8,
  ImPlotCol_LegendBorder = 9,
  ImPlotCol_LegendText = 10,
  ImPlotCol_TitleText = 11,
  ImPlotCol_InlayText = 12,
  ImPlotCol_AxisText = 13,
  ImPlotCol_AxisGrid = 14,
  ImPlotCol_AxisTick = 15,
  ImPlotCol_AxisBg = 16,
  ImPlotCol_AxisBgHovered = 17,
  ImPlotCol_AxisBgActive = 18,
  ImPlotCol_Selection = 19,
  ImPlotCol_Crosshairs = 20,
  ImPlotCol_COUNT = 21
}
global ImPlotStyleVar_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotStyleVar_LineWeight = 0,
  ImPlotStyleVar_Marker = 1,
  ImPlotStyleVar_MarkerSize = 2,
  ImPlotStyleVar_MarkerWeight = 3,
  ImPlotStyleVar_FillAlpha = 4,
  ImPlotStyleVar_ErrorBarSize = 5,
  ImPlotStyleVar_ErrorBarWeight = 6,
  ImPlotStyleVar_DigitalBitHeight = 7,
  ImPlotStyleVar_DigitalBitGap = 8,
  ImPlotStyleVar_PlotBorderSize = 9,
  ImPlotStyleVar_MinorAlpha = 10,
  ImPlotStyleVar_MajorTickLen = 11,
  ImPlotStyleVar_MinorTickLen = 12,
  ImPlotStyleVar_MajorTickSize = 13,
  ImPlotStyleVar_MinorTickSize = 14,
  ImPlotStyleVar_MajorGridSize = 15,
  ImPlotStyleVar_MinorGridSize = 16,
  ImPlotStyleVar_PlotPadding = 17,
  ImPlotStyleVar_LabelPadding = 18,
  ImPlotStyleVar_LegendPadding = 19,
  ImPlotStyleVar_LegendInnerPadding = 20,
  ImPlotStyleVar_LegendSpacing = 21,
  ImPlotStyleVar_MousePosPadding = 22,
  ImPlotStyleVar_AnnotationPadding = 23,
  ImPlotStyleVar_FitPadding = 24,
  ImPlotStyleVar_PlotDefaultSize = 25,
  ImPlotStyleVar_PlotMinSize = 26,
  ImPlotStyleVar_COUNT = 27
}
global ImPlotScale_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotScale_Linear = 0,
  ImPlotScale_Time = 1,
  ImPlotScale_Log10 = 2,
  ImPlotScale_SymLog = 3
}
global ImPlotMarker_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotMarker_None = -1,
  ImPlotMarker_Circle = 0,
  ImPlotMarker_Square = 1,
  ImPlotMarker_Diamond = 2,
  ImPlotMarker_Up = 3,
  ImPlotMarker_Down = 4,
  ImPlotMarker_Left = 5,
  ImPlotMarker_Right = 6,
  ImPlotMarker_Cross = 7,
  ImPlotMarker_Plus = 8,
  ImPlotMarker_Asterisk = 9,
  ImPlotMarker_COUNT = 10
}
global ImPlotColormap_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotColormap_Deep = 0,
  ImPlotColormap_Dark = 1,
  ImPlotColormap_Pastel = 2,
  ImPlotColormap_Paired = 3,
  ImPlotColormap_Viridis = 4,
  ImPlotColormap_Plasma = 5,
  ImPlotColormap_Hot = 6,
  ImPlotColormap_Cool = 7,
  ImPlotColormap_Pink = 8,
  ImPlotColormap_Jet = 9,
  ImPlotColormap_Twilight = 10,
  ImPlotColormap_RdBu = 11,
  ImPlotColormap_BrBG = 12,
  ImPlotColormap_PiYG = 13,
  ImPlotColormap_Spectral = 14,
  ImPlotColormap_Greys = 15
}
global ImPlotLocation_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotLocation_Center = 0,
  ImPlotLocation_North = 1,
  ImPlotLocation_South = 2,
  ImPlotLocation_West = 4,
  ImPlotLocation_East = 8,
  ImPlotLocation_NorthWest = 5,
  ImPlotLocation_NorthEast = 9,
  ImPlotLocation_SouthWest = 6,
  ImPlotLocation_SouthEast = 10
}
global ImPlotBin_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotBin_Sqrt = -1,
  ImPlotBin_Sturges = -2,
  ImPlotBin_Rice = -3,
  ImPlotBin_Scott = -4
}
global ImPlotPoint: type <cimport,nodecl,forwarddecl> = @record{}
ImPlotPoint = @record{
  x: float64,
  y: float64
}
global ImPlotRange: type <cimport,nodecl,forwarddecl> = @record{}
ImPlotRange = @record{
  Min: float64,
  Max: float64
}
global ImPlotRect: type <cimport,nodecl,forwarddecl> = @record{}
ImPlotRect = @record{
  X: ImPlotRange,
  Y: ImPlotRange
}
global ImPlotStyle: type <cimport,nodecl,forwarddecl> = @record{}
ImPlotStyle = @record{
  LineWeight: float32,
  Marker: cint,
  MarkerSize: float32,
  MarkerWeight: float32,
  FillAlpha: float32,
  ErrorBarSize: float32,
  ErrorBarWeight: float32,
  DigitalBitHeight: float32,
  DigitalBitGap: float32,
  PlotBorderSize: float32,
  MinorAlpha: float32,
  MajorTickLen: ImVec2,
  MinorTickLen: ImVec2,
  MajorTickSize: ImVec2,
  MinorTickSize: ImVec2,
  MajorGridSize: ImVec2,
  MinorGridSize: ImVec2,
  PlotPadding: ImVec2,
  LabelPadding: ImVec2,
  LegendPadding: ImVec2,
  LegendInnerPadding: ImVec2,
  LegendSpacing: ImVec2,
  MousePosPadding: ImVec2,
  AnnotationPadding: ImVec2,
  FitPadding: ImVec2,
  PlotDefaultSize: ImVec2,
  PlotMinSize: ImVec2,
  Colors: [21]ImVec4,
  Colormap: ImPlotColormap,
  UseLocalTime: boolean,
  UseISO8601: boolean,
  Use24HourClock: boolean
}
global ImPlotInputMap: type <cimport,nodecl,forwarddecl> = @record{}
ImPlotInputMap = @record{
  Pan: cint,
  PanMod: cint,
  Fit: cint,
  Select: cint,
  SelectCancel: cint,
  SelectMod: cint,
  SelectHorzMod: cint,
  SelectVertMod: cint,
  Menu: cint,
  OverrideMod: cint,
  ZoomMod: cint,
  ZoomRate: float32
}
global ImPlotFormatter: type <cimport,nodecl> = @function(value: float64, buff: cstring, size: cint, user_data: pointer): cint
global ImPlotGetter: type <cimport,nodecl> = @function(idx: cint, user_data: pointer): ImPlotPoint
global ImPlotTransform: type <cimport,nodecl> = @function(value: float64, user_data: pointer): float64
global ImPlotTimeUnit: type <cimport,nodecl> = @cint
global ImPlotDateFmt: type <cimport,nodecl> = @cint
global ImPlotTimeFmt: type <cimport,nodecl> = @cint
global ImPlotTimeUnit_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotTimeUnit_Us = 0,
  ImPlotTimeUnit_Ms = 1,
  ImPlotTimeUnit_S = 2,
  ImPlotTimeUnit_Min = 3,
  ImPlotTimeUnit_Hr = 4,
  ImPlotTimeUnit_Day = 5,
  ImPlotTimeUnit_Mo = 6,
  ImPlotTimeUnit_Yr = 7,
  ImPlotTimeUnit_COUNT = 8
}
global ImPlotDateFmt_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotDateFmt_None = 0,
  ImPlotDateFmt_DayMo = 1,
  ImPlotDateFmt_DayMoYr = 2,
  ImPlotDateFmt_MoYr = 3,
  ImPlotDateFmt_Mo = 4,
  ImPlotDateFmt_Yr = 5
}
global ImPlotTimeFmt_: type <cimport,nodecl,using> = @enum(cint){
  ImPlotTimeFmt_None = 0,
  ImPlotTimeFmt_Us = 1,
  ImPlotTimeFmt_SUs = 2,
  ImPlotTimeFmt_SMs = 3,
  ImPlotTimeFmt_S = 4,
  ImPlotTimeFmt_MinSMs = 5,
  ImPlotTimeFmt_HrMinSMs = 6,
  ImPlotTimeFmt_HrMinS = 7,
  ImPlotTimeFmt_HrMin = 8,
  ImPlotTimeFmt_Hr = 9
}
global ImPlotLocator: type <cimport,nodecl> = @function(ticker: *ImPlotTicker, range: ImPlotRange, pixels: float32, vertical: boolean, formatter: ImPlotFormatter, formatter_data: pointer): void
global ImPlotDateTimeSpec: type <cimport,nodecl,forwarddecl> = @record{}
ImPlotDateTimeSpec = @record{
  Date: ImPlotDateFmt,
  Time: ImPlotTimeFmt,
  UseISO8601: boolean,
  Use24HourClock: boolean
}
global ImPlotTime: type <cimport,nodecl,forwarddecl> = @record{}
ImPlotTime = @record{
  S: ctime_t,
  Us: cint
}
global ImPlotColormapData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_bool: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *boolean
}
ImPlotColormapData = @record{
  Keys: ImVector_ImU32,
  KeyCounts: ImVector_int,
  KeyOffsets: ImVector_int,
  Tables: ImVector_ImU32,
  TableSizes: ImVector_int,
  TableOffsets: ImVector_int,
  Text: ImGuiTextBuffer,
  TextOffsets: ImVector_int,
  Quals: ImVector_bool,
  Map: ImGuiStorage,
  Count: cint
}
global ImPlotPointError: type <cimport,nodecl,forwarddecl> = @record{}
ImPlotPointError = @record{
  X: float64,
  Y: float64,
  Neg: float64,
  Pos: float64
}
global ImPlotAnnotation: type <cimport,nodecl,forwarddecl> = @record{}
ImPlotAnnotation = @record{
  Pos: ImVec2,
  Offset: ImVec2,
  ColorBg: cuint,
  ColorFg: cuint,
  TextOffset: cint,
  Clamp: boolean
}
global ImPlotAnnotationCollection: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImPlotAnnotation: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImPlotAnnotation
}
ImPlotAnnotationCollection = @record{
  Annotations: ImVector_ImPlotAnnotation,
  TextBuffer: ImGuiTextBuffer,
  Size: cint
}
global ImPlotTag: type <cimport,nodecl,forwarddecl> = @record{}
ImPlotTag = @record{
  Axis: ImAxis,
  Value: float64,
  ColorBg: cuint,
  ColorFg: cuint,
  TextOffset: cint
}
global ImPlotTagCollection: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImPlotTag: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImPlotTag
}
ImPlotTagCollection = @record{
  Tags: ImVector_ImPlotTag,
  TextBuffer: ImGuiTextBuffer,
  Size: cint
}
ImPlotTick = @record{
  PlotPos: float64,
  PixelPos: float32,
  LabelSize: ImVec2,
  TextOffset: cint,
  Major: boolean,
  ShowLabel: boolean,
  Level: cint,
  Idx: cint
}
global ImVector_ImPlotTick: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImPlotTick
}
ImPlotTicker = @record{
  Ticks: ImVector_ImPlotTick,
  TextBuffer: ImGuiTextBuffer,
  MaxSize: ImVec2,
  LateSize: ImVec2,
  Levels: cint
}
ImPlotAxis = @record{
  ID: cuint,
  Flags: ImPlotAxisFlags,
  PreviousFlags: ImPlotAxisFlags,
  Range: ImPlotRange,
  RangeCond: ImPlotCond,
  Scale: ImPlotScale,
  FitExtents: ImPlotRange,
  OrthoAxis: *ImPlotAxis,
  ConstraintRange: ImPlotRange,
  ConstraintZoom: ImPlotRange,
  Ticker: ImPlotTicker,
  Formatter: ImPlotFormatter,
  FormatterData: pointer,
  FormatSpec: [16]cchar,
  Locator: ImPlotLocator,
  LinkedMin: *float64,
  LinkedMax: *float64,
  PickerLevel: cint,
  PickerTimeMin: ImPlotTime,
  PickerTimeMax: ImPlotTime,
  TransformForward: ImPlotTransform,
  TransformInverse: ImPlotTransform,
  TransformData: pointer,
  PixelMin: float32,
  PixelMax: float32,
  ScaleMin: float64,
  ScaleMax: float64,
  ScaleToPixel: float64,
  Datum1: float32,
  Datum2: float32,
  HoverRect: ImRect,
  LabelOffset: cint,
  ColorMaj: cuint,
  ColorMin: cuint,
  ColorTick: cuint,
  ColorTxt: cuint,
  ColorBg: cuint,
  ColorHov: cuint,
  ColorAct: cuint,
  ColorHiLi: cuint,
  Enabled: boolean,
  Vertical: boolean,
  FitThisFrame: boolean,
  HasRange: boolean,
  HasFormatSpec: boolean,
  ShowDefaultTicks: boolean,
  Hovered: boolean,
  Held: boolean
}
global ImPlotAlignmentData: type <cimport,nodecl,forwarddecl> = @record{}
ImPlotAlignmentData = @record{
  Vertical: boolean,
  PadA: float32,
  PadB: float32,
  PadAMax: float32,
  PadBMax: float32
}
ImPlotItem = @record{
  ID: cuint,
  Color: cuint,
  LegendHoverRect: ImRect,
  NameOffset: cint,
  Show: boolean,
  LegendHovered: boolean,
  SeenThisFrame: boolean
}
ImPlotLegend = @record{
  Flags: ImPlotLegendFlags,
  PreviousFlags: ImPlotLegendFlags,
  Location: ImPlotLocation,
  PreviousLocation: ImPlotLocation,
  Scroll: ImVec2,
  Indices: ImVector_int,
  Labels: ImGuiTextBuffer,
  Rect: ImRect,
  RectClamped: ImRect,
  Hovered: boolean,
  Held: boolean,
  CanGoInside: boolean
}
global ImPlotItemGroup: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImPlotItem: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImPlotItem
}
global ImPool_ImPlotItem: type <cimport,nodecl> = @record{
  Buf: ImVector_ImPlotItem,
  Map: ImGuiStorage,
  FreeIdx: cint,
  AliveCount: cint
}
ImPlotItemGroup = @record{
  ID: cuint,
  Legend: ImPlotLegend,
  ItemPool: ImPool_ImPlotItem,
  ColormapIdx: cint
}
ImPlotPlot = @record{
  ID: cuint,
  Flags: ImPlotFlags,
  PreviousFlags: ImPlotFlags,
  MouseTextLocation: ImPlotLocation,
  MouseTextFlags: ImPlotMouseTextFlags,
  Axes: [6]ImPlotAxis,
  TextBuffer: ImGuiTextBuffer,
  Items: ImPlotItemGroup,
  CurrentX: ImAxis,
  CurrentY: ImAxis,
  FrameRect: ImRect,
  CanvasRect: ImRect,
  PlotRect: ImRect,
  AxesRect: ImRect,
  SelectRect: ImRect,
  SelectStart: ImVec2,
  TitleOffset: cint,
  JustCreated: boolean,
  Initialized: boolean,
  SetupLocked: boolean,
  FitThisFrame: boolean,
  Hovered: boolean,
  Held: boolean,
  Selecting: boolean,
  Selected: boolean,
  ContextLocked: boolean
}
global ImPlotSubplot: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImPlotAlignmentData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImPlotAlignmentData
}
global ImVector_ImPlotRange: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImPlotRange
}
ImPlotSubplot = @record{
  ID: cuint,
  Flags: ImPlotSubplotFlags,
  PreviousFlags: ImPlotSubplotFlags,
  Items: ImPlotItemGroup,
  Rows: cint,
  Cols: cint,
  CurrentIdx: cint,
  FrameRect: ImRect,
  GridRect: ImRect,
  CellSize: ImVec2,
  RowAlignmentData: ImVector_ImPlotAlignmentData,
  ColAlignmentData: ImVector_ImPlotAlignmentData,
  RowRatios: ImVector_float,
  ColRatios: ImVector_float,
  RowLinkData: ImVector_ImPlotRange,
  ColLinkData: ImVector_ImPlotRange,
  TempSizes: [2]float32,
  FrameHovered: boolean,
  HasTitle: boolean
}
ImPlotNextPlotData = @record{
  RangeCond: [6]ImPlotCond,
  Range: [6]ImPlotRange,
  HasRange: [6]boolean,
  Fit: [6]boolean,
  LinkedMin: [6]*float64,
  LinkedMax: [6]*float64
}
global ImPlotNextItemData: type <cimport,nodecl,forwarddecl> = @record{}
ImPlotNextItemData = @record{
  Colors: [5]ImVec4,
  LineWeight: float32,
  Marker: ImPlotMarker,
  MarkerSize: float32,
  MarkerWeight: float32,
  FillAlpha: float32,
  ErrorBarSize: float32,
  ErrorBarWeight: float32,
  DigitalBitHeight: float32,
  DigitalBitGap: float32,
  RenderLine: boolean,
  RenderFill: boolean,
  RenderMarkerLine: boolean,
  RenderMarkerFill: boolean,
  HasHidden: boolean,
  Hidden: boolean,
  HiddenCond: ImPlotCond
}
global ImVector_ImPlotPlot: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImPlotPlot
}
global ImPool_ImPlotPlot: type <cimport,nodecl> = @record{
  Buf: ImVector_ImPlotPlot,
  Map: ImGuiStorage,
  FreeIdx: cint,
  AliveCount: cint
}
global ImVector_ImPlotSubplot: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImPlotSubplot
}
global ImPool_ImPlotSubplot: type <cimport,nodecl> = @record{
  Buf: ImVector_ImPlotSubplot,
  Map: ImGuiStorage,
  FreeIdx: cint,
  AliveCount: cint
}
global ImVector_ImPlotColormap: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImPlotColormap
}
global ImVector_double: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *float64
}
global ImPool_ImPlotAlignmentData: type <cimport,nodecl> = @record{
  Buf: ImVector_ImPlotAlignmentData,
  Map: ImGuiStorage,
  FreeIdx: cint,
  AliveCount: cint
}
ImPlotContext = @record{
  Plots: ImPool_ImPlotPlot,
  Subplots: ImPool_ImPlotSubplot,
  CurrentPlot: *ImPlotPlot,
  CurrentSubplot: *ImPlotSubplot,
  CurrentItems: *ImPlotItemGroup,
  CurrentItem: *ImPlotItem,
  PreviousItem: *ImPlotItem,
  CTicker: ImPlotTicker,
  Annotations: ImPlotAnnotationCollection,
  Tags: ImPlotTagCollection,
  Style: ImPlotStyle,
  ColorModifiers: ImVector_ImGuiColorMod,
  StyleModifiers: ImVector_ImGuiStyleMod,
  ColormapData: ImPlotColormapData,
  ColormapModifiers: ImVector_ImPlotColormap,
  Tm: tm,
  TempDouble1: ImVector_double,
  TempDouble2: ImVector_double,
  TempInt1: ImVector_int,
  DigitalPlotItemCnt: cint,
  DigitalPlotOffset: cint,
  NextPlotData: ImPlotNextPlotData,
  NextItemData: ImPlotNextItemData,
  InputMap: ImPlotInputMap,
  OpenContextThisFrame: boolean,
  MousePosStringBuilder: ImGuiTextBuffer,
  SortItems: *ImPlotItemGroup,
  AlignmentData: ImPool_ImPlotAlignmentData,
  CurrentAlignmentH: *ImPlotAlignmentData,
  CurrentAlignmentV: *ImPlotAlignmentData
}
global ImPlotPoint_getter: type <cimport,nodecl> = @function(data: pointer, idx: cint, point: *ImPlotPoint): pointer
global function ImPlotPoint_ImPlotPoint_Nil(): *ImPlotPoint <cimport,nodecl> end
global function ImPlotPoint_destroy(self: *ImPlotPoint): void <cimport,nodecl> end
global function ImPlotPoint_ImPlotPoint_double(_x: float64, _y: float64): *ImPlotPoint <cimport,nodecl> end
global function ImPlotPoint_ImPlotPoint_Vec2(p: ImVec2): *ImPlotPoint <cimport,nodecl> end
global function ImPlotRange_ImPlotRange_Nil(): *ImPlotRange <cimport,nodecl> end
global function ImPlotRange_destroy(self: *ImPlotRange): void <cimport,nodecl> end
global function ImPlotRange_ImPlotRange_double(_min: float64, _max: float64): *ImPlotRange <cimport,nodecl> end
global function ImPlotRange_Contains(self: *ImPlotRange, value: float64): boolean <cimport,nodecl> end
global function ImPlotRange_Size(self: *ImPlotRange): float64 <cimport,nodecl> end
global function ImPlotRange_Clamp(self: *ImPlotRange, value: float64): float64 <cimport,nodecl> end
global function ImPlotRect_ImPlotRect_Nil(): *ImPlotRect <cimport,nodecl> end
global function ImPlotRect_destroy(self: *ImPlotRect): void <cimport,nodecl> end
global function ImPlotRect_ImPlotRect_double(x_min: float64, x_max: float64, y_min: float64, y_max: float64): *ImPlotRect <cimport,nodecl> end
global function ImPlotRect_Contains_PlotPoInt(self: *ImPlotRect, p: ImPlotPoint): boolean <cimport,nodecl> end
global function ImPlotRect_Contains_double(self: *ImPlotRect, x: float64, y: float64): boolean <cimport,nodecl> end
global function ImPlotRect_Size(pOut: *ImPlotPoint, self: *ImPlotRect): void <cimport,nodecl> end
global function ImPlotRect_Clamp_PlotPoInt(pOut: *ImPlotPoint, self: *ImPlotRect, p: ImPlotPoint): void <cimport,nodecl> end
global function ImPlotRect_Clamp_double(pOut: *ImPlotPoint, self: *ImPlotRect, x: float64, y: float64): void <cimport,nodecl> end
global function ImPlotRect_Min(pOut: *ImPlotPoint, self: *ImPlotRect): void <cimport,nodecl> end
global function ImPlotRect_Max(pOut: *ImPlotPoint, self: *ImPlotRect): void <cimport,nodecl> end
global function ImPlotStyle_ImPlotStyle(): *ImPlotStyle <cimport,nodecl> end
global function ImPlotStyle_destroy(self: *ImPlotStyle): void <cimport,nodecl> end
global function ImPlotInputMap_ImPlotInputMap(): *ImPlotInputMap <cimport,nodecl> end
global function ImPlotInputMap_destroy(self: *ImPlotInputMap): void <cimport,nodecl> end
global function ImPlot_CreateContext(): *ImPlotContext <cimport,nodecl> end
global function ImPlot_DestroyContext(ctx: *ImPlotContext): void <cimport,nodecl> end
global function ImPlot_GetCurrentContext(): *ImPlotContext <cimport,nodecl> end
global function ImPlot_SetCurrentContext(ctx: *ImPlotContext): void <cimport,nodecl> end
global function ImPlot_SetImGuiContext(ctx: *ImGuiContext): void <cimport,nodecl> end
global function ImPlot_BeginPlot(title_id: cstring, size: ImVec2, flags: ImPlotFlags): boolean <cimport,nodecl> end
global function ImPlot_EndPlot(): void <cimport,nodecl> end
global function ImPlot_BeginSubplots(title_id: cstring, rows: cint, cols: cint, size: ImVec2, flags: ImPlotSubplotFlags, row_ratios: *float32, col_ratios: *float32): boolean <cimport,nodecl> end
global function ImPlot_EndSubplots(): void <cimport,nodecl> end
global function ImPlot_SetupAxis(axis: ImAxis, label: cstring, flags: ImPlotAxisFlags): void <cimport,nodecl> end
global function ImPlot_SetupAxisLimits(axis: ImAxis, v_min: float64, v_max: float64, cond: ImPlotCond): void <cimport,nodecl> end
global function ImPlot_SetupAxisLinks(axis: ImAxis, link_min: *float64, link_max: *float64): void <cimport,nodecl> end
global function ImPlot_SetupAxisFormat_Str(axis: ImAxis, fmt: cstring): void <cimport,nodecl> end
global function ImPlot_SetupAxisFormat_PlotFormatter(axis: ImAxis, formatter: ImPlotFormatter, data: pointer): void <cimport,nodecl> end
global function ImPlot_SetupAxisTicks_doublePtr(axis: ImAxis, values: *float64, n_ticks: cint, labels: *[0]cstring, keep_default: boolean): void <cimport,nodecl> end
global function ImPlot_SetupAxisTicks_double(axis: ImAxis, v_min: float64, v_max: float64, n_ticks: cint, labels: *[0]cstring, keep_default: boolean): void <cimport,nodecl> end
global function ImPlot_SetupAxisScale_PlotScale(axis: ImAxis, scale: ImPlotScale): void <cimport,nodecl> end
global function ImPlot_SetupAxisScale_PlotTransform(axis: ImAxis, forward: ImPlotTransform, inverse: ImPlotTransform, data: pointer): void <cimport,nodecl> end
global function ImPlot_SetupAxisLimitsConstraints(axis: ImAxis, v_min: float64, v_max: float64): void <cimport,nodecl> end
global function ImPlot_SetupAxisZoomConstraints(axis: ImAxis, z_min: float64, z_max: float64): void <cimport,nodecl> end
global function ImPlot_SetupAxes(x_label: cstring, y_label: cstring, x_flags: ImPlotAxisFlags, y_flags: ImPlotAxisFlags): void <cimport,nodecl> end
global function ImPlot_SetupAxesLimits(x_min: float64, x_max: float64, y_min: float64, y_max: float64, cond: ImPlotCond): void <cimport,nodecl> end
global function ImPlot_SetupLegend(location: ImPlotLocation, flags: ImPlotLegendFlags): void <cimport,nodecl> end
global function ImPlot_SetupMouseText(location: ImPlotLocation, flags: ImPlotMouseTextFlags): void <cimport,nodecl> end
global function ImPlot_SetupFinish(): void <cimport,nodecl> end
global function ImPlot_SetNextAxisLimits(axis: ImAxis, v_min: float64, v_max: float64, cond: ImPlotCond): void <cimport,nodecl> end
global function ImPlot_SetNextAxisLinks(axis: ImAxis, link_min: *float64, link_max: *float64): void <cimport,nodecl> end
global function ImPlot_SetNextAxisToFit(axis: ImAxis): void <cimport,nodecl> end
global function ImPlot_SetNextAxesLimits(x_min: float64, x_max: float64, y_min: float64, y_max: float64, cond: ImPlotCond): void <cimport,nodecl> end
global function ImPlot_SetNextAxesToFit(): void <cimport,nodecl> end
global function ImPlot_PlotLine_FloatPtrInt(label_id: cstring, values: *float32, count: cint, xscale: float64, xstart: float64, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_doublePtrInt(label_id: cstring, values: *float64, count: cint, xscale: float64, xstart: float64, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_S8PtrInt(label_id: cstring, values: *cschar, count: cint, xscale: float64, xstart: float64, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_U8PtrInt(label_id: cstring, values: *cuchar, count: cint, xscale: float64, xstart: float64, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_S16PtrInt(label_id: cstring, values: *cshort, count: cint, xscale: float64, xstart: float64, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_U16PtrInt(label_id: cstring, values: *cushort, count: cint, xscale: float64, xstart: float64, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_S32PtrInt(label_id: cstring, values: *cint, count: cint, xscale: float64, xstart: float64, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_U32PtrInt(label_id: cstring, values: *cuint, count: cint, xscale: float64, xstart: float64, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_S64PtrInt(label_id: cstring, values: *clonglong, count: cint, xscale: float64, xstart: float64, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_U64PtrInt(label_id: cstring, values: *culonglong, count: cint, xscale: float64, xstart: float64, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_FloatPtrFloatPtr(label_id: cstring, xs: *float32, ys: *float32, count: cint, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_doublePtrdoublePtr(label_id: cstring, xs: *float64, ys: *float64, count: cint, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_S8PtrS8Ptr(label_id: cstring, xs: *cschar, ys: *cschar, count: cint, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_U8PtrU8Ptr(label_id: cstring, xs: *cuchar, ys: *cuchar, count: cint, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_S16PtrS16Ptr(label_id: cstring, xs: *cshort, ys: *cshort, count: cint, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_U16PtrU16Ptr(label_id: cstring, xs: *cushort, ys: *cushort, count: cint, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_S32PtrS32Ptr(label_id: cstring, xs: *cint, ys: *cint, count: cint, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_U32PtrU32Ptr(label_id: cstring, xs: *cuint, ys: *cuint, count: cint, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_S64PtrS64Ptr(label_id: cstring, xs: *clonglong, ys: *clonglong, count: cint, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLine_U64PtrU64Ptr(label_id: cstring, xs: *culonglong, ys: *culonglong, count: cint, flags: ImPlotLineFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotLineG(label_id: cstring, getter: ImPlotPoint_getter, data: pointer, count: cint, flags: ImPlotLineFlags): void <cimport,nodecl> end
global function ImPlot_PlotScatter_FloatPtrInt(label_id: cstring, values: *float32, count: cint, xscale: float64, xstart: float64, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_doublePtrInt(label_id: cstring, values: *float64, count: cint, xscale: float64, xstart: float64, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_S8PtrInt(label_id: cstring, values: *cschar, count: cint, xscale: float64, xstart: float64, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_U8PtrInt(label_id: cstring, values: *cuchar, count: cint, xscale: float64, xstart: float64, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_S16PtrInt(label_id: cstring, values: *cshort, count: cint, xscale: float64, xstart: float64, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_U16PtrInt(label_id: cstring, values: *cushort, count: cint, xscale: float64, xstart: float64, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_S32PtrInt(label_id: cstring, values: *cint, count: cint, xscale: float64, xstart: float64, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_U32PtrInt(label_id: cstring, values: *cuint, count: cint, xscale: float64, xstart: float64, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_S64PtrInt(label_id: cstring, values: *clonglong, count: cint, xscale: float64, xstart: float64, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_U64PtrInt(label_id: cstring, values: *culonglong, count: cint, xscale: float64, xstart: float64, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_FloatPtrFloatPtr(label_id: cstring, xs: *float32, ys: *float32, count: cint, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_doublePtrdoublePtr(label_id: cstring, xs: *float64, ys: *float64, count: cint, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_S8PtrS8Ptr(label_id: cstring, xs: *cschar, ys: *cschar, count: cint, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_U8PtrU8Ptr(label_id: cstring, xs: *cuchar, ys: *cuchar, count: cint, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_S16PtrS16Ptr(label_id: cstring, xs: *cshort, ys: *cshort, count: cint, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_U16PtrU16Ptr(label_id: cstring, xs: *cushort, ys: *cushort, count: cint, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_S32PtrS32Ptr(label_id: cstring, xs: *cint, ys: *cint, count: cint, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_U32PtrU32Ptr(label_id: cstring, xs: *cuint, ys: *cuint, count: cint, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_S64PtrS64Ptr(label_id: cstring, xs: *clonglong, ys: *clonglong, count: cint, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatter_U64PtrU64Ptr(label_id: cstring, xs: *culonglong, ys: *culonglong, count: cint, flags: ImPlotScatterFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotScatterG(label_id: cstring, getter: ImPlotPoint_getter, data: pointer, count: cint, flags: ImPlotScatterFlags): void <cimport,nodecl> end
global function ImPlot_PlotStairs_FloatPtrInt(label_id: cstring, values: *float32, count: cint, xscale: float64, xstart: float64, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_doublePtrInt(label_id: cstring, values: *float64, count: cint, xscale: float64, xstart: float64, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_S8PtrInt(label_id: cstring, values: *cschar, count: cint, xscale: float64, xstart: float64, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_U8PtrInt(label_id: cstring, values: *cuchar, count: cint, xscale: float64, xstart: float64, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_S16PtrInt(label_id: cstring, values: *cshort, count: cint, xscale: float64, xstart: float64, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_U16PtrInt(label_id: cstring, values: *cushort, count: cint, xscale: float64, xstart: float64, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_S32PtrInt(label_id: cstring, values: *cint, count: cint, xscale: float64, xstart: float64, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_U32PtrInt(label_id: cstring, values: *cuint, count: cint, xscale: float64, xstart: float64, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_S64PtrInt(label_id: cstring, values: *clonglong, count: cint, xscale: float64, xstart: float64, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_U64PtrInt(label_id: cstring, values: *culonglong, count: cint, xscale: float64, xstart: float64, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_FloatPtrFloatPtr(label_id: cstring, xs: *float32, ys: *float32, count: cint, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_doublePtrdoublePtr(label_id: cstring, xs: *float64, ys: *float64, count: cint, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_S8PtrS8Ptr(label_id: cstring, xs: *cschar, ys: *cschar, count: cint, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_U8PtrU8Ptr(label_id: cstring, xs: *cuchar, ys: *cuchar, count: cint, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_S16PtrS16Ptr(label_id: cstring, xs: *cshort, ys: *cshort, count: cint, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_U16PtrU16Ptr(label_id: cstring, xs: *cushort, ys: *cushort, count: cint, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_S32PtrS32Ptr(label_id: cstring, xs: *cint, ys: *cint, count: cint, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_U32PtrU32Ptr(label_id: cstring, xs: *cuint, ys: *cuint, count: cint, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_S64PtrS64Ptr(label_id: cstring, xs: *clonglong, ys: *clonglong, count: cint, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairs_U64PtrU64Ptr(label_id: cstring, xs: *culonglong, ys: *culonglong, count: cint, flags: ImPlotStairsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStairsG(label_id: cstring, getter: ImPlotPoint_getter, data: pointer, count: cint, flags: ImPlotStairsFlags): void <cimport,nodecl> end
global function ImPlot_PlotShaded_FloatPtrInt(label_id: cstring, values: *float32, count: cint, yref: float64, xscale: float64, xstart: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_doublePtrInt(label_id: cstring, values: *float64, count: cint, yref: float64, xscale: float64, xstart: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_S8PtrInt(label_id: cstring, values: *cschar, count: cint, yref: float64, xscale: float64, xstart: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_U8PtrInt(label_id: cstring, values: *cuchar, count: cint, yref: float64, xscale: float64, xstart: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_S16PtrInt(label_id: cstring, values: *cshort, count: cint, yref: float64, xscale: float64, xstart: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_U16PtrInt(label_id: cstring, values: *cushort, count: cint, yref: float64, xscale: float64, xstart: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_S32PtrInt(label_id: cstring, values: *cint, count: cint, yref: float64, xscale: float64, xstart: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_U32PtrInt(label_id: cstring, values: *cuint, count: cint, yref: float64, xscale: float64, xstart: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_S64PtrInt(label_id: cstring, values: *clonglong, count: cint, yref: float64, xscale: float64, xstart: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_U64PtrInt(label_id: cstring, values: *culonglong, count: cint, yref: float64, xscale: float64, xstart: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_FloatPtrFloatPtrInt(label_id: cstring, xs: *float32, ys: *float32, count: cint, yref: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_doublePtrdoublePtrInt(label_id: cstring, xs: *float64, ys: *float64, count: cint, yref: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_S8PtrS8PtrInt(label_id: cstring, xs: *cschar, ys: *cschar, count: cint, yref: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_U8PtrU8PtrInt(label_id: cstring, xs: *cuchar, ys: *cuchar, count: cint, yref: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_S16PtrS16PtrInt(label_id: cstring, xs: *cshort, ys: *cshort, count: cint, yref: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_U16PtrU16PtrInt(label_id: cstring, xs: *cushort, ys: *cushort, count: cint, yref: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_S32PtrS32PtrInt(label_id: cstring, xs: *cint, ys: *cint, count: cint, yref: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_U32PtrU32PtrInt(label_id: cstring, xs: *cuint, ys: *cuint, count: cint, yref: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_S64PtrS64PtrInt(label_id: cstring, xs: *clonglong, ys: *clonglong, count: cint, yref: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_U64PtrU64PtrInt(label_id: cstring, xs: *culonglong, ys: *culonglong, count: cint, yref: float64, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_FloatPtrFloatPtrFloatPtr(label_id: cstring, xs: *float32, ys1: *float32, ys2: *float32, count: cint, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_doublePtrdoublePtrdoublePtr(label_id: cstring, xs: *float64, ys1: *float64, ys2: *float64, count: cint, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_S8PtrS8PtrS8Ptr(label_id: cstring, xs: *cschar, ys1: *cschar, ys2: *cschar, count: cint, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_U8PtrU8PtrU8Ptr(label_id: cstring, xs: *cuchar, ys1: *cuchar, ys2: *cuchar, count: cint, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_S16PtrS16PtrS16Ptr(label_id: cstring, xs: *cshort, ys1: *cshort, ys2: *cshort, count: cint, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_U16PtrU16PtrU16Ptr(label_id: cstring, xs: *cushort, ys1: *cushort, ys2: *cushort, count: cint, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_S32PtrS32PtrS32Ptr(label_id: cstring, xs: *cint, ys1: *cint, ys2: *cint, count: cint, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_U32PtrU32PtrU32Ptr(label_id: cstring, xs: *cuint, ys1: *cuint, ys2: *cuint, count: cint, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_S64PtrS64PtrS64Ptr(label_id: cstring, xs: *clonglong, ys1: *clonglong, ys2: *clonglong, count: cint, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShaded_U64PtrU64PtrU64Ptr(label_id: cstring, xs: *culonglong, ys1: *culonglong, ys2: *culonglong, count: cint, flags: ImPlotShadedFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotShadedG(label_id: cstring, getter1: ImPlotPoint_getter, data1: pointer, getter2: ImPlotPoint_getter, data2: pointer, count: cint, flags: ImPlotShadedFlags): void <cimport,nodecl> end
global function ImPlot_PlotBars_FloatPtrInt(label_id: cstring, values: *float32, count: cint, bar_size: float64, shift: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_doublePtrInt(label_id: cstring, values: *float64, count: cint, bar_size: float64, shift: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_S8PtrInt(label_id: cstring, values: *cschar, count: cint, bar_size: float64, shift: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_U8PtrInt(label_id: cstring, values: *cuchar, count: cint, bar_size: float64, shift: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_S16PtrInt(label_id: cstring, values: *cshort, count: cint, bar_size: float64, shift: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_U16PtrInt(label_id: cstring, values: *cushort, count: cint, bar_size: float64, shift: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_S32PtrInt(label_id: cstring, values: *cint, count: cint, bar_size: float64, shift: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_U32PtrInt(label_id: cstring, values: *cuint, count: cint, bar_size: float64, shift: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_S64PtrInt(label_id: cstring, values: *clonglong, count: cint, bar_size: float64, shift: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_U64PtrInt(label_id: cstring, values: *culonglong, count: cint, bar_size: float64, shift: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_FloatPtrFloatPtr(label_id: cstring, xs: *float32, ys: *float32, count: cint, bar_size: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_doublePtrdoublePtr(label_id: cstring, xs: *float64, ys: *float64, count: cint, bar_size: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_S8PtrS8Ptr(label_id: cstring, xs: *cschar, ys: *cschar, count: cint, bar_size: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_U8PtrU8Ptr(label_id: cstring, xs: *cuchar, ys: *cuchar, count: cint, bar_size: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_S16PtrS16Ptr(label_id: cstring, xs: *cshort, ys: *cshort, count: cint, bar_size: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_U16PtrU16Ptr(label_id: cstring, xs: *cushort, ys: *cushort, count: cint, bar_size: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_S32PtrS32Ptr(label_id: cstring, xs: *cint, ys: *cint, count: cint, bar_size: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_U32PtrU32Ptr(label_id: cstring, xs: *cuint, ys: *cuint, count: cint, bar_size: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_S64PtrS64Ptr(label_id: cstring, xs: *clonglong, ys: *clonglong, count: cint, bar_size: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBars_U64PtrU64Ptr(label_id: cstring, xs: *culonglong, ys: *culonglong, count: cint, bar_size: float64, flags: ImPlotBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotBarsG(label_id: cstring, getter: ImPlotPoint_getter, data: pointer, count: cint, bar_size: float64, flags: ImPlotBarsFlags): void <cimport,nodecl> end
global function ImPlot_PlotBarGroups_FloatPtr(label_ids: *[0]cstring, values: *float32, item_count: cint, group_count: cint, group_size: float64, shift: float64, flags: ImPlotBarGroupsFlags): void <cimport,nodecl> end
global function ImPlot_PlotBarGroups_doublePtr(label_ids: *[0]cstring, values: *float64, item_count: cint, group_count: cint, group_size: float64, shift: float64, flags: ImPlotBarGroupsFlags): void <cimport,nodecl> end
global function ImPlot_PlotBarGroups_S8Ptr(label_ids: *[0]cstring, values: *cschar, item_count: cint, group_count: cint, group_size: float64, shift: float64, flags: ImPlotBarGroupsFlags): void <cimport,nodecl> end
global function ImPlot_PlotBarGroups_U8Ptr(label_ids: *[0]cstring, values: *cuchar, item_count: cint, group_count: cint, group_size: float64, shift: float64, flags: ImPlotBarGroupsFlags): void <cimport,nodecl> end
global function ImPlot_PlotBarGroups_S16Ptr(label_ids: *[0]cstring, values: *cshort, item_count: cint, group_count: cint, group_size: float64, shift: float64, flags: ImPlotBarGroupsFlags): void <cimport,nodecl> end
global function ImPlot_PlotBarGroups_U16Ptr(label_ids: *[0]cstring, values: *cushort, item_count: cint, group_count: cint, group_size: float64, shift: float64, flags: ImPlotBarGroupsFlags): void <cimport,nodecl> end
global function ImPlot_PlotBarGroups_S32Ptr(label_ids: *[0]cstring, values: *cint, item_count: cint, group_count: cint, group_size: float64, shift: float64, flags: ImPlotBarGroupsFlags): void <cimport,nodecl> end
global function ImPlot_PlotBarGroups_U32Ptr(label_ids: *[0]cstring, values: *cuint, item_count: cint, group_count: cint, group_size: float64, shift: float64, flags: ImPlotBarGroupsFlags): void <cimport,nodecl> end
global function ImPlot_PlotBarGroups_S64Ptr(label_ids: *[0]cstring, values: *clonglong, item_count: cint, group_count: cint, group_size: float64, shift: float64, flags: ImPlotBarGroupsFlags): void <cimport,nodecl> end
global function ImPlot_PlotBarGroups_U64Ptr(label_ids: *[0]cstring, values: *culonglong, item_count: cint, group_count: cint, group_size: float64, shift: float64, flags: ImPlotBarGroupsFlags): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrInt(label_id: cstring, xs: *float32, ys: *float32, err: *float32, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrInt(label_id: cstring, xs: *float64, ys: *float64, err: *float64, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrInt(label_id: cstring, xs: *cschar, ys: *cschar, err: *cschar, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrInt(label_id: cstring, xs: *cuchar, ys: *cuchar, err: *cuchar, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrInt(label_id: cstring, xs: *cshort, ys: *cshort, err: *cshort, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrInt(label_id: cstring, xs: *cushort, ys: *cushort, err: *cushort, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrInt(label_id: cstring, xs: *cint, ys: *cint, err: *cint, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrInt(label_id: cstring, xs: *cuint, ys: *cuint, err: *cuint, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrInt(label_id: cstring, xs: *clonglong, ys: *clonglong, err: *clonglong, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrInt(label_id: cstring, xs: *culonglong, ys: *culonglong, err: *culonglong, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrFloatPtr(label_id: cstring, xs: *float32, ys: *float32, neg: *float32, pos: *float32, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrdoublePtr(label_id: cstring, xs: *float64, ys: *float64, neg: *float64, pos: *float64, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrS8Ptr(label_id: cstring, xs: *cschar, ys: *cschar, neg: *cschar, pos: *cschar, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrU8Ptr(label_id: cstring, xs: *cuchar, ys: *cuchar, neg: *cuchar, pos: *cuchar, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrS16Ptr(label_id: cstring, xs: *cshort, ys: *cshort, neg: *cshort, pos: *cshort, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrU16Ptr(label_id: cstring, xs: *cushort, ys: *cushort, neg: *cushort, pos: *cushort, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrS32Ptr(label_id: cstring, xs: *cint, ys: *cint, neg: *cint, pos: *cint, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrU32Ptr(label_id: cstring, xs: *cuint, ys: *cuint, neg: *cuint, pos: *cuint, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrS64Ptr(label_id: cstring, xs: *clonglong, ys: *clonglong, neg: *clonglong, pos: *clonglong, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrU64Ptr(label_id: cstring, xs: *culonglong, ys: *culonglong, neg: *culonglong, pos: *culonglong, count: cint, flags: ImPlotErrorBarsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_FloatPtrInt(label_id: cstring, values: *float32, count: cint, ref: float64, scale: float64, start: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_doublePtrInt(label_id: cstring, values: *float64, count: cint, ref: float64, scale: float64, start: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_S8PtrInt(label_id: cstring, values: *cschar, count: cint, ref: float64, scale: float64, start: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_U8PtrInt(label_id: cstring, values: *cuchar, count: cint, ref: float64, scale: float64, start: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_S16PtrInt(label_id: cstring, values: *cshort, count: cint, ref: float64, scale: float64, start: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_U16PtrInt(label_id: cstring, values: *cushort, count: cint, ref: float64, scale: float64, start: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_S32PtrInt(label_id: cstring, values: *cint, count: cint, ref: float64, scale: float64, start: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_U32PtrInt(label_id: cstring, values: *cuint, count: cint, ref: float64, scale: float64, start: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_S64PtrInt(label_id: cstring, values: *clonglong, count: cint, ref: float64, scale: float64, start: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_U64PtrInt(label_id: cstring, values: *culonglong, count: cint, ref: float64, scale: float64, start: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_FloatPtrFloatPtr(label_id: cstring, xs: *float32, ys: *float32, count: cint, ref: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_doublePtrdoublePtr(label_id: cstring, xs: *float64, ys: *float64, count: cint, ref: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_S8PtrS8Ptr(label_id: cstring, xs: *cschar, ys: *cschar, count: cint, ref: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_U8PtrU8Ptr(label_id: cstring, xs: *cuchar, ys: *cuchar, count: cint, ref: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_S16PtrS16Ptr(label_id: cstring, xs: *cshort, ys: *cshort, count: cint, ref: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_U16PtrU16Ptr(label_id: cstring, xs: *cushort, ys: *cushort, count: cint, ref: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_S32PtrS32Ptr(label_id: cstring, xs: *cint, ys: *cint, count: cint, ref: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_U32PtrU32Ptr(label_id: cstring, xs: *cuint, ys: *cuint, count: cint, ref: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_S64PtrS64Ptr(label_id: cstring, xs: *clonglong, ys: *clonglong, count: cint, ref: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotStems_U64PtrU64Ptr(label_id: cstring, xs: *culonglong, ys: *culonglong, count: cint, ref: float64, flags: ImPlotStemsFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotInfLines_FloatPtr(label_id: cstring, values: *float32, count: cint, flags: ImPlotInfLinesFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotInfLines_doublePtr(label_id: cstring, values: *float64, count: cint, flags: ImPlotInfLinesFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotInfLines_S8Ptr(label_id: cstring, values: *cschar, count: cint, flags: ImPlotInfLinesFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotInfLines_U8Ptr(label_id: cstring, values: *cuchar, count: cint, flags: ImPlotInfLinesFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotInfLines_S16Ptr(label_id: cstring, values: *cshort, count: cint, flags: ImPlotInfLinesFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotInfLines_U16Ptr(label_id: cstring, values: *cushort, count: cint, flags: ImPlotInfLinesFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotInfLines_S32Ptr(label_id: cstring, values: *cint, count: cint, flags: ImPlotInfLinesFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotInfLines_U32Ptr(label_id: cstring, values: *cuint, count: cint, flags: ImPlotInfLinesFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotInfLines_S64Ptr(label_id: cstring, values: *clonglong, count: cint, flags: ImPlotInfLinesFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotInfLines_U64Ptr(label_id: cstring, values: *culonglong, count: cint, flags: ImPlotInfLinesFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_FloatPtrPlotFormatter(label_ids: *[0]cstring, values: *float32, count: cint, x: float64, y: float64, radius: float64, fmt: ImPlotFormatter, fmt_data: pointer, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_doublePtrPlotFormatter(label_ids: *[0]cstring, values: *float64, count: cint, x: float64, y: float64, radius: float64, fmt: ImPlotFormatter, fmt_data: pointer, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_S8PtrPlotFormatter(label_ids: *[0]cstring, values: *cschar, count: cint, x: float64, y: float64, radius: float64, fmt: ImPlotFormatter, fmt_data: pointer, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_U8PtrPlotFormatter(label_ids: *[0]cstring, values: *cuchar, count: cint, x: float64, y: float64, radius: float64, fmt: ImPlotFormatter, fmt_data: pointer, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_S16PtrPlotFormatter(label_ids: *[0]cstring, values: *cshort, count: cint, x: float64, y: float64, radius: float64, fmt: ImPlotFormatter, fmt_data: pointer, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_U16PtrPlotFormatter(label_ids: *[0]cstring, values: *cushort, count: cint, x: float64, y: float64, radius: float64, fmt: ImPlotFormatter, fmt_data: pointer, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_S32PtrPlotFormatter(label_ids: *[0]cstring, values: *cint, count: cint, x: float64, y: float64, radius: float64, fmt: ImPlotFormatter, fmt_data: pointer, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_U32PtrPlotFormatter(label_ids: *[0]cstring, values: *cuint, count: cint, x: float64, y: float64, radius: float64, fmt: ImPlotFormatter, fmt_data: pointer, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_S64PtrPlotFormatter(label_ids: *[0]cstring, values: *clonglong, count: cint, x: float64, y: float64, radius: float64, fmt: ImPlotFormatter, fmt_data: pointer, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_U64PtrPlotFormatter(label_ids: *[0]cstring, values: *culonglong, count: cint, x: float64, y: float64, radius: float64, fmt: ImPlotFormatter, fmt_data: pointer, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_FloatPtrStr(label_ids: *[0]cstring, values: *float32, count: cint, x: float64, y: float64, radius: float64, label_fmt: cstring, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_doublePtrStr(label_ids: *[0]cstring, values: *float64, count: cint, x: float64, y: float64, radius: float64, label_fmt: cstring, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_S8PtrStr(label_ids: *[0]cstring, values: *cschar, count: cint, x: float64, y: float64, radius: float64, label_fmt: cstring, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_U8PtrStr(label_ids: *[0]cstring, values: *cuchar, count: cint, x: float64, y: float64, radius: float64, label_fmt: cstring, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_S16PtrStr(label_ids: *[0]cstring, values: *cshort, count: cint, x: float64, y: float64, radius: float64, label_fmt: cstring, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_U16PtrStr(label_ids: *[0]cstring, values: *cushort, count: cint, x: float64, y: float64, radius: float64, label_fmt: cstring, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_S32PtrStr(label_ids: *[0]cstring, values: *cint, count: cint, x: float64, y: float64, radius: float64, label_fmt: cstring, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_U32PtrStr(label_ids: *[0]cstring, values: *cuint, count: cint, x: float64, y: float64, radius: float64, label_fmt: cstring, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_S64PtrStr(label_ids: *[0]cstring, values: *clonglong, count: cint, x: float64, y: float64, radius: float64, label_fmt: cstring, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotPieChart_U64PtrStr(label_ids: *[0]cstring, values: *culonglong, count: cint, x: float64, y: float64, radius: float64, label_fmt: cstring, angle0: float64, flags: ImPlotPieChartFlags): void <cimport,nodecl> end
global function ImPlot_PlotHeatmap_FloatPtr(label_id: cstring, values: *float32, rows: cint, cols: cint, scale_min: float64, scale_max: float64, label_fmt: cstring, bounds_min: ImPlotPoint, bounds_max: ImPlotPoint, flags: ImPlotHeatmapFlags): void <cimport,nodecl> end
global function ImPlot_PlotHeatmap_doublePtr(label_id: cstring, values: *float64, rows: cint, cols: cint, scale_min: float64, scale_max: float64, label_fmt: cstring, bounds_min: ImPlotPoint, bounds_max: ImPlotPoint, flags: ImPlotHeatmapFlags): void <cimport,nodecl> end
global function ImPlot_PlotHeatmap_S8Ptr(label_id: cstring, values: *cschar, rows: cint, cols: cint, scale_min: float64, scale_max: float64, label_fmt: cstring, bounds_min: ImPlotPoint, bounds_max: ImPlotPoint, flags: ImPlotHeatmapFlags): void <cimport,nodecl> end
global function ImPlot_PlotHeatmap_U8Ptr(label_id: cstring, values: *cuchar, rows: cint, cols: cint, scale_min: float64, scale_max: float64, label_fmt: cstring, bounds_min: ImPlotPoint, bounds_max: ImPlotPoint, flags: ImPlotHeatmapFlags): void <cimport,nodecl> end
global function ImPlot_PlotHeatmap_S16Ptr(label_id: cstring, values: *cshort, rows: cint, cols: cint, scale_min: float64, scale_max: float64, label_fmt: cstring, bounds_min: ImPlotPoint, bounds_max: ImPlotPoint, flags: ImPlotHeatmapFlags): void <cimport,nodecl> end
global function ImPlot_PlotHeatmap_U16Ptr(label_id: cstring, values: *cushort, rows: cint, cols: cint, scale_min: float64, scale_max: float64, label_fmt: cstring, bounds_min: ImPlotPoint, bounds_max: ImPlotPoint, flags: ImPlotHeatmapFlags): void <cimport,nodecl> end
global function ImPlot_PlotHeatmap_S32Ptr(label_id: cstring, values: *cint, rows: cint, cols: cint, scale_min: float64, scale_max: float64, label_fmt: cstring, bounds_min: ImPlotPoint, bounds_max: ImPlotPoint, flags: ImPlotHeatmapFlags): void <cimport,nodecl> end
global function ImPlot_PlotHeatmap_U32Ptr(label_id: cstring, values: *cuint, rows: cint, cols: cint, scale_min: float64, scale_max: float64, label_fmt: cstring, bounds_min: ImPlotPoint, bounds_max: ImPlotPoint, flags: ImPlotHeatmapFlags): void <cimport,nodecl> end
global function ImPlot_PlotHeatmap_S64Ptr(label_id: cstring, values: *clonglong, rows: cint, cols: cint, scale_min: float64, scale_max: float64, label_fmt: cstring, bounds_min: ImPlotPoint, bounds_max: ImPlotPoint, flags: ImPlotHeatmapFlags): void <cimport,nodecl> end
global function ImPlot_PlotHeatmap_U64Ptr(label_id: cstring, values: *culonglong, rows: cint, cols: cint, scale_min: float64, scale_max: float64, label_fmt: cstring, bounds_min: ImPlotPoint, bounds_max: ImPlotPoint, flags: ImPlotHeatmapFlags): void <cimport,nodecl> end
global function ImPlot_PlotHistogram_FloatPtr(label_id: cstring, values: *float32, count: cint, bins: cint, bar_scale: float64, range: ImPlotRange, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram_doublePtr(label_id: cstring, values: *float64, count: cint, bins: cint, bar_scale: float64, range: ImPlotRange, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram_S8Ptr(label_id: cstring, values: *cschar, count: cint, bins: cint, bar_scale: float64, range: ImPlotRange, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram_U8Ptr(label_id: cstring, values: *cuchar, count: cint, bins: cint, bar_scale: float64, range: ImPlotRange, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram_S16Ptr(label_id: cstring, values: *cshort, count: cint, bins: cint, bar_scale: float64, range: ImPlotRange, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram_U16Ptr(label_id: cstring, values: *cushort, count: cint, bins: cint, bar_scale: float64, range: ImPlotRange, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram_S32Ptr(label_id: cstring, values: *cint, count: cint, bins: cint, bar_scale: float64, range: ImPlotRange, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram_U32Ptr(label_id: cstring, values: *cuint, count: cint, bins: cint, bar_scale: float64, range: ImPlotRange, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram_S64Ptr(label_id: cstring, values: *clonglong, count: cint, bins: cint, bar_scale: float64, range: ImPlotRange, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram_U64Ptr(label_id: cstring, values: *culonglong, count: cint, bins: cint, bar_scale: float64, range: ImPlotRange, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram2D_FloatPtr(label_id: cstring, xs: *float32, ys: *float32, count: cint, x_bins: cint, y_bins: cint, range: ImPlotRect, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram2D_doublePtr(label_id: cstring, xs: *float64, ys: *float64, count: cint, x_bins: cint, y_bins: cint, range: ImPlotRect, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram2D_S8Ptr(label_id: cstring, xs: *cschar, ys: *cschar, count: cint, x_bins: cint, y_bins: cint, range: ImPlotRect, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram2D_U8Ptr(label_id: cstring, xs: *cuchar, ys: *cuchar, count: cint, x_bins: cint, y_bins: cint, range: ImPlotRect, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram2D_S16Ptr(label_id: cstring, xs: *cshort, ys: *cshort, count: cint, x_bins: cint, y_bins: cint, range: ImPlotRect, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram2D_U16Ptr(label_id: cstring, xs: *cushort, ys: *cushort, count: cint, x_bins: cint, y_bins: cint, range: ImPlotRect, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram2D_S32Ptr(label_id: cstring, xs: *cint, ys: *cint, count: cint, x_bins: cint, y_bins: cint, range: ImPlotRect, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram2D_U32Ptr(label_id: cstring, xs: *cuint, ys: *cuint, count: cint, x_bins: cint, y_bins: cint, range: ImPlotRect, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram2D_S64Ptr(label_id: cstring, xs: *clonglong, ys: *clonglong, count: cint, x_bins: cint, y_bins: cint, range: ImPlotRect, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotHistogram2D_U64Ptr(label_id: cstring, xs: *culonglong, ys: *culonglong, count: cint, x_bins: cint, y_bins: cint, range: ImPlotRect, flags: ImPlotHistogramFlags): float64 <cimport,nodecl> end
global function ImPlot_PlotDigital_FloatPtr(label_id: cstring, xs: *float32, ys: *float32, count: cint, flags: ImPlotDigitalFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotDigital_doublePtr(label_id: cstring, xs: *float64, ys: *float64, count: cint, flags: ImPlotDigitalFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotDigital_S8Ptr(label_id: cstring, xs: *cschar, ys: *cschar, count: cint, flags: ImPlotDigitalFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotDigital_U8Ptr(label_id: cstring, xs: *cuchar, ys: *cuchar, count: cint, flags: ImPlotDigitalFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotDigital_S16Ptr(label_id: cstring, xs: *cshort, ys: *cshort, count: cint, flags: ImPlotDigitalFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotDigital_U16Ptr(label_id: cstring, xs: *cushort, ys: *cushort, count: cint, flags: ImPlotDigitalFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotDigital_S32Ptr(label_id: cstring, xs: *cint, ys: *cint, count: cint, flags: ImPlotDigitalFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotDigital_U32Ptr(label_id: cstring, xs: *cuint, ys: *cuint, count: cint, flags: ImPlotDigitalFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotDigital_S64Ptr(label_id: cstring, xs: *clonglong, ys: *clonglong, count: cint, flags: ImPlotDigitalFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotDigital_U64Ptr(label_id: cstring, xs: *culonglong, ys: *culonglong, count: cint, flags: ImPlotDigitalFlags, offset: cint, stride: cint): void <cimport,nodecl> end
global function ImPlot_PlotDigitalG(label_id: cstring, getter: ImPlotPoint_getter, data: pointer, count: cint, flags: ImPlotDigitalFlags): void <cimport,nodecl> end
global function ImPlot_PlotImage(label_id: cstring, tex_ref: ImTextureRef, bounds_min: ImPlotPoint, bounds_max: ImPlotPoint, uv0: ImVec2, uv1: ImVec2, tint_col: ImVec4, flags: ImPlotImageFlags): void <cimport,nodecl> end
global function ImPlot_PlotText(text: cstring, x: float64, y: float64, pix_offset: ImVec2, flags: ImPlotTextFlags): void <cimport,nodecl> end
global function ImPlot_PlotDummy(label_id: cstring, flags: ImPlotDummyFlags): void <cimport,nodecl> end
global function ImPlot_DragPoint(id: cint, x: *float64, y: *float64, col: ImVec4, size: float32, flags: ImPlotDragToolFlags, out_clicked: *boolean, out_hovered: *boolean, held: *boolean): boolean <cimport,nodecl> end
global function ImPlot_DragLineX(id: cint, x: *float64, col: ImVec4, thickness: float32, flags: ImPlotDragToolFlags, out_clicked: *boolean, out_hovered: *boolean, held: *boolean): boolean <cimport,nodecl> end
global function ImPlot_DragLineY(id: cint, y: *float64, col: ImVec4, thickness: float32, flags: ImPlotDragToolFlags, out_clicked: *boolean, out_hovered: *boolean, held: *boolean): boolean <cimport,nodecl> end
global function ImPlot_DragRect(id: cint, x1: *float64, y1: *float64, x2: *float64, y2: *float64, col: ImVec4, flags: ImPlotDragToolFlags, out_clicked: *boolean, out_hovered: *boolean, held: *boolean): boolean <cimport,nodecl> end
global function ImPlot_Annotation_Bool(x: float64, y: float64, col: ImVec4, pix_offset: ImVec2, clamp: boolean, round: boolean): void <cimport,nodecl> end
global function ImPlot_Annotation_Str(x: float64, y: float64, col: ImVec4, pix_offset: ImVec2, clamp: boolean, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function ImPlot_AnnotationV(x: float64, y: float64, col: ImVec4, pix_offset: ImVec2, clamp: boolean, fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function ImPlot_TagX_Bool(x: float64, col: ImVec4, round: boolean): void <cimport,nodecl> end
global function ImPlot_TagX_Str(x: float64, col: ImVec4, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function ImPlot_TagXV(x: float64, col: ImVec4, fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function ImPlot_TagY_Bool(y: float64, col: ImVec4, round: boolean): void <cimport,nodecl> end
global function ImPlot_TagY_Str(y: float64, col: ImVec4, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function ImPlot_TagYV(y: float64, col: ImVec4, fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function ImPlot_SetAxis(axis: ImAxis): void <cimport,nodecl> end
global function ImPlot_SetAxes(x_axis: ImAxis, y_axis: ImAxis): void <cimport,nodecl> end
global function ImPlot_PixelsToPlot_Vec2(pOut: *ImPlotPoint, pix: ImVec2, x_axis: ImAxis, y_axis: ImAxis): void <cimport,nodecl> end
global function ImPlot_PixelsToPlot_Float(pOut: *ImPlotPoint, x: float32, y: float32, x_axis: ImAxis, y_axis: ImAxis): void <cimport,nodecl> end
global function ImPlot_PlotToPixels_PlotPoInt(pOut: *ImVec2, plt: ImPlotPoint, x_axis: ImAxis, y_axis: ImAxis): void <cimport,nodecl> end
global function ImPlot_PlotToPixels_double(pOut: *ImVec2, x: float64, y: float64, x_axis: ImAxis, y_axis: ImAxis): void <cimport,nodecl> end
global function ImPlot_GetPlotPos(pOut: *ImVec2): void <cimport,nodecl> end
global function ImPlot_GetPlotSize(pOut: *ImVec2): void <cimport,nodecl> end
global function ImPlot_GetPlotMousePos(pOut: *ImPlotPoint, x_axis: ImAxis, y_axis: ImAxis): void <cimport,nodecl> end
global function ImPlot_GetPlotLimits(pOut: *ImPlotRect, x_axis: ImAxis, y_axis: ImAxis): void <cimport,nodecl> end
global function ImPlot_IsPlotHovered(): boolean <cimport,nodecl> end
global function ImPlot_IsAxisHovered(axis: ImAxis): boolean <cimport,nodecl> end
global function ImPlot_IsSubplotsHovered(): boolean <cimport,nodecl> end
global function ImPlot_IsPlotSelected(): boolean <cimport,nodecl> end
global function ImPlot_GetPlotSelection(pOut: *ImPlotRect, x_axis: ImAxis, y_axis: ImAxis): void <cimport,nodecl> end
global function ImPlot_CancelPlotSelection(): void <cimport,nodecl> end
global function ImPlot_HideNextItem(hidden: boolean, cond: ImPlotCond): void <cimport,nodecl> end
global function ImPlot_BeginAlignedPlots(group_id: cstring, vertical: boolean): boolean <cimport,nodecl> end
global function ImPlot_EndAlignedPlots(): void <cimport,nodecl> end
global function ImPlot_BeginLegendPopup(label_id: cstring, mouse_button: cint): boolean <cimport,nodecl> end
global function ImPlot_EndLegendPopup(): void <cimport,nodecl> end
global function ImPlot_IsLegendEntryHovered(label_id: cstring): boolean <cimport,nodecl> end
global function ImPlot_BeginDragDropTargetPlot(): boolean <cimport,nodecl> end
global function ImPlot_BeginDragDropTargetAxis(axis: ImAxis): boolean <cimport,nodecl> end
global function ImPlot_BeginDragDropTargetLegend(): boolean <cimport,nodecl> end
global function ImPlot_EndDragDropTarget(): void <cimport,nodecl> end
global function ImPlot_BeginDragDropSourcePlot(flags: cint): boolean <cimport,nodecl> end
global function ImPlot_BeginDragDropSourceAxis(axis: ImAxis, flags: cint): boolean <cimport,nodecl> end
global function ImPlot_BeginDragDropSourceItem(label_id: cstring, flags: cint): boolean <cimport,nodecl> end
global function ImPlot_EndDragDropSource(): void <cimport,nodecl> end
global function ImPlot_GetStyle(): *ImPlotStyle <cimport,nodecl> end
global function ImPlot_StyleColorsAuto(dst: *ImPlotStyle): void <cimport,nodecl> end
global function ImPlot_StyleColorsClassic(dst: *ImPlotStyle): void <cimport,nodecl> end
global function ImPlot_StyleColorsDark(dst: *ImPlotStyle): void <cimport,nodecl> end
global function ImPlot_StyleColorsLight(dst: *ImPlotStyle): void <cimport,nodecl> end
global function ImPlot_PushStyleColor_U32(idx: ImPlotCol, col: cuint): void <cimport,nodecl> end
global function ImPlot_PushStyleColor_Vec4(idx: ImPlotCol, col: ImVec4): void <cimport,nodecl> end
global function ImPlot_PopStyleColor(count: cint): void <cimport,nodecl> end
global function ImPlot_PushStyleVar_Float(idx: ImPlotStyleVar, val: float32): void <cimport,nodecl> end
global function ImPlot_PushStyleVar_Int(idx: ImPlotStyleVar, val: cint): void <cimport,nodecl> end
global function ImPlot_PushStyleVar_Vec2(idx: ImPlotStyleVar, val: ImVec2): void <cimport,nodecl> end
global function ImPlot_PopStyleVar(count: cint): void <cimport,nodecl> end
global function ImPlot_SetNextLineStyle(col: ImVec4, weight: float32): void <cimport,nodecl> end
global function ImPlot_SetNextFillStyle(col: ImVec4, alpha_mod: float32): void <cimport,nodecl> end
global function ImPlot_SetNextMarkerStyle(marker: ImPlotMarker, size: float32, fill: ImVec4, weight: float32, outline: ImVec4): void <cimport,nodecl> end
global function ImPlot_SetNextErrorBarStyle(col: ImVec4, size: float32, weight: float32): void <cimport,nodecl> end
global function ImPlot_GetLastItemColor(pOut: *ImVec4): void <cimport,nodecl> end
global function ImPlot_GetStyleColorName(idx: ImPlotCol): cstring <cimport,nodecl> end
global function ImPlot_GetMarkerName(idx: ImPlotMarker): cstring <cimport,nodecl> end
global function ImPlot_AddColormap_Vec4Ptr(name: cstring, cols: *ImVec4, size: cint, qual: boolean): ImPlotColormap <cimport,nodecl> end
global function ImPlot_AddColormap_U32Ptr(name: cstring, cols: *cuint, size: cint, qual: boolean): ImPlotColormap <cimport,nodecl> end
global function ImPlot_GetColormapCount(): cint <cimport,nodecl> end
global function ImPlot_GetColormapName(cmap: ImPlotColormap): cstring <cimport,nodecl> end
global function ImPlot_GetColormapIndex(name: cstring): ImPlotColormap <cimport,nodecl> end
global function ImPlot_PushColormap_PlotColormap(cmap: ImPlotColormap): void <cimport,nodecl> end
global function ImPlot_PushColormap_Str(name: cstring): void <cimport,nodecl> end
global function ImPlot_PopColormap(count: cint): void <cimport,nodecl> end
global function ImPlot_NextColormapColor(pOut: *ImVec4): void <cimport,nodecl> end
global function ImPlot_GetColormapSize(cmap: ImPlotColormap): cint <cimport,nodecl> end
global function ImPlot_GetColormapColor(pOut: *ImVec4, idx: cint, cmap: ImPlotColormap): void <cimport,nodecl> end
global function ImPlot_SampleColormap(pOut: *ImVec4, t: float32, cmap: ImPlotColormap): void <cimport,nodecl> end
global function ImPlot_ColormapScale(label: cstring, scale_min: float64, scale_max: float64, size: ImVec2, format: cstring, flags: ImPlotColormapScaleFlags, cmap: ImPlotColormap): void <cimport,nodecl> end
global function ImPlot_ColormapSlider(label: cstring, t: *float32, out: *ImVec4, format: cstring, cmap: ImPlotColormap): boolean <cimport,nodecl> end
global function ImPlot_ColormapButton(label: cstring, size: ImVec2, cmap: ImPlotColormap): boolean <cimport,nodecl> end
global function ImPlot_BustColorCache(plot_title_id: cstring): void <cimport,nodecl> end
global function ImPlot_GetInputMap(): *ImPlotInputMap <cimport,nodecl> end
global function ImPlot_MapInputDefault(dst: *ImPlotInputMap): void <cimport,nodecl> end
global function ImPlot_MapInputReverse(dst: *ImPlotInputMap): void <cimport,nodecl> end
global function ImPlot_ItemIcon_Vec4(col: ImVec4): void <cimport,nodecl> end
global function ImPlot_ItemIcon_U32(col: cuint): void <cimport,nodecl> end
global function ImPlot_ColormapIcon(cmap: ImPlotColormap): void <cimport,nodecl> end
global function ImPlot_GetPlotDrawList(): *ImDrawList <cimport,nodecl> end
global function ImPlot_PushPlotClipRect(expand: float32): void <cimport,nodecl> end
global function ImPlot_PopPlotClipRect(): void <cimport,nodecl> end
global function ImPlot_ShowStyleSelector(label: cstring): boolean <cimport,nodecl> end
global function ImPlot_ShowColormapSelector(label: cstring): boolean <cimport,nodecl> end
global function ImPlot_ShowInputMapSelector(label: cstring): boolean <cimport,nodecl> end
global function ImPlot_ShowStyleEditor(ref: *ImPlotStyle): void <cimport,nodecl> end
global function ImPlot_ShowUserGuide(): void <cimport,nodecl> end
global function ImPlot_ShowMetricsWindow(p_popen: *boolean): void <cimport,nodecl> end
global function ImPlot_ShowDemoWindow(p_open: *boolean): void <cimport,nodecl> end
global function ImPlot_ImLog10_Float(x: float32): float32 <cimport,nodecl> end
global function ImPlot_ImLog10_double(x: float64): float64 <cimport,nodecl> end
global function ImPlot_ImSinh_Float(x: float32): float32 <cimport,nodecl> end
global function ImPlot_ImSinh_double(x: float64): float64 <cimport,nodecl> end
global function ImPlot_ImAsinh_Float(x: float32): float32 <cimport,nodecl> end
global function ImPlot_ImAsinh_double(x: float64): float64 <cimport,nodecl> end
global function ImPlot_ImRemap_Float(x: float32, x0: float32, x1: float32, y0: float32, y1: float32): float32 <cimport,nodecl> end
global function ImPlot_ImRemap_double(x: float64, x0: float64, x1: float64, y0: float64, y1: float64): float64 <cimport,nodecl> end
global function ImPlot_ImRemap_S8(x: cschar, x0: cschar, x1: cschar, y0: cschar, y1: cschar): cschar <cimport,nodecl> end
global function ImPlot_ImRemap_U8(x: cuchar, x0: cuchar, x1: cuchar, y0: cuchar, y1: cuchar): cuchar <cimport,nodecl> end
global function ImPlot_ImRemap_S16(x: cshort, x0: cshort, x1: cshort, y0: cshort, y1: cshort): cshort <cimport,nodecl> end
global function ImPlot_ImRemap_U16(x: cushort, x0: cushort, x1: cushort, y0: cushort, y1: cushort): cushort <cimport,nodecl> end
global function ImPlot_ImRemap_S32(x: cint, x0: cint, x1: cint, y0: cint, y1: cint): cint <cimport,nodecl> end
global function ImPlot_ImRemap_U32(x: cuint, x0: cuint, x1: cuint, y0: cuint, y1: cuint): cuint <cimport,nodecl> end
global function ImPlot_ImRemap_S64(x: clonglong, x0: clonglong, x1: clonglong, y0: clonglong, y1: clonglong): clonglong <cimport,nodecl> end
global function ImPlot_ImRemap_U64(x: culonglong, x0: culonglong, x1: culonglong, y0: culonglong, y1: culonglong): culonglong <cimport,nodecl> end
global function ImPlot_ImRemap01_Float(x: float32, x0: float32, x1: float32): float32 <cimport,nodecl> end
global function ImPlot_ImRemap01_double(x: float64, x0: float64, x1: float64): float64 <cimport,nodecl> end
global function ImPlot_ImRemap01_S8(x: cschar, x0: cschar, x1: cschar): cschar <cimport,nodecl> end
global function ImPlot_ImRemap01_U8(x: cuchar, x0: cuchar, x1: cuchar): cuchar <cimport,nodecl> end
global function ImPlot_ImRemap01_S16(x: cshort, x0: cshort, x1: cshort): cshort <cimport,nodecl> end
global function ImPlot_ImRemap01_U16(x: cushort, x0: cushort, x1: cushort): cushort <cimport,nodecl> end
global function ImPlot_ImRemap01_S32(x: cint, x0: cint, x1: cint): cint <cimport,nodecl> end
global function ImPlot_ImRemap01_U32(x: cuint, x0: cuint, x1: cuint): cuint <cimport,nodecl> end
global function ImPlot_ImRemap01_S64(x: clonglong, x0: clonglong, x1: clonglong): clonglong <cimport,nodecl> end
global function ImPlot_ImRemap01_U64(x: culonglong, x0: culonglong, x1: culonglong): culonglong <cimport,nodecl> end
global function ImPlot_ImPosMod(l: cint, r: cint): cint <cimport,nodecl> end
global function ImPlot_ImNan(val: float64): boolean <cimport,nodecl> end
global function ImPlot_ImNanOrInf(val: float64): boolean <cimport,nodecl> end
global function ImPlot_ImConstrainNan(val: float64): float64 <cimport,nodecl> end
global function ImPlot_ImConstrainInf(val: float64): float64 <cimport,nodecl> end
global function ImPlot_ImConstrainLog(val: float64): float64 <cimport,nodecl> end
global function ImPlot_ImConstrainTime(val: float64): float64 <cimport,nodecl> end
global function ImPlot_ImAlmostEqual(v1: float64, v2: float64, ulp: cint): boolean <cimport,nodecl> end
global function ImPlot_ImMinArray_FloatPtr(values: *float32, count: cint): float32 <cimport,nodecl> end
global function ImPlot_ImMinArray_doublePtr(values: *float64, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImMinArray_S8Ptr(values: *cschar, count: cint): cschar <cimport,nodecl> end
global function ImPlot_ImMinArray_U8Ptr(values: *cuchar, count: cint): cuchar <cimport,nodecl> end
global function ImPlot_ImMinArray_S16Ptr(values: *cshort, count: cint): cshort <cimport,nodecl> end
global function ImPlot_ImMinArray_U16Ptr(values: *cushort, count: cint): cushort <cimport,nodecl> end
global function ImPlot_ImMinArray_S32Ptr(values: *cint, count: cint): cint <cimport,nodecl> end
global function ImPlot_ImMinArray_U32Ptr(values: *cuint, count: cint): cuint <cimport,nodecl> end
global function ImPlot_ImMinArray_S64Ptr(values: *clonglong, count: cint): clonglong <cimport,nodecl> end
global function ImPlot_ImMinArray_U64Ptr(values: *culonglong, count: cint): culonglong <cimport,nodecl> end
global function ImPlot_ImMaxArray_FloatPtr(values: *float32, count: cint): float32 <cimport,nodecl> end
global function ImPlot_ImMaxArray_doublePtr(values: *float64, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImMaxArray_S8Ptr(values: *cschar, count: cint): cschar <cimport,nodecl> end
global function ImPlot_ImMaxArray_U8Ptr(values: *cuchar, count: cint): cuchar <cimport,nodecl> end
global function ImPlot_ImMaxArray_S16Ptr(values: *cshort, count: cint): cshort <cimport,nodecl> end
global function ImPlot_ImMaxArray_U16Ptr(values: *cushort, count: cint): cushort <cimport,nodecl> end
global function ImPlot_ImMaxArray_S32Ptr(values: *cint, count: cint): cint <cimport,nodecl> end
global function ImPlot_ImMaxArray_U32Ptr(values: *cuint, count: cint): cuint <cimport,nodecl> end
global function ImPlot_ImMaxArray_S64Ptr(values: *clonglong, count: cint): clonglong <cimport,nodecl> end
global function ImPlot_ImMaxArray_U64Ptr(values: *culonglong, count: cint): culonglong <cimport,nodecl> end
global function ImPlot_ImMinMaxArray_FloatPtr(values: *float32, count: cint, min_out: *float32, max_out: *float32): void <cimport,nodecl> end
global function ImPlot_ImMinMaxArray_doublePtr(values: *float64, count: cint, min_out: *float64, max_out: *float64): void <cimport,nodecl> end
global function ImPlot_ImMinMaxArray_S8Ptr(values: *cschar, count: cint, min_out: *cschar, max_out: *cschar): void <cimport,nodecl> end
global function ImPlot_ImMinMaxArray_U8Ptr(values: *cuchar, count: cint, min_out: *cuchar, max_out: *cuchar): void <cimport,nodecl> end
global function ImPlot_ImMinMaxArray_S16Ptr(values: *cshort, count: cint, min_out: *cshort, max_out: *cshort): void <cimport,nodecl> end
global function ImPlot_ImMinMaxArray_U16Ptr(values: *cushort, count: cint, min_out: *cushort, max_out: *cushort): void <cimport,nodecl> end
global function ImPlot_ImMinMaxArray_S32Ptr(values: *cint, count: cint, min_out: *cint, max_out: *cint): void <cimport,nodecl> end
global function ImPlot_ImMinMaxArray_U32Ptr(values: *cuint, count: cint, min_out: *cuint, max_out: *cuint): void <cimport,nodecl> end
global function ImPlot_ImMinMaxArray_S64Ptr(values: *clonglong, count: cint, min_out: *clonglong, max_out: *clonglong): void <cimport,nodecl> end
global function ImPlot_ImMinMaxArray_U64Ptr(values: *culonglong, count: cint, min_out: *culonglong, max_out: *culonglong): void <cimport,nodecl> end
global function ImPlot_ImSum_FloatPtr(values: *float32, count: cint): float32 <cimport,nodecl> end
global function ImPlot_ImSum_doublePtr(values: *float64, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImSum_S8Ptr(values: *cschar, count: cint): cschar <cimport,nodecl> end
global function ImPlot_ImSum_U8Ptr(values: *cuchar, count: cint): cuchar <cimport,nodecl> end
global function ImPlot_ImSum_S16Ptr(values: *cshort, count: cint): cshort <cimport,nodecl> end
global function ImPlot_ImSum_U16Ptr(values: *cushort, count: cint): cushort <cimport,nodecl> end
global function ImPlot_ImSum_S32Ptr(values: *cint, count: cint): cint <cimport,nodecl> end
global function ImPlot_ImSum_U32Ptr(values: *cuint, count: cint): cuint <cimport,nodecl> end
global function ImPlot_ImSum_S64Ptr(values: *clonglong, count: cint): clonglong <cimport,nodecl> end
global function ImPlot_ImSum_U64Ptr(values: *culonglong, count: cint): culonglong <cimport,nodecl> end
global function ImPlot_ImMean_FloatPtr(values: *float32, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImMean_doublePtr(values: *float64, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImMean_S8Ptr(values: *cschar, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImMean_U8Ptr(values: *cuchar, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImMean_S16Ptr(values: *cshort, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImMean_U16Ptr(values: *cushort, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImMean_S32Ptr(values: *cint, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImMean_U32Ptr(values: *cuint, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImMean_S64Ptr(values: *clonglong, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImMean_U64Ptr(values: *culonglong, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImStdDev_FloatPtr(values: *float32, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImStdDev_doublePtr(values: *float64, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImStdDev_S8Ptr(values: *cschar, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImStdDev_U8Ptr(values: *cuchar, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImStdDev_S16Ptr(values: *cshort, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImStdDev_U16Ptr(values: *cushort, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImStdDev_S32Ptr(values: *cint, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImStdDev_U32Ptr(values: *cuint, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImStdDev_S64Ptr(values: *clonglong, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImStdDev_U64Ptr(values: *culonglong, count: cint): float64 <cimport,nodecl> end
global function ImPlot_ImMixU32(a: cuint, b: cuint, s: cuint): cuint <cimport,nodecl> end
global function ImPlot_ImLerpU32(colors: *cuint, size: cint, t: float32): cuint <cimport,nodecl> end
global function ImPlot_ImAlphaU32(col: cuint, alpha: float32): cuint <cimport,nodecl> end
global function ImPlot_ImOverlaps_Float(min_a: float32, max_a: float32, min_b: float32, max_b: float32): boolean <cimport,nodecl> end
global function ImPlot_ImOverlaps_double(min_a: float64, max_a: float64, min_b: float64, max_b: float64): boolean <cimport,nodecl> end
global function ImPlot_ImOverlaps_S8(min_a: cschar, max_a: cschar, min_b: cschar, max_b: cschar): boolean <cimport,nodecl> end
global function ImPlot_ImOverlaps_U8(min_a: cuchar, max_a: cuchar, min_b: cuchar, max_b: cuchar): boolean <cimport,nodecl> end
global function ImPlot_ImOverlaps_S16(min_a: cshort, max_a: cshort, min_b: cshort, max_b: cshort): boolean <cimport,nodecl> end
global function ImPlot_ImOverlaps_U16(min_a: cushort, max_a: cushort, min_b: cushort, max_b: cushort): boolean <cimport,nodecl> end
global function ImPlot_ImOverlaps_S32(min_a: cint, max_a: cint, min_b: cint, max_b: cint): boolean <cimport,nodecl> end
global function ImPlot_ImOverlaps_U32(min_a: cuint, max_a: cuint, min_b: cuint, max_b: cuint): boolean <cimport,nodecl> end
global function ImPlot_ImOverlaps_S64(min_a: clonglong, max_a: clonglong, min_b: clonglong, max_b: clonglong): boolean <cimport,nodecl> end
global function ImPlot_ImOverlaps_U64(min_a: culonglong, max_a: culonglong, min_b: culonglong, max_b: culonglong): boolean <cimport,nodecl> end
global function ImPlotDateTimeSpec_ImPlotDateTimeSpec_Nil(): *ImPlotDateTimeSpec <cimport,nodecl> end
global function ImPlotDateTimeSpec_destroy(self: *ImPlotDateTimeSpec): void <cimport,nodecl> end
global function ImPlotDateTimeSpec_ImPlotDateTimeSpec_PlotDateFmt(date_fmt: ImPlotDateFmt, time_fmt: ImPlotTimeFmt, use_24_hr_clk: boolean, use_iso_8601: boolean): *ImPlotDateTimeSpec <cimport,nodecl> end
global function ImPlotTime_ImPlotTime_Nil(): *ImPlotTime <cimport,nodecl> end
global function ImPlotTime_destroy(self: *ImPlotTime): void <cimport,nodecl> end
global function ImPlotTime_ImPlotTime_time_t(s: ctime_t, us: cint): *ImPlotTime <cimport,nodecl> end
global function ImPlotTime_RollOver(self: *ImPlotTime): void <cimport,nodecl> end
global function ImPlotTime_ToDouble(self: *ImPlotTime): float64 <cimport,nodecl> end
global function ImPlotTime_FromDouble(pOut: *ImPlotTime, t: float64): void <cimport,nodecl> end
global function ImPlotColormapData_ImPlotColormapData(): *ImPlotColormapData <cimport,nodecl> end
global function ImPlotColormapData_destroy(self: *ImPlotColormapData): void <cimport,nodecl> end
global function ImPlotColormapData_Append(self: *ImPlotColormapData, name: cstring, keys: *cuint, count: cint, qual: boolean): cint <cimport,nodecl> end
global function ImPlotColormapData__AppendTable(self: *ImPlotColormapData, cmap: ImPlotColormap): void <cimport,nodecl> end
global function ImPlotColormapData_RebuildTables(self: *ImPlotColormapData): void <cimport,nodecl> end
global function ImPlotColormapData_IsQual(self: *ImPlotColormapData, cmap: ImPlotColormap): boolean <cimport,nodecl> end
global function ImPlotColormapData_GetName(self: *ImPlotColormapData, cmap: ImPlotColormap): cstring <cimport,nodecl> end
global function ImPlotColormapData_GetIndex(self: *ImPlotColormapData, name: cstring): ImPlotColormap <cimport,nodecl> end
global function ImPlotColormapData_GetKeys(self: *ImPlotColormapData, cmap: ImPlotColormap): *cuint <cimport,nodecl> end
global function ImPlotColormapData_GetKeyCount(self: *ImPlotColormapData, cmap: ImPlotColormap): cint <cimport,nodecl> end
global function ImPlotColormapData_GetKeyColor(self: *ImPlotColormapData, cmap: ImPlotColormap, idx: cint): cuint <cimport,nodecl> end
global function ImPlotColormapData_SetKeyColor(self: *ImPlotColormapData, cmap: ImPlotColormap, idx: cint, value: cuint): void <cimport,nodecl> end
global function ImPlotColormapData_GetTable(self: *ImPlotColormapData, cmap: ImPlotColormap): *cuint <cimport,nodecl> end
global function ImPlotColormapData_GetTableSize(self: *ImPlotColormapData, cmap: ImPlotColormap): cint <cimport,nodecl> end
global function ImPlotColormapData_GetTableColor(self: *ImPlotColormapData, cmap: ImPlotColormap, idx: cint): cuint <cimport,nodecl> end
global function ImPlotColormapData_LerpTable(self: *ImPlotColormapData, cmap: ImPlotColormap, t: float32): cuint <cimport,nodecl> end
global function ImPlotPointError_ImPlotPointError(x: float64, y: float64, neg: float64, pos: float64): *ImPlotPointError <cimport,nodecl> end
global function ImPlotPointError_destroy(self: *ImPlotPointError): void <cimport,nodecl> end
global function ImPlotAnnotation_ImPlotAnnotation(): *ImPlotAnnotation <cimport,nodecl> end
global function ImPlotAnnotation_destroy(self: *ImPlotAnnotation): void <cimport,nodecl> end
global function ImPlotAnnotationCollection_ImPlotAnnotationCollection(): *ImPlotAnnotationCollection <cimport,nodecl> end
global function ImPlotAnnotationCollection_destroy(self: *ImPlotAnnotationCollection): void <cimport,nodecl> end
global function ImPlotAnnotationCollection_AppendV(self: *ImPlotAnnotationCollection, pos: ImVec2, off: ImVec2, bg: cuint, fg: cuint, clamp: boolean, fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function ImPlotAnnotationCollection_Append(self: *ImPlotAnnotationCollection, pos: ImVec2, off: ImVec2, bg: cuint, fg: cuint, clamp: boolean, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function ImPlotAnnotationCollection_GetText(self: *ImPlotAnnotationCollection, idx: cint): cstring <cimport,nodecl> end
global function ImPlotAnnotationCollection_Reset(self: *ImPlotAnnotationCollection): void <cimport,nodecl> end
global function ImPlotTagCollection_ImPlotTagCollection(): *ImPlotTagCollection <cimport,nodecl> end
global function ImPlotTagCollection_destroy(self: *ImPlotTagCollection): void <cimport,nodecl> end
global function ImPlotTagCollection_AppendV(self: *ImPlotTagCollection, axis: ImAxis, value: float64, bg: cuint, fg: cuint, fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function ImPlotTagCollection_Append(self: *ImPlotTagCollection, axis: ImAxis, value: float64, bg: cuint, fg: cuint, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function ImPlotTagCollection_GetText(self: *ImPlotTagCollection, idx: cint): cstring <cimport,nodecl> end
global function ImPlotTagCollection_Reset(self: *ImPlotTagCollection): void <cimport,nodecl> end
global function ImPlotTick_ImPlotTick(value: float64, major: boolean, level: cint, show_label: boolean): *ImPlotTick <cimport,nodecl> end
global function ImPlotTick_destroy(self: *ImPlotTick): void <cimport,nodecl> end
global function ImPlotTicker_ImPlotTicker(): *ImPlotTicker <cimport,nodecl> end
global function ImPlotTicker_destroy(self: *ImPlotTicker): void <cimport,nodecl> end
global function ImPlotTicker_AddTick_doubleStr(self: *ImPlotTicker, value: float64, major: boolean, level: cint, show_label: boolean, label: cstring): *ImPlotTick <cimport,nodecl> end
global function ImPlotTicker_AddTick_doublePlotFormatter(self: *ImPlotTicker, value: float64, major: boolean, level: cint, show_label: boolean, formatter: ImPlotFormatter, data: pointer): *ImPlotTick <cimport,nodecl> end
global function ImPlotTicker_AddTick_PlotTick(self: *ImPlotTicker, tick: ImPlotTick): *ImPlotTick <cimport,nodecl> end
global function ImPlotTicker_GetText_Int(self: *ImPlotTicker, idx: cint): cstring <cimport,nodecl> end
global function ImPlotTicker_GetText_PlotTick(self: *ImPlotTicker, tick: ImPlotTick): cstring <cimport,nodecl> end
global function ImPlotTicker_OverrideSizeLate(self: *ImPlotTicker, size: ImVec2): void <cimport,nodecl> end
global function ImPlotTicker_Reset(self: *ImPlotTicker): void <cimport,nodecl> end
global function ImPlotTicker_TickCount(self: *ImPlotTicker): cint <cimport,nodecl> end
global function ImPlotAxis_ImPlotAxis(): *ImPlotAxis <cimport,nodecl> end
global function ImPlotAxis_destroy(self: *ImPlotAxis): void <cimport,nodecl> end
global function ImPlotAxis_Reset(self: *ImPlotAxis): void <cimport,nodecl> end
global function ImPlotAxis_SetMin(self: *ImPlotAxis, _min: float64, force: boolean): boolean <cimport,nodecl> end
global function ImPlotAxis_SetMax(self: *ImPlotAxis, _max: float64, force: boolean): boolean <cimport,nodecl> end
global function ImPlotAxis_SetRange_double(self: *ImPlotAxis, v1: float64, v2: float64): void <cimport,nodecl> end
global function ImPlotAxis_SetRange_PlotRange(self: *ImPlotAxis, range: ImPlotRange): void <cimport,nodecl> end
global function ImPlotAxis_SetAspect(self: *ImPlotAxis, unit_per_pix: float64): void <cimport,nodecl> end
global function ImPlotAxis_PixelSize(self: *ImPlotAxis): float32 <cimport,nodecl> end
global function ImPlotAxis_GetAspect(self: *ImPlotAxis): float64 <cimport,nodecl> end
global function ImPlotAxis_Constrain(self: *ImPlotAxis): void <cimport,nodecl> end
global function ImPlotAxis_UpdateTransformCache(self: *ImPlotAxis): void <cimport,nodecl> end
global function ImPlotAxis_PlotToPixels(self: *ImPlotAxis, plt: float64): float32 <cimport,nodecl> end
global function ImPlotAxis_PixelsToPlot(self: *ImPlotAxis, pix: float32): float64 <cimport,nodecl> end
global function ImPlotAxis_ExtendFit(self: *ImPlotAxis, v: float64): void <cimport,nodecl> end
global function ImPlotAxis_ExtendFitWith(self: *ImPlotAxis, alt: *ImPlotAxis, v: float64, v_alt: float64): void <cimport,nodecl> end
global function ImPlotAxis_ApplyFit(self: *ImPlotAxis, padding: float32): void <cimport,nodecl> end
global function ImPlotAxis_HasLabel(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_HasGridLines(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_HasTickLabels(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_HasTickMarks(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_WillRender(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_IsOpposite(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_IsInverted(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_IsForeground(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_IsAutoFitting(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_CanInitFit(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_IsRangeLocked(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_IsLockedMin(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_IsLockedMax(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_IsLocked(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_IsInputLockedMin(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_IsInputLockedMax(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_IsInputLocked(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_HasMenus(self: *ImPlotAxis): boolean <cimport,nodecl> end
global function ImPlotAxis_IsPanLocked(self: *ImPlotAxis, increasing: boolean): boolean <cimport,nodecl> end
global function ImPlotAxis_PushLinks(self: *ImPlotAxis): void <cimport,nodecl> end
global function ImPlotAxis_PullLinks(self: *ImPlotAxis): void <cimport,nodecl> end
global function ImPlotAlignmentData_ImPlotAlignmentData(): *ImPlotAlignmentData <cimport,nodecl> end
global function ImPlotAlignmentData_destroy(self: *ImPlotAlignmentData): void <cimport,nodecl> end
global function ImPlotAlignmentData_Begin(self: *ImPlotAlignmentData): void <cimport,nodecl> end
global function ImPlotAlignmentData_Update(self: *ImPlotAlignmentData, pad_a: *float32, pad_b: *float32, delta_a: *float32, delta_b: *float32): void <cimport,nodecl> end
global function ImPlotAlignmentData_End(self: *ImPlotAlignmentData): void <cimport,nodecl> end
global function ImPlotAlignmentData_Reset(self: *ImPlotAlignmentData): void <cimport,nodecl> end
global function ImPlotItem_ImPlotItem(): *ImPlotItem <cimport,nodecl> end
global function ImPlotItem_destroy(self: *ImPlotItem): void <cimport,nodecl> end
global function ImPlotLegend_ImPlotLegend(): *ImPlotLegend <cimport,nodecl> end
global function ImPlotLegend_destroy(self: *ImPlotLegend): void <cimport,nodecl> end
global function ImPlotLegend_Reset(self: *ImPlotLegend): void <cimport,nodecl> end
global function ImPlotItemGroup_ImPlotItemGroup(): *ImPlotItemGroup <cimport,nodecl> end
global function ImPlotItemGroup_destroy(self: *ImPlotItemGroup): void <cimport,nodecl> end
global function ImPlotItemGroup_GetItemCount(self: *ImPlotItemGroup): cint <cimport,nodecl> end
global function ImPlotItemGroup_GetItemID(self: *ImPlotItemGroup, label_id: cstring): cuint <cimport,nodecl> end
global function ImPlotItemGroup_GetItem_ID(self: *ImPlotItemGroup, id: cuint): *ImPlotItem <cimport,nodecl> end
global function ImPlotItemGroup_GetItem_Str(self: *ImPlotItemGroup, label_id: cstring): *ImPlotItem <cimport,nodecl> end
global function ImPlotItemGroup_GetOrAddItem(self: *ImPlotItemGroup, id: cuint): *ImPlotItem <cimport,nodecl> end
global function ImPlotItemGroup_GetItemByIndex(self: *ImPlotItemGroup, i: cint): *ImPlotItem <cimport,nodecl> end
global function ImPlotItemGroup_GetItemIndex(self: *ImPlotItemGroup, item: *ImPlotItem): cint <cimport,nodecl> end
global function ImPlotItemGroup_GetLegendCount(self: *ImPlotItemGroup): cint <cimport,nodecl> end
global function ImPlotItemGroup_GetLegendItem(self: *ImPlotItemGroup, i: cint): *ImPlotItem <cimport,nodecl> end
global function ImPlotItemGroup_GetLegendLabel(self: *ImPlotItemGroup, i: cint): cstring <cimport,nodecl> end
global function ImPlotItemGroup_Reset(self: *ImPlotItemGroup): void <cimport,nodecl> end
global function ImPlotPlot_ImPlotPlot(): *ImPlotPlot <cimport,nodecl> end
global function ImPlotPlot_destroy(self: *ImPlotPlot): void <cimport,nodecl> end
global function ImPlotPlot_IsInputLocked(self: *ImPlotPlot): boolean <cimport,nodecl> end
global function ImPlotPlot_ClearTextBuffer(self: *ImPlotPlot): void <cimport,nodecl> end
global function ImPlotPlot_SetTitle(self: *ImPlotPlot, title: cstring): void <cimport,nodecl> end
global function ImPlotPlot_HasTitle(self: *ImPlotPlot): boolean <cimport,nodecl> end
global function ImPlotPlot_GetTitle(self: *ImPlotPlot): cstring <cimport,nodecl> end
global function ImPlotPlot_XAxis_Nil(self: *ImPlotPlot, i: cint): *ImPlotAxis <cimport,nodecl> end
global function ImPlotPlot_XAxis__const(self: *ImPlotPlot, i: cint): *ImPlotAxis <cimport,nodecl> end
global function ImPlotPlot_YAxis_Nil(self: *ImPlotPlot, i: cint): *ImPlotAxis <cimport,nodecl> end
global function ImPlotPlot_YAxis__const(self: *ImPlotPlot, i: cint): *ImPlotAxis <cimport,nodecl> end
global function ImPlotPlot_EnabledAxesX(self: *ImPlotPlot): cint <cimport,nodecl> end
global function ImPlotPlot_EnabledAxesY(self: *ImPlotPlot): cint <cimport,nodecl> end
global function ImPlotPlot_SetAxisLabel(self: *ImPlotPlot, axis: *ImPlotAxis, label: cstring): void <cimport,nodecl> end
global function ImPlotPlot_GetAxisLabel(self: *ImPlotPlot, axis: ImPlotAxis): cstring <cimport,nodecl> end
global function ImPlotSubplot_ImPlotSubplot(): *ImPlotSubplot <cimport,nodecl> end
global function ImPlotSubplot_destroy(self: *ImPlotSubplot): void <cimport,nodecl> end
global function ImPlotNextPlotData_ImPlotNextPlotData(): *ImPlotNextPlotData <cimport,nodecl> end
global function ImPlotNextPlotData_destroy(self: *ImPlotNextPlotData): void <cimport,nodecl> end
global function ImPlotNextPlotData_Reset(self: *ImPlotNextPlotData): void <cimport,nodecl> end
global function ImPlotNextItemData_ImPlotNextItemData(): *ImPlotNextItemData <cimport,nodecl> end
global function ImPlotNextItemData_destroy(self: *ImPlotNextItemData): void <cimport,nodecl> end
global function ImPlotNextItemData_Reset(self: *ImPlotNextItemData): void <cimport,nodecl> end
global function ImPlot_Initialize(ctx: *ImPlotContext): void <cimport,nodecl> end
global function ImPlot_ResetCtxForNextPlot(ctx: *ImPlotContext): void <cimport,nodecl> end
global function ImPlot_ResetCtxForNextAlignedPlots(ctx: *ImPlotContext): void <cimport,nodecl> end
global function ImPlot_ResetCtxForNextSubplot(ctx: *ImPlotContext): void <cimport,nodecl> end
global function ImPlot_GetPlot(title: cstring): *ImPlotPlot <cimport,nodecl> end
global function ImPlot_GetCurrentPlot(): *ImPlotPlot <cimport,nodecl> end
global function ImPlot_BustPlotCache(): void <cimport,nodecl> end
global function ImPlot_ShowPlotContextMenu(plot: *ImPlotPlot): void <cimport,nodecl> end
global function ImPlot_SetupLock(): void <cimport,nodecl> end
global function ImPlot_SubplotNextCell(): void <cimport,nodecl> end
global function ImPlot_ShowSubplotsContextMenu(subplot: *ImPlotSubplot): void <cimport,nodecl> end
global function ImPlot_BeginItem(label_id: cstring, flags: ImPlotItemFlags, recolor_from: ImPlotCol): boolean <cimport,nodecl> end
global function ImPlot_EndItem(): void <cimport,nodecl> end
global function ImPlot_RegisterOrGetItem(label_id: cstring, flags: ImPlotItemFlags, just_created: *boolean): *ImPlotItem <cimport,nodecl> end
global function ImPlot_GetItem(label_id: cstring): *ImPlotItem <cimport,nodecl> end
global function ImPlot_GetCurrentItem(): *ImPlotItem <cimport,nodecl> end
global function ImPlot_BustItemCache(): void <cimport,nodecl> end
global function ImPlot_AnyAxesInputLocked(axes: *ImPlotAxis, count: cint): boolean <cimport,nodecl> end
global function ImPlot_AllAxesInputLocked(axes: *ImPlotAxis, count: cint): boolean <cimport,nodecl> end
global function ImPlot_AnyAxesHeld(axes: *ImPlotAxis, count: cint): boolean <cimport,nodecl> end
global function ImPlot_AnyAxesHovered(axes: *ImPlotAxis, count: cint): boolean <cimport,nodecl> end
global function ImPlot_FitThisFrame(): boolean <cimport,nodecl> end
global function ImPlot_FitPointX(x: float64): void <cimport,nodecl> end
global function ImPlot_FitPointY(y: float64): void <cimport,nodecl> end
global function ImPlot_FitPoint(p: ImPlotPoint): void <cimport,nodecl> end
global function ImPlot_RangesOverlap(r1: ImPlotRange, r2: ImPlotRange): boolean <cimport,nodecl> end
global function ImPlot_ShowAxisContextMenu(axis: *ImPlotAxis, equal_axis: *ImPlotAxis, time_allowed: boolean): void <cimport,nodecl> end
global function ImPlot_GetLocationPos(pOut: *ImVec2, outer_rect: ImRect, inner_size: ImVec2, location: ImPlotLocation, pad: ImVec2): void <cimport,nodecl> end
global function ImPlot_CalcLegendSize(pOut: *ImVec2, items: *ImPlotItemGroup, pad: ImVec2, spacing: ImVec2, vertical: boolean): void <cimport,nodecl> end
global function ImPlot_ClampLegendRect(legend_rect: *ImRect, outer_rect: ImRect, pad: ImVec2): boolean <cimport,nodecl> end
global function ImPlot_ShowLegendEntries(items: *ImPlotItemGroup, legend_bb: ImRect, interactable: boolean, pad: ImVec2, spacing: ImVec2, vertical: boolean, DrawList: *ImDrawList): boolean <cimport,nodecl> end
global function ImPlot_ShowAltLegend(title_id: cstring, vertical: boolean, size: ImVec2, interactable: boolean): void <cimport,nodecl> end
global function ImPlot_ShowLegendContextMenu(legend: *ImPlotLegend, visible: boolean): boolean <cimport,nodecl> end
global function ImPlot_LabelAxisValue(axis: ImPlotAxis, value: float64, buff: cstring, size: cint, round: boolean): void <cimport,nodecl> end
global function ImPlot_GetItemData(): *ImPlotNextItemData <cimport,nodecl> end
global function ImPlot_IsColorAuto_Vec4(col: ImVec4): boolean <cimport,nodecl> end
global function ImPlot_IsColorAuto_PlotCol(idx: ImPlotCol): boolean <cimport,nodecl> end
global function ImPlot_GetAutoColor(pOut: *ImVec4, idx: ImPlotCol): void <cimport,nodecl> end
global function ImPlot_GetStyleColorVec4(pOut: *ImVec4, idx: ImPlotCol): void <cimport,nodecl> end
global function ImPlot_GetStyleColorU32(idx: ImPlotCol): cuint <cimport,nodecl> end
global function ImPlot_AddTextVertical(DrawList: *ImDrawList, pos: ImVec2, col: cuint, text_begin: cstring, text_end: cstring): void <cimport,nodecl> end
global function ImPlot_AddTextCentered(DrawList: *ImDrawList, top_center: ImVec2, col: cuint, text_begin: cstring, text_end: cstring): void <cimport,nodecl> end
global function ImPlot_CalcTextSizeVertical(pOut: *ImVec2, text: cstring): void <cimport,nodecl> end
global function ImPlot_CalcTextColor_Vec4(bg: ImVec4): cuint <cimport,nodecl> end
global function ImPlot_CalcTextColor_U32(bg: cuint): cuint <cimport,nodecl> end
global function ImPlot_CalcHoverColor(col: cuint): cuint <cimport,nodecl> end
global function ImPlot_ClampLabelPos(pOut: *ImVec2, pos: ImVec2, size: ImVec2, Min: ImVec2, Max: ImVec2): void <cimport,nodecl> end
global function ImPlot_GetColormapColorU32(idx: cint, cmap: ImPlotColormap): cuint <cimport,nodecl> end
global function ImPlot_NextColormapColorU32(): cuint <cimport,nodecl> end
global function ImPlot_SampleColormapU32(t: float32, cmap: ImPlotColormap): cuint <cimport,nodecl> end
global function ImPlot_RenderColorBar(colors: *cuint, size: cint, DrawList: *ImDrawList, bounds: ImRect, vert: boolean, reversed: boolean, continuous: boolean): void <cimport,nodecl> end
global function ImPlot_NiceNum(x: float64, round: boolean): float64 <cimport,nodecl> end
global function ImPlot_OrderOfMagnitude(val: float64): cint <cimport,nodecl> end
global function ImPlot_OrderToPrecision(order: cint): cint <cimport,nodecl> end
global function ImPlot_Precision(val: float64): cint <cimport,nodecl> end
global function ImPlot_RoundTo(val: float64, prec: cint): float64 <cimport,nodecl> end
global function ImPlot_Intersection(pOut: *ImVec2, a1: ImVec2, a2: ImVec2, b1: ImVec2, b2: ImVec2): void <cimport,nodecl> end
global function ImPlot_FillRange_Vector_Float_Ptr(buffer: *ImVector_float, n: cint, vmin: float32, vmax: float32): void <cimport,nodecl> end
global function ImPlot_FillRange_Vector_double_Ptr(buffer: *ImVector_double, n: cint, vmin: float64, vmax: float64): void <cimport,nodecl> end
global function ImPlot_FillRange_Vector_S8_Ptr(buffer: *ImVector_ImS8, n: cint, vmin: cschar, vmax: cschar): void <cimport,nodecl> end
global function ImPlot_FillRange_Vector_U8_Ptr(buffer: *ImVector_ImU8, n: cint, vmin: cuchar, vmax: cuchar): void <cimport,nodecl> end
global function ImPlot_FillRange_Vector_S16_Ptr(buffer: *ImVector_ImS16, n: cint, vmin: cshort, vmax: cshort): void <cimport,nodecl> end
global function ImPlot_FillRange_Vector_U16_Ptr(buffer: *ImVector_ImU16, n: cint, vmin: cushort, vmax: cushort): void <cimport,nodecl> end
global function ImPlot_FillRange_Vector_S32_Ptr(buffer: *ImVector_ImS32, n: cint, vmin: cint, vmax: cint): void <cimport,nodecl> end
global function ImPlot_FillRange_Vector_U32_Ptr(buffer: *ImVector_ImU32, n: cint, vmin: cuint, vmax: cuint): void <cimport,nodecl> end
global function ImPlot_FillRange_Vector_S64_Ptr(buffer: *ImVector_ImS64, n: cint, vmin: clonglong, vmax: clonglong): void <cimport,nodecl> end
global function ImPlot_FillRange_Vector_U64_Ptr(buffer: *ImVector_ImU64, n: cint, vmin: culonglong, vmax: culonglong): void <cimport,nodecl> end
global function ImPlot_CalculateBins_FloatPtr(values: *float32, count: cint, meth: ImPlotBin, range: ImPlotRange, bins_out: *cint, width_out: *float64): void <cimport,nodecl> end
global function ImPlot_CalculateBins_doublePtr(values: *float64, count: cint, meth: ImPlotBin, range: ImPlotRange, bins_out: *cint, width_out: *float64): void <cimport,nodecl> end
global function ImPlot_CalculateBins_S8Ptr(values: *cschar, count: cint, meth: ImPlotBin, range: ImPlotRange, bins_out: *cint, width_out: *float64): void <cimport,nodecl> end
global function ImPlot_CalculateBins_U8Ptr(values: *cuchar, count: cint, meth: ImPlotBin, range: ImPlotRange, bins_out: *cint, width_out: *float64): void <cimport,nodecl> end
global function ImPlot_CalculateBins_S16Ptr(values: *cshort, count: cint, meth: ImPlotBin, range: ImPlotRange, bins_out: *cint, width_out: *float64): void <cimport,nodecl> end
global function ImPlot_CalculateBins_U16Ptr(values: *cushort, count: cint, meth: ImPlotBin, range: ImPlotRange, bins_out: *cint, width_out: *float64): void <cimport,nodecl> end
global function ImPlot_CalculateBins_S32Ptr(values: *cint, count: cint, meth: ImPlotBin, range: ImPlotRange, bins_out: *cint, width_out: *float64): void <cimport,nodecl> end
global function ImPlot_CalculateBins_U32Ptr(values: *cuint, count: cint, meth: ImPlotBin, range: ImPlotRange, bins_out: *cint, width_out: *float64): void <cimport,nodecl> end
global function ImPlot_CalculateBins_S64Ptr(values: *clonglong, count: cint, meth: ImPlotBin, range: ImPlotRange, bins_out: *cint, width_out: *float64): void <cimport,nodecl> end
global function ImPlot_CalculateBins_U64Ptr(values: *culonglong, count: cint, meth: ImPlotBin, range: ImPlotRange, bins_out: *cint, width_out: *float64): void <cimport,nodecl> end
global function ImPlot_IsLeapYear(year: cint): boolean <cimport,nodecl> end
global function ImPlot_GetDaysInMonth(year: cint, month: cint): cint <cimport,nodecl> end
global function ImPlot_MkGmtTime(pOut: *ImPlotTime, ptm: *tm): void <cimport,nodecl> end
global function ImPlot_GetGmtTime(t: ImPlotTime, ptm: *tm): *tm <cimport,nodecl> end
global function ImPlot_MkLocTime(pOut: *ImPlotTime, ptm: *tm): void <cimport,nodecl> end
global function ImPlot_GetLocTime(t: ImPlotTime, ptm: *tm): *tm <cimport,nodecl> end
global function ImPlot_MkTime(pOut: *ImPlotTime, ptm: *tm): void <cimport,nodecl> end
global function ImPlot_GetTime(t: ImPlotTime, ptm: *tm): *tm <cimport,nodecl> end
global function ImPlot_MakeTime(pOut: *ImPlotTime, year: cint, month: cint, day: cint, hour: cint, min: cint, sec: cint, us: cint): void <cimport,nodecl> end
global function ImPlot_GetYear(t: ImPlotTime): cint <cimport,nodecl> end
global function ImPlot_GetMonth(t: ImPlotTime): cint <cimport,nodecl> end
global function ImPlot_AddTime(pOut: *ImPlotTime, t: ImPlotTime, unit: ImPlotTimeUnit, count: cint): void <cimport,nodecl> end
global function ImPlot_FloorTime(pOut: *ImPlotTime, t: ImPlotTime, unit: ImPlotTimeUnit): void <cimport,nodecl> end
global function ImPlot_CeilTime(pOut: *ImPlotTime, t: ImPlotTime, unit: ImPlotTimeUnit): void <cimport,nodecl> end
global function ImPlot_RoundTime(pOut: *ImPlotTime, t: ImPlotTime, unit: ImPlotTimeUnit): void <cimport,nodecl> end
global function ImPlot_CombineDateTime(pOut: *ImPlotTime, date_part: ImPlotTime, time_part: ImPlotTime): void <cimport,nodecl> end
global function ImPlot_Now(pOut: *ImPlotTime): void <cimport,nodecl> end
global function ImPlot_Today(pOut: *ImPlotTime): void <cimport,nodecl> end
global function ImPlot_FormatTime(t: ImPlotTime, buffer: cstring, size: cint, fmt: ImPlotTimeFmt, use_24_hr_clk: boolean): cint <cimport,nodecl> end
global function ImPlot_FormatDate(t: ImPlotTime, buffer: cstring, size: cint, fmt: ImPlotDateFmt, use_iso_8601: boolean): cint <cimport,nodecl> end
global function ImPlot_FormatDateTime(t: ImPlotTime, buffer: cstring, size: cint, fmt: ImPlotDateTimeSpec): cint <cimport,nodecl> end
global function ImPlot_ShowDatePicker(id: cstring, level: *cint, t: *ImPlotTime, t1: *ImPlotTime, t2: *ImPlotTime): boolean <cimport,nodecl> end
global function ImPlot_ShowTimePicker(id: cstring, t: *ImPlotTime): boolean <cimport,nodecl> end
global function ImPlot_TransformForward_Log10(v: float64, noname1: pointer): float64 <cimport,nodecl> end
global function ImPlot_TransformInverse_Log10(v: float64, noname1: pointer): float64 <cimport,nodecl> end
global function ImPlot_TransformForward_SymLog(v: float64, noname1: pointer): float64 <cimport,nodecl> end
global function ImPlot_TransformInverse_SymLog(v: float64, noname1: pointer): float64 <cimport,nodecl> end
global function ImPlot_TransformForward_Logit(v: float64, noname1: pointer): float64 <cimport,nodecl> end
global function ImPlot_TransformInverse_Logit(v: float64, noname1: pointer): float64 <cimport,nodecl> end
global function ImPlot_Formatter_Default(value: float64, buff: cstring, size: cint, data: pointer): cint <cimport,nodecl> end
global function ImPlot_Formatter_Logit(value: float64, buff: cstring, size: cint, noname1: pointer): cint <cimport,nodecl> end
global function ImPlot_Formatter_Time(noname1: float64, buff: cstring, size: cint, data: pointer): cint <cimport,nodecl> end
global function ImPlot_Locator_Default(ticker: *ImPlotTicker, range: ImPlotRange, pixels: float32, vertical: boolean, formatter: ImPlotFormatter, formatter_data: pointer): void <cimport,nodecl> end
global function ImPlot_Locator_Time(ticker: *ImPlotTicker, range: ImPlotRange, pixels: float32, vertical: boolean, formatter: ImPlotFormatter, formatter_data: pointer): void <cimport,nodecl> end
global function ImPlot_Locator_Log10(ticker: *ImPlotTicker, range: ImPlotRange, pixels: float32, vertical: boolean, formatter: ImPlotFormatter, formatter_data: pointer): void <cimport,nodecl> end
global function ImPlot_Locator_SymLog(ticker: *ImPlotTicker, range: ImPlotRange, pixels: float32, vertical: boolean, formatter: ImPlotFormatter, formatter_data: pointer): void <cimport,nodecl> end
