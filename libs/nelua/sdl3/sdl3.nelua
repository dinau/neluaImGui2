--
-- This file has been auto generated. Don't edit this file.
--

##[==[
cinclude "SDL.h"
]==]
global SDL_Time: type <cimport,nodecl> = @int64
global SDL_alignment_test: type <cimport,nodecl> = @record{
  a: uint8,
  b: pointer
}
global SDL_DUMMY_ENUM: type <cimport,nodecl,using> = @enum(cint){
  DUMMY_ENUM_VALUE = 0
}
global SDL_malloc_func: type <cimport,nodecl> = @function(size: csize): pointer
global SDL_calloc_func: type <cimport,nodecl> = @function(nmemb: csize, size: csize): pointer
global SDL_realloc_func: type <cimport,nodecl> = @function(mem: pointer, size: csize): pointer
global SDL_free_func: type <cimport,nodecl> = @function(mem: pointer): void
global SDL_Environment: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_CompareCallback: type <cimport,nodecl> = @function(a: pointer, b: pointer): cint
global SDL_CompareCallback_r: type <cimport,nodecl> = @function(userdata: pointer, a: pointer, b: pointer): cint
global SDL_iconv_data_t: type <cimport,nodecl,ctypedef'SDL_iconv_data_t',forwarddecl> = @record{}
global SDL_iconv_t: type <cimport,nodecl> = @*SDL_iconv_data_t
global SDL_FunctionPointer: type <cimport,nodecl> = @function(): void
global SDL_AssertState: type <cimport,nodecl,using> = @enum(cint){
  SDL_ASSERTION_RETRY = 0,
  SDL_ASSERTION_BREAK = 1,
  SDL_ASSERTION_ABORT = 2,
  SDL_ASSERTION_IGNORE = 3,
  SDL_ASSERTION_ALWAYS_IGNORE = 4
}
global SDL_AssertData: type <cimport,nodecl> = @record{
  always_ignore: boolean,
  trigger_count: cuint,
  condition: cstring,
  filename: cstring,
  linenum: cint,
  function_: cstring,
  next: *SDL_AssertData
}
global SDL_AssertionHandler: type <cimport,nodecl> = @function(data: *SDL_AssertData, userdata: pointer): SDL_AssertState
global SDL_AsyncIO: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_AsyncIOTaskType: type <cimport,nodecl,using> = @enum(cint){
  SDL_ASYNCIO_TASK_READ = 0,
  SDL_ASYNCIO_TASK_WRITE = 1,
  SDL_ASYNCIO_TASK_CLOSE = 2
}
global SDL_AsyncIOResult: type <cimport,nodecl,using> = @enum(cint){
  SDL_ASYNCIO_COMPLETE = 0,
  SDL_ASYNCIO_FAILURE = 1,
  SDL_ASYNCIO_CANCELED = 2
}
global SDL_AsyncIOOutcome: type <cimport,nodecl> = @record{
  asyncio: *SDL_AsyncIO,
  type: SDL_AsyncIOTaskType,
  result: SDL_AsyncIOResult,
  buffer: pointer,
  offset: uint64,
  bytes_requested: uint64,
  bytes_transferred: uint64,
  userdata: pointer
}
global SDL_AsyncIOQueue: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_SpinLock: type <cimport,nodecl> = @cint
global SDL_AtomicInt: type <cimport,nodecl> = @record{
  value: cint
}
global SDL_AtomicU32: type <cimport,nodecl> = @record{
  value: uint32
}
global SDL_PropertiesID: type <cimport,nodecl> = @uint32
global SDL_PropertyType: type <cimport,nodecl,using> = @enum(cint){
  SDL_PROPERTY_TYPE_INVALID = 0,
  SDL_PROPERTY_TYPE_POINTER = 1,
  SDL_PROPERTY_TYPE_STRING = 2,
  SDL_PROPERTY_TYPE_NUMBER = 3,
  SDL_PROPERTY_TYPE_FLOAT = 4,
  SDL_PROPERTY_TYPE_BOOLEAN = 5
}
global SDL_CleanupPropertyCallback: type <cimport,nodecl> = @function(userdata: pointer, value: pointer): void
global SDL_EnumeratePropertiesCallback: type <cimport,nodecl> = @function(userdata: pointer, props: SDL_PropertiesID, name: cstring): void
global SDL_Thread: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_ThreadID: type <cimport,nodecl> = @uint64
global SDL_TLSID: type <cimport,nodecl> = @SDL_AtomicInt
global SDL_ThreadPriority: type <cimport,nodecl,using> = @enum(cint){
  SDL_THREAD_PRIORITY_LOW = 0,
  SDL_THREAD_PRIORITY_NORMAL = 1,
  SDL_THREAD_PRIORITY_HIGH = 2,
  SDL_THREAD_PRIORITY_TIME_CRITICAL = 3
}
global SDL_ThreadState: type <cimport,nodecl,using> = @enum(cint){
  SDL_THREAD_UNKNOWN = 0,
  SDL_THREAD_ALIVE = 1,
  SDL_THREAD_DETACHED = 2,
  SDL_THREAD_COMPLETE = 3
}
global SDL_ThreadFunction: type <cimport,nodecl> = @function(data: pointer): cint
global SDL_TLSDestructorCallback: type <cimport,nodecl> = @function(value: pointer): void
global SDL_Mutex: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_RWLock: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_Semaphore: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_Condition: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_InitStatus: type <cimport,nodecl,using> = @enum(cint){
  SDL_INIT_STATUS_UNINITIALIZED = 0,
  SDL_INIT_STATUS_INITIALIZING = 1,
  SDL_INIT_STATUS_INITIALIZED = 2,
  SDL_INIT_STATUS_UNINITIALIZING = 3
}
global SDL_InitState: type <cimport,nodecl> = @record{
  status: SDL_AtomicInt,
  thread: SDL_ThreadID,
  reserved: pointer
}
global SDL_IOStatus: type <cimport,nodecl,using> = @enum(cint){
  SDL_IO_STATUS_READY = 0,
  SDL_IO_STATUS_ERROR = 1,
  SDL_IO_STATUS_EOF = 2,
  SDL_IO_STATUS_NOT_READY = 3,
  SDL_IO_STATUS_READONLY = 4,
  SDL_IO_STATUS_WRITEONLY = 5
}
global SDL_IOWhence: type <cimport,nodecl,using> = @enum(cint){
  SDL_IO_SEEK_SET = 0,
  SDL_IO_SEEK_CUR = 1,
  SDL_IO_SEEK_END = 2
}
global SDL_IOStreamInterface: type <cimport,nodecl> = @record{
  version: uint32,
  size: function(userdata: pointer): int64,
  seek: function(userdata: pointer, offset: int64, whence: SDL_IOWhence): int64,
  read: function(userdata: pointer, ptr: pointer, size: csize, status: *SDL_IOStatus): csize,
  write: function(userdata: pointer, ptr: pointer, size: csize, status: *SDL_IOStatus): csize,
  flush: function(userdata: pointer, status: *SDL_IOStatus): boolean,
  close: function(userdata: pointer): boolean
}
global SDL_IOStream: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_AudioFormat: type <cimport,nodecl,using> = @enum(cint){
  SDL_AUDIO_UNKNOWN = 0,
  SDL_AUDIO_U8 = 8,
  SDL_AUDIO_S8 = 32776,
  SDL_AUDIO_S16LE = 32784,
  SDL_AUDIO_S16BE = 36880,
  SDL_AUDIO_S32LE = 32800,
  SDL_AUDIO_S32BE = 36896,
  SDL_AUDIO_F32LE = 33056,
  SDL_AUDIO_F32BE = 37152,
  SDL_AUDIO_S16 = 32784,
  SDL_AUDIO_S32 = 32800,
  SDL_AUDIO_F32 = 33056
}
global SDL_AudioDeviceID: type <cimport,nodecl> = @uint32
global SDL_AudioSpec: type <cimport,nodecl> = @record{
  format: SDL_AudioFormat,
  channels: cint,
  freq: cint
}
global SDL_AudioStream: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_AudioStreamCallback: type <cimport,nodecl> = @function(userdata: pointer, stream: *SDL_AudioStream, additional_amount: cint, total_amount: cint): void
global SDL_AudioPostmixCallback: type <cimport,nodecl> = @function(userdata: pointer, spec: *SDL_AudioSpec, buffer: *float32, buflen: cint): void
global SDL_BlendMode: type <cimport,nodecl> = @uint32
global SDL_BlendOperation: type <cimport,nodecl,using> = @enum(cint){
  SDL_BLENDOPERATION_ADD = 1,
  SDL_BLENDOPERATION_SUBTRACT = 2,
  SDL_BLENDOPERATION_REV_SUBTRACT = 3,
  SDL_BLENDOPERATION_MINIMUM = 4,
  SDL_BLENDOPERATION_MAXIMUM = 5
}
global SDL_BlendFactor: type <cimport,nodecl,using> = @enum(cint){
  SDL_BLENDFACTOR_ZERO = 1,
  SDL_BLENDFACTOR_ONE = 2,
  SDL_BLENDFACTOR_SRC_COLOR = 3,
  SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
  SDL_BLENDFACTOR_SRC_ALPHA = 5,
  SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
  SDL_BLENDFACTOR_DST_COLOR = 7,
  SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
  SDL_BLENDFACTOR_DST_ALPHA = 9,
  SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10
}
global SDL_PixelType: type <cimport,nodecl,using> = @enum(cint){
  SDL_PIXELTYPE_UNKNOWN = 0,
  SDL_PIXELTYPE_INDEX1 = 1,
  SDL_PIXELTYPE_INDEX4 = 2,
  SDL_PIXELTYPE_INDEX8 = 3,
  SDL_PIXELTYPE_PACKED8 = 4,
  SDL_PIXELTYPE_PACKED16 = 5,
  SDL_PIXELTYPE_PACKED32 = 6,
  SDL_PIXELTYPE_ARRAYU8 = 7,
  SDL_PIXELTYPE_ARRAYU16 = 8,
  SDL_PIXELTYPE_ARRAYU32 = 9,
  SDL_PIXELTYPE_ARRAYF16 = 10,
  SDL_PIXELTYPE_ARRAYF32 = 11,
  SDL_PIXELTYPE_INDEX2 = 12
}
global SDL_BitmapOrder: type <cimport,nodecl,using> = @enum(cint){
  SDL_BITMAPORDER_NONE = 0,
  SDL_BITMAPORDER_4321 = 1,
  SDL_BITMAPORDER_1234 = 2
}
global SDL_PackedOrder: type <cimport,nodecl,using> = @enum(cint){
  SDL_PACKEDORDER_NONE = 0,
  SDL_PACKEDORDER_XRGB = 1,
  SDL_PACKEDORDER_RGBX = 2,
  SDL_PACKEDORDER_ARGB = 3,
  SDL_PACKEDORDER_RGBA = 4,
  SDL_PACKEDORDER_XBGR = 5,
  SDL_PACKEDORDER_BGRX = 6,
  SDL_PACKEDORDER_ABGR = 7,
  SDL_PACKEDORDER_BGRA = 8
}
global SDL_ArrayOrder: type <cimport,nodecl,using> = @enum(cint){
  SDL_ARRAYORDER_NONE = 0,
  SDL_ARRAYORDER_RGB = 1,
  SDL_ARRAYORDER_RGBA = 2,
  SDL_ARRAYORDER_ARGB = 3,
  SDL_ARRAYORDER_BGR = 4,
  SDL_ARRAYORDER_BGRA = 5,
  SDL_ARRAYORDER_ABGR = 6
}
global SDL_PackedLayout: type <cimport,nodecl,using> = @enum(cint){
  SDL_PACKEDLAYOUT_NONE = 0,
  SDL_PACKEDLAYOUT_332 = 1,
  SDL_PACKEDLAYOUT_4444 = 2,
  SDL_PACKEDLAYOUT_1555 = 3,
  SDL_PACKEDLAYOUT_5551 = 4,
  SDL_PACKEDLAYOUT_565 = 5,
  SDL_PACKEDLAYOUT_8888 = 6,
  SDL_PACKEDLAYOUT_2101010 = 7,
  SDL_PACKEDLAYOUT_1010102 = 8
}
global SDL_PixelFormat: type <cimport,nodecl,using> = @enum(cint){
  SDL_PIXELFORMAT_UNKNOWN = 0,
  SDL_PIXELFORMAT_INDEX1LSB = 286261504,
  SDL_PIXELFORMAT_INDEX1MSB = 287310080,
  SDL_PIXELFORMAT_INDEX2LSB = 470811136,
  SDL_PIXELFORMAT_INDEX2MSB = 471859712,
  SDL_PIXELFORMAT_INDEX4LSB = 303039488,
  SDL_PIXELFORMAT_INDEX4MSB = 304088064,
  SDL_PIXELFORMAT_INDEX8 = 318769153,
  SDL_PIXELFORMAT_RGB332 = 336660481,
  SDL_PIXELFORMAT_XRGB4444 = 353504258,
  SDL_PIXELFORMAT_XBGR4444 = 357698562,
  SDL_PIXELFORMAT_XRGB1555 = 353570562,
  SDL_PIXELFORMAT_XBGR1555 = 357764866,
  SDL_PIXELFORMAT_ARGB4444 = 355602434,
  SDL_PIXELFORMAT_RGBA4444 = 356651010,
  SDL_PIXELFORMAT_ABGR4444 = 359796738,
  SDL_PIXELFORMAT_BGRA4444 = 360845314,
  SDL_PIXELFORMAT_ARGB1555 = 355667970,
  SDL_PIXELFORMAT_RGBA5551 = 356782082,
  SDL_PIXELFORMAT_ABGR1555 = 359862274,
  SDL_PIXELFORMAT_BGRA5551 = 360976386,
  SDL_PIXELFORMAT_RGB565 = 353701890,
  SDL_PIXELFORMAT_BGR565 = 357896194,
  SDL_PIXELFORMAT_RGB24 = 386930691,
  SDL_PIXELFORMAT_BGR24 = 390076419,
  SDL_PIXELFORMAT_XRGB8888 = 370546692,
  SDL_PIXELFORMAT_RGBX8888 = 371595268,
  SDL_PIXELFORMAT_XBGR8888 = 374740996,
  SDL_PIXELFORMAT_BGRX8888 = 375789572,
  SDL_PIXELFORMAT_ARGB8888 = 372645892,
  SDL_PIXELFORMAT_RGBA8888 = 373694468,
  SDL_PIXELFORMAT_ABGR8888 = 376840196,
  SDL_PIXELFORMAT_BGRA8888 = 377888772,
  SDL_PIXELFORMAT_XRGB2101010 = 370614276,
  SDL_PIXELFORMAT_XBGR2101010 = 374808580,
  SDL_PIXELFORMAT_ARGB2101010 = 372711428,
  SDL_PIXELFORMAT_ABGR2101010 = 376905732,
  SDL_PIXELFORMAT_RGB48 = 403714054,
  SDL_PIXELFORMAT_BGR48 = 406859782,
  SDL_PIXELFORMAT_RGBA64 = 404766728,
  SDL_PIXELFORMAT_ARGB64 = 405815304,
  SDL_PIXELFORMAT_BGRA64 = 407912456,
  SDL_PIXELFORMAT_ABGR64 = 408961032,
  SDL_PIXELFORMAT_RGB48_FLOAT = 437268486,
  SDL_PIXELFORMAT_BGR48_FLOAT = 440414214,
  SDL_PIXELFORMAT_RGBA64_FLOAT = 438321160,
  SDL_PIXELFORMAT_ARGB64_FLOAT = 439369736,
  SDL_PIXELFORMAT_BGRA64_FLOAT = 441466888,
  SDL_PIXELFORMAT_ABGR64_FLOAT = 442515464,
  SDL_PIXELFORMAT_RGB96_FLOAT = 454057996,
  SDL_PIXELFORMAT_BGR96_FLOAT = 457203724,
  SDL_PIXELFORMAT_RGBA128_FLOAT = 455114768,
  SDL_PIXELFORMAT_ARGB128_FLOAT = 456163344,
  SDL_PIXELFORMAT_BGRA128_FLOAT = 458260496,
  SDL_PIXELFORMAT_ABGR128_FLOAT = 459309072,
  SDL_PIXELFORMAT_YV12 = 842094169,
  SDL_PIXELFORMAT_IYUV = 1448433993,
  SDL_PIXELFORMAT_YUY2 = 844715353,
  SDL_PIXELFORMAT_UYVY = 1498831189,
  SDL_PIXELFORMAT_YVYU = 1431918169,
  SDL_PIXELFORMAT_NV12 = 842094158,
  SDL_PIXELFORMAT_NV21 = 825382478,
  SDL_PIXELFORMAT_P010 = 808530000,
  SDL_PIXELFORMAT_EXTERNAL_OES = 542328143,
  SDL_PIXELFORMAT_MJPG = 1196444237,
  SDL_PIXELFORMAT_RGBA32 = 376840196,
  SDL_PIXELFORMAT_ARGB32 = 377888772,
  SDL_PIXELFORMAT_BGRA32 = 372645892,
  SDL_PIXELFORMAT_ABGR32 = 373694468,
  SDL_PIXELFORMAT_RGBX32 = 374740996,
  SDL_PIXELFORMAT_XRGB32 = 375789572,
  SDL_PIXELFORMAT_BGRX32 = 370546692,
  SDL_PIXELFORMAT_XBGR32 = 371595268
}
global SDL_ColorType: type <cimport,nodecl,using> = @enum(cint){
  SDL_COLOR_TYPE_UNKNOWN = 0,
  SDL_COLOR_TYPE_RGB = 1,
  SDL_COLOR_TYPE_YCBCR = 2
}
global SDL_ColorRange: type <cimport,nodecl,using> = @enum(cint){
  SDL_COLOR_RANGE_UNKNOWN = 0,
  SDL_COLOR_RANGE_LIMITED = 1,
  SDL_COLOR_RANGE_FULL = 2
}
global SDL_ColorPrimaries: type <cimport,nodecl,using> = @enum(cint){
  SDL_COLOR_PRIMARIES_UNKNOWN = 0,
  SDL_COLOR_PRIMARIES_BT709 = 1,
  SDL_COLOR_PRIMARIES_UNSPECIFIED = 2,
  SDL_COLOR_PRIMARIES_BT470M = 4,
  SDL_COLOR_PRIMARIES_BT470BG = 5,
  SDL_COLOR_PRIMARIES_BT601 = 6,
  SDL_COLOR_PRIMARIES_SMPTE240 = 7,
  SDL_COLOR_PRIMARIES_GENERIC_FILM = 8,
  SDL_COLOR_PRIMARIES_BT2020 = 9,
  SDL_COLOR_PRIMARIES_XYZ = 10,
  SDL_COLOR_PRIMARIES_SMPTE431 = 11,
  SDL_COLOR_PRIMARIES_SMPTE432 = 12,
  SDL_COLOR_PRIMARIES_EBU3213 = 22,
  SDL_COLOR_PRIMARIES_CUSTOM = 31
}
global SDL_TransferCharacteristics: type <cimport,nodecl,using> = @enum(cint){
  SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = 0,
  SDL_TRANSFER_CHARACTERISTICS_BT709 = 1,
  SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2,
  SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = 4,
  SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = 5,
  SDL_TRANSFER_CHARACTERISTICS_BT601 = 6,
  SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = 7,
  SDL_TRANSFER_CHARACTERISTICS_LINEAR = 8,
  SDL_TRANSFER_CHARACTERISTICS_LOG100 = 9,
  SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = 10,
  SDL_TRANSFER_CHARACTERISTICS_IEC61966 = 11,
  SDL_TRANSFER_CHARACTERISTICS_BT1361 = 12,
  SDL_TRANSFER_CHARACTERISTICS_SRGB = 13,
  SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = 14,
  SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = 15,
  SDL_TRANSFER_CHARACTERISTICS_PQ = 16,
  SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = 17,
  SDL_TRANSFER_CHARACTERISTICS_HLG = 18,
  SDL_TRANSFER_CHARACTERISTICS_CUSTOM = 31
}
global SDL_MatrixCoefficients: type <cimport,nodecl,using> = @enum(cint){
  SDL_MATRIX_COEFFICIENTS_IDENTITY = 0,
  SDL_MATRIX_COEFFICIENTS_BT709 = 1,
  SDL_MATRIX_COEFFICIENTS_UNSPECIFIED = 2,
  SDL_MATRIX_COEFFICIENTS_FCC = 4,
  SDL_MATRIX_COEFFICIENTS_BT470BG = 5,
  SDL_MATRIX_COEFFICIENTS_BT601 = 6,
  SDL_MATRIX_COEFFICIENTS_SMPTE240 = 7,
  SDL_MATRIX_COEFFICIENTS_YCGCO = 8,
  SDL_MATRIX_COEFFICIENTS_BT2020_NCL = 9,
  SDL_MATRIX_COEFFICIENTS_BT2020_CL = 10,
  SDL_MATRIX_COEFFICIENTS_SMPTE2085 = 11,
  SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = 12,
  SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL = 13,
  SDL_MATRIX_COEFFICIENTS_ICTCP = 14,
  SDL_MATRIX_COEFFICIENTS_CUSTOM = 31
}
global SDL_ChromaLocation: type <cimport,nodecl,using> = @enum(cint){
  SDL_CHROMA_LOCATION_NONE = 0,
  SDL_CHROMA_LOCATION_LEFT = 1,
  SDL_CHROMA_LOCATION_CENTER = 2,
  SDL_CHROMA_LOCATION_TOPLEFT = 3
}
global SDL_Colorspace: type <cimport,nodecl,using> = @enum(cint){
  SDL_COLORSPACE_UNKNOWN = 0,
  SDL_COLORSPACE_SRGB = 301991328,
  SDL_COLORSPACE_SRGB_LINEAR = 301991168,
  SDL_COLORSPACE_HDR10 = 301999616,
  SDL_COLORSPACE_JPEG = 570426566,
  SDL_COLORSPACE_BT601_LIMITED = 554703046,
  SDL_COLORSPACE_BT601_FULL = 571480262,
  SDL_COLORSPACE_BT709_LIMITED = 554697761,
  SDL_COLORSPACE_BT709_FULL = 571474977,
  SDL_COLORSPACE_BT2020_LIMITED = 554706441,
  SDL_COLORSPACE_BT2020_FULL = 571483657,
  SDL_COLORSPACE_RGB_DEFAULT = 301991328,
  SDL_COLORSPACE_YUV_DEFAULT = 570426566
}
global SDL_Color: type <cimport,nodecl> = @record{
  r: uint8,
  g: uint8,
  b: uint8,
  a: uint8
}
global SDL_FColor: type <cimport,nodecl> = @record{
  r: float32,
  g: float32,
  b: float32,
  a: float32
}
global SDL_Palette: type <cimport,nodecl> = @record{
  ncolors: cint,
  colors: *SDL_Color,
  version: uint32,
  refcount: cint
}
global SDL_PixelFormatDetails: type <cimport,nodecl> = @record{
  format: SDL_PixelFormat,
  bits_per_pixel: uint8,
  bytes_per_pixel: uint8,
  padding: [2]uint8,
  Rmask: uint32,
  Gmask: uint32,
  Bmask: uint32,
  Amask: uint32,
  Rbits: uint8,
  Gbits: uint8,
  Bbits: uint8,
  Abits: uint8,
  Rshift: uint8,
  Gshift: uint8,
  Bshift: uint8,
  Ashift: uint8
}
global SDL_Point: type <cimport,nodecl> = @record{
  x: cint,
  y: cint
}
global SDL_FPoint: type <cimport,nodecl> = @record{
  x: float32,
  y: float32
}
global SDL_Rect: type <cimport,nodecl> = @record{
  x: cint,
  y: cint,
  w: cint,
  h: cint
}
global SDL_FRect: type <cimport,nodecl> = @record{
  x: float32,
  y: float32,
  w: float32,
  h: float32
}
global SDL_SurfaceFlags: type <cimport,nodecl> = @uint32
global SDL_ScaleMode: type <cimport,nodecl,using> = @enum(cint){
  SDL_SCALEMODE_INVALID = -1,
  SDL_SCALEMODE_NEAREST = 0,
  SDL_SCALEMODE_LINEAR = 1
}
global SDL_FlipMode: type <cimport,nodecl,using> = @enum(cint){
  SDL_FLIP_NONE = 0,
  SDL_FLIP_HORIZONTAL = 1,
  SDL_FLIP_VERTICAL = 2
}
global SDL_Surface: type <cimport,nodecl> = @record{
  flags: SDL_SurfaceFlags,
  format: SDL_PixelFormat,
  w: cint,
  h: cint,
  pitch: cint,
  pixels: pointer,
  refcount: cint,
  reserved: pointer
}
global SDL_CameraID: type <cimport,nodecl> = @uint32
global SDL_Camera: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_CameraSpec: type <cimport,nodecl> = @record{
  format: SDL_PixelFormat,
  colorspace: SDL_Colorspace,
  width: cint,
  height: cint,
  framerate_numerator: cint,
  framerate_denominator: cint
}
global SDL_CameraPosition: type <cimport,nodecl,using> = @enum(cint){
  SDL_CAMERA_POSITION_UNKNOWN = 0,
  SDL_CAMERA_POSITION_FRONT_FACING = 1,
  SDL_CAMERA_POSITION_BACK_FACING = 2
}
global SDL_ClipboardDataCallback: type <cimport,nodecl> = @function(userdata: pointer, mime_type: cstring, size: *csize): pointer
global SDL_ClipboardCleanupCallback: type <cimport,nodecl> = @function(userdata: pointer): void
global SDL_DisplayID: type <cimport,nodecl> = @uint32
global SDL_WindowID: type <cimport,nodecl> = @uint32
global SDL_SystemTheme: type <cimport,nodecl,using> = @enum(cint){
  SDL_SYSTEM_THEME_UNKNOWN = 0,
  SDL_SYSTEM_THEME_LIGHT = 1,
  SDL_SYSTEM_THEME_DARK = 2
}
global SDL_DisplayModeData: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_DisplayMode: type <cimport,nodecl> = @record{
  displayID: SDL_DisplayID,
  format: SDL_PixelFormat,
  w: cint,
  h: cint,
  pixel_density: float32,
  refresh_rate: float32,
  refresh_rate_numerator: cint,
  refresh_rate_denominator: cint,
  internal: *SDL_DisplayModeData
}
global SDL_DisplayOrientation: type <cimport,nodecl,using> = @enum(cint){
  SDL_ORIENTATION_UNKNOWN = 0,
  SDL_ORIENTATION_LANDSCAPE = 1,
  SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2,
  SDL_ORIENTATION_PORTRAIT = 3,
  SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
}
global SDL_Window: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_WindowFlags: type <cimport,nodecl> = @uint64
global SDL_FlashOperation: type <cimport,nodecl,using> = @enum(cint){
  SDL_FLASH_CANCEL = 0,
  SDL_FLASH_BRIEFLY = 1,
  SDL_FLASH_UNTIL_FOCUSED = 2
}
global SDL_GLContextState: type <cimport,nodecl,ctypedef'SDL_GLContextState',forwarddecl> = @record{}
global SDL_GLContext: type <cimport,nodecl> = @*SDL_GLContextState
global SDL_EGLDisplay: type <cimport,nodecl> = @pointer
global SDL_EGLConfig: type <cimport,nodecl> = @pointer
global SDL_EGLSurface: type <cimport,nodecl> = @pointer
global SDL_EGLAttrib: type <cimport,nodecl> = @isize
global SDL_EGLint: type <cimport,nodecl> = @cint
global SDL_EGLAttribArrayCallback: type <cimport,nodecl> = @function(userdata: pointer): *SDL_EGLAttrib
global SDL_EGLIntArrayCallback: type <cimport,nodecl> = @function(userdata: pointer, display: SDL_EGLDisplay, config: SDL_EGLConfig): *SDL_EGLint
global SDL_GLAttr: type <cimport,nodecl,using> = @enum(cint){
  SDL_GL_RED_SIZE = 0,
  SDL_GL_GREEN_SIZE = 1,
  SDL_GL_BLUE_SIZE = 2,
  SDL_GL_ALPHA_SIZE = 3,
  SDL_GL_BUFFER_SIZE = 4,
  SDL_GL_DOUBLEBUFFER = 5,
  SDL_GL_DEPTH_SIZE = 6,
  SDL_GL_STENCIL_SIZE = 7,
  SDL_GL_ACCUM_RED_SIZE = 8,
  SDL_GL_ACCUM_GREEN_SIZE = 9,
  SDL_GL_ACCUM_BLUE_SIZE = 10,
  SDL_GL_ACCUM_ALPHA_SIZE = 11,
  SDL_GL_STEREO = 12,
  SDL_GL_MULTISAMPLEBUFFERS = 13,
  SDL_GL_MULTISAMPLESAMPLES = 14,
  SDL_GL_ACCELERATED_VISUAL = 15,
  SDL_GL_RETAINED_BACKING = 16,
  SDL_GL_CONTEXT_MAJOR_VERSION = 17,
  SDL_GL_CONTEXT_MINOR_VERSION = 18,
  SDL_GL_CONTEXT_FLAGS = 19,
  SDL_GL_CONTEXT_PROFILE_MASK = 20,
  SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 21,
  SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 22,
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 23,
  SDL_GL_CONTEXT_RESET_NOTIFICATION = 24,
  SDL_GL_CONTEXT_NO_ERROR = 25,
  SDL_GL_FLOATBUFFERS = 26,
  SDL_GL_EGL_PLATFORM = 27
}
global SDL_GLProfile: type <cimport,nodecl> = @uint32
global SDL_GLContextFlag: type <cimport,nodecl> = @uint32
global SDL_GLContextReleaseFlag: type <cimport,nodecl> = @uint32
global SDL_GLContextResetNotification: type <cimport,nodecl> = @uint32
global SDL_HitTestResult: type <cimport,nodecl,using> = @enum(cint){
  SDL_HITTEST_NORMAL = 0,
  SDL_HITTEST_DRAGGABLE = 1,
  SDL_HITTEST_RESIZE_TOPLEFT = 2,
  SDL_HITTEST_RESIZE_TOP = 3,
  SDL_HITTEST_RESIZE_TOPRIGHT = 4,
  SDL_HITTEST_RESIZE_RIGHT = 5,
  SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6,
  SDL_HITTEST_RESIZE_BOTTOM = 7,
  SDL_HITTEST_RESIZE_BOTTOMLEFT = 8,
  SDL_HITTEST_RESIZE_LEFT = 9
}
global SDL_HitTest: type <cimport,nodecl> = @function(win: *SDL_Window, area: *SDL_Point, data: pointer): SDL_HitTestResult
global SDL_DialogFileFilter: type <cimport,nodecl> = @record{
  name: cstring,
  pattern: cstring
}
global SDL_DialogFileCallback: type <cimport,nodecl> = @function(userdata: pointer, filelist: *cstring, filter: cint): void
global SDL_FileDialogType: type <cimport,nodecl,using> = @enum(cint){
  SDL_FILEDIALOG_OPENFILE = 0,
  SDL_FILEDIALOG_SAVEFILE = 1,
  SDL_FILEDIALOG_OPENFOLDER = 2
}
global SDL_GUID: type <cimport,nodecl> = @record{
  data: [16]uint8
}
global SDL_PowerState: type <cimport,nodecl,using> = @enum(cint){
  SDL_POWERSTATE_ERROR = -1,
  SDL_POWERSTATE_UNKNOWN = 0,
  SDL_POWERSTATE_ON_BATTERY = 1,
  SDL_POWERSTATE_NO_BATTERY = 2,
  SDL_POWERSTATE_CHARGING = 3,
  SDL_POWERSTATE_CHARGED = 4
}
global SDL_Sensor: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_SensorID: type <cimport,nodecl> = @uint32
global SDL_SensorType: type <cimport,nodecl,using> = @enum(cint){
  SDL_SENSOR_INVALID = -1,
  SDL_SENSOR_UNKNOWN = 0,
  SDL_SENSOR_ACCEL = 1,
  SDL_SENSOR_GYRO = 2,
  SDL_SENSOR_ACCEL_L = 3,
  SDL_SENSOR_GYRO_L = 4,
  SDL_SENSOR_ACCEL_R = 5,
  SDL_SENSOR_GYRO_R = 6,
  SDL_SENSOR_COUNT = 7
}
global SDL_Joystick: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_JoystickID: type <cimport,nodecl> = @uint32
global SDL_JoystickType: type <cimport,nodecl,using> = @enum(cint){
  SDL_JOYSTICK_TYPE_UNKNOWN = 0,
  SDL_JOYSTICK_TYPE_GAMEPAD = 1,
  SDL_JOYSTICK_TYPE_WHEEL = 2,
  SDL_JOYSTICK_TYPE_ARCADE_STICK = 3,
  SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4,
  SDL_JOYSTICK_TYPE_DANCE_PAD = 5,
  SDL_JOYSTICK_TYPE_GUITAR = 6,
  SDL_JOYSTICK_TYPE_DRUM_KIT = 7,
  SDL_JOYSTICK_TYPE_ARCADE_PAD = 8,
  SDL_JOYSTICK_TYPE_THROTTLE = 9,
  SDL_JOYSTICK_TYPE_COUNT = 10
}
global SDL_JoystickConnectionState: type <cimport,nodecl,using> = @enum(cint){
  SDL_JOYSTICK_CONNECTION_INVALID = -1,
  SDL_JOYSTICK_CONNECTION_UNKNOWN = 0,
  SDL_JOYSTICK_CONNECTION_WIRED = 1,
  SDL_JOYSTICK_CONNECTION_WIRELESS = 2
}
global SDL_VirtualJoystickTouchpadDesc: type <cimport,nodecl> = @record{
  nfingers: uint16,
  padding: [3]uint16
}
global SDL_VirtualJoystickSensorDesc: type <cimport,nodecl> = @record{
  type: SDL_SensorType,
  rate: float32
}
global SDL_VirtualJoystickDesc: type <cimport,nodecl> = @record{
  version: uint32,
  type: uint16,
  padding: uint16,
  vendor_id: uint16,
  product_id: uint16,
  naxes: uint16,
  nbuttons: uint16,
  nballs: uint16,
  nhats: uint16,
  ntouchpads: uint16,
  nsensors: uint16,
  padding2: [2]uint16,
  button_mask: uint32,
  axis_mask: uint32,
  name: cstring,
  touchpads: *SDL_VirtualJoystickTouchpadDesc,
  sensors: *SDL_VirtualJoystickSensorDesc,
  userdata: pointer,
  Update: function(userdata: pointer): void,
  SetPlayerIndex: function(userdata: pointer, player_index: cint): void,
  Rumble: function(userdata: pointer, low_frequency_rumble: uint16, high_frequency_rumble: uint16): boolean,
  RumbleTriggers: function(userdata: pointer, left_rumble: uint16, right_rumble: uint16): boolean,
  SetLED: function(userdata: pointer, red: uint8, green: uint8, blue: uint8): boolean,
  SendEffect: function(userdata: pointer, data: pointer, size: cint): boolean,
  SetSensorsEnabled: function(userdata: pointer, enabled: boolean): boolean,
  Cleanup: function(userdata: pointer): void
}
global SDL_Gamepad: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GamepadType: type <cimport,nodecl,using> = @enum(cint){
  SDL_GAMEPAD_TYPE_UNKNOWN = 0,
  SDL_GAMEPAD_TYPE_STANDARD = 1,
  SDL_GAMEPAD_TYPE_XBOX360 = 2,
  SDL_GAMEPAD_TYPE_XBOXONE = 3,
  SDL_GAMEPAD_TYPE_PS3 = 4,
  SDL_GAMEPAD_TYPE_PS4 = 5,
  SDL_GAMEPAD_TYPE_PS5 = 6,
  SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO = 7,
  SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 8,
  SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 9,
  SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 10,
  SDL_GAMEPAD_TYPE_COUNT = 11
}
global SDL_GamepadButton: type <cimport,nodecl,using> = @enum(cint){
  SDL_GAMEPAD_BUTTON_INVALID = -1,
  SDL_GAMEPAD_BUTTON_SOUTH = 0,
  SDL_GAMEPAD_BUTTON_EAST = 1,
  SDL_GAMEPAD_BUTTON_WEST = 2,
  SDL_GAMEPAD_BUTTON_NORTH = 3,
  SDL_GAMEPAD_BUTTON_BACK = 4,
  SDL_GAMEPAD_BUTTON_GUIDE = 5,
  SDL_GAMEPAD_BUTTON_START = 6,
  SDL_GAMEPAD_BUTTON_LEFT_STICK = 7,
  SDL_GAMEPAD_BUTTON_RIGHT_STICK = 8,
  SDL_GAMEPAD_BUTTON_LEFT_SHOULDER = 9,
  SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER = 10,
  SDL_GAMEPAD_BUTTON_DPAD_UP = 11,
  SDL_GAMEPAD_BUTTON_DPAD_DOWN = 12,
  SDL_GAMEPAD_BUTTON_DPAD_LEFT = 13,
  SDL_GAMEPAD_BUTTON_DPAD_RIGHT = 14,
  SDL_GAMEPAD_BUTTON_MISC1 = 15,
  SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 = 16,
  SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 = 17,
  SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 = 18,
  SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 = 19,
  SDL_GAMEPAD_BUTTON_TOUCHPAD = 20,
  SDL_GAMEPAD_BUTTON_MISC2 = 21,
  SDL_GAMEPAD_BUTTON_MISC3 = 22,
  SDL_GAMEPAD_BUTTON_MISC4 = 23,
  SDL_GAMEPAD_BUTTON_MISC5 = 24,
  SDL_GAMEPAD_BUTTON_MISC6 = 25,
  SDL_GAMEPAD_BUTTON_COUNT = 26
}
global SDL_GamepadButtonLabel: type <cimport,nodecl,using> = @enum(cint){
  SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN = 0,
  SDL_GAMEPAD_BUTTON_LABEL_A = 1,
  SDL_GAMEPAD_BUTTON_LABEL_B = 2,
  SDL_GAMEPAD_BUTTON_LABEL_X = 3,
  SDL_GAMEPAD_BUTTON_LABEL_Y = 4,
  SDL_GAMEPAD_BUTTON_LABEL_CROSS = 5,
  SDL_GAMEPAD_BUTTON_LABEL_CIRCLE = 6,
  SDL_GAMEPAD_BUTTON_LABEL_SQUARE = 7,
  SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE = 8
}
global SDL_GamepadAxis: type <cimport,nodecl,using> = @enum(cint){
  SDL_GAMEPAD_AXIS_INVALID = -1,
  SDL_GAMEPAD_AXIS_LEFTX = 0,
  SDL_GAMEPAD_AXIS_LEFTY = 1,
  SDL_GAMEPAD_AXIS_RIGHTX = 2,
  SDL_GAMEPAD_AXIS_RIGHTY = 3,
  SDL_GAMEPAD_AXIS_LEFT_TRIGGER = 4,
  SDL_GAMEPAD_AXIS_RIGHT_TRIGGER = 5,
  SDL_GAMEPAD_AXIS_COUNT = 6
}
global SDL_GamepadBindingType: type <cimport,nodecl,using> = @enum(cint){
  SDL_GAMEPAD_BINDTYPE_NONE = 0,
  SDL_GAMEPAD_BINDTYPE_BUTTON = 1,
  SDL_GAMEPAD_BINDTYPE_AXIS = 2,
  SDL_GAMEPAD_BINDTYPE_HAT = 3
}
global SDL_GamepadBinding: type <cimport,nodecl> = @record{
  input_type: SDL_GamepadBindingType,
  input: union{
    button: cint,
    axis: record{
      axis: cint,
      axis_min: cint,
      axis_max: cint
    },
    hat: record{
      hat: cint,
      hat_mask: cint
    }
  },
  output_type: SDL_GamepadBindingType,
  output: union{
    button: SDL_GamepadButton,
    axis: record{
      axis: SDL_GamepadAxis,
      axis_min: cint,
      axis_max: cint
    }
  }
}
global SDL_Scancode: type <cimport,nodecl,using> = @enum(cint){
  SDL_SCANCODE_UNKNOWN = 0,
  SDL_SCANCODE_A = 4,
  SDL_SCANCODE_B = 5,
  SDL_SCANCODE_C = 6,
  SDL_SCANCODE_D = 7,
  SDL_SCANCODE_E = 8,
  SDL_SCANCODE_F = 9,
  SDL_SCANCODE_G = 10,
  SDL_SCANCODE_H = 11,
  SDL_SCANCODE_I = 12,
  SDL_SCANCODE_J = 13,
  SDL_SCANCODE_K = 14,
  SDL_SCANCODE_L = 15,
  SDL_SCANCODE_M = 16,
  SDL_SCANCODE_N = 17,
  SDL_SCANCODE_O = 18,
  SDL_SCANCODE_P = 19,
  SDL_SCANCODE_Q = 20,
  SDL_SCANCODE_R = 21,
  SDL_SCANCODE_S = 22,
  SDL_SCANCODE_T = 23,
  SDL_SCANCODE_U = 24,
  SDL_SCANCODE_V = 25,
  SDL_SCANCODE_W = 26,
  SDL_SCANCODE_X = 27,
  SDL_SCANCODE_Y = 28,
  SDL_SCANCODE_Z = 29,
  SDL_SCANCODE_1 = 30,
  SDL_SCANCODE_2 = 31,
  SDL_SCANCODE_3 = 32,
  SDL_SCANCODE_4 = 33,
  SDL_SCANCODE_5 = 34,
  SDL_SCANCODE_6 = 35,
  SDL_SCANCODE_7 = 36,
  SDL_SCANCODE_8 = 37,
  SDL_SCANCODE_9 = 38,
  SDL_SCANCODE_0 = 39,
  SDL_SCANCODE_RETURN = 40,
  SDL_SCANCODE_ESCAPE = 41,
  SDL_SCANCODE_BACKSPACE = 42,
  SDL_SCANCODE_TAB = 43,
  SDL_SCANCODE_SPACE = 44,
  SDL_SCANCODE_MINUS = 45,
  SDL_SCANCODE_EQUALS = 46,
  SDL_SCANCODE_LEFTBRACKET = 47,
  SDL_SCANCODE_RIGHTBRACKET = 48,
  SDL_SCANCODE_BACKSLASH = 49,
  SDL_SCANCODE_NONUSHASH = 50,
  SDL_SCANCODE_SEMICOLON = 51,
  SDL_SCANCODE_APOSTROPHE = 52,
  SDL_SCANCODE_GRAVE = 53,
  SDL_SCANCODE_COMMA = 54,
  SDL_SCANCODE_PERIOD = 55,
  SDL_SCANCODE_SLASH = 56,
  SDL_SCANCODE_CAPSLOCK = 57,
  SDL_SCANCODE_F1 = 58,
  SDL_SCANCODE_F2 = 59,
  SDL_SCANCODE_F3 = 60,
  SDL_SCANCODE_F4 = 61,
  SDL_SCANCODE_F5 = 62,
  SDL_SCANCODE_F6 = 63,
  SDL_SCANCODE_F7 = 64,
  SDL_SCANCODE_F8 = 65,
  SDL_SCANCODE_F9 = 66,
  SDL_SCANCODE_F10 = 67,
  SDL_SCANCODE_F11 = 68,
  SDL_SCANCODE_F12 = 69,
  SDL_SCANCODE_PRINTSCREEN = 70,
  SDL_SCANCODE_SCROLLLOCK = 71,
  SDL_SCANCODE_PAUSE = 72,
  SDL_SCANCODE_INSERT = 73,
  SDL_SCANCODE_HOME = 74,
  SDL_SCANCODE_PAGEUP = 75,
  SDL_SCANCODE_DELETE = 76,
  SDL_SCANCODE_END = 77,
  SDL_SCANCODE_PAGEDOWN = 78,
  SDL_SCANCODE_RIGHT = 79,
  SDL_SCANCODE_LEFT = 80,
  SDL_SCANCODE_DOWN = 81,
  SDL_SCANCODE_UP = 82,
  SDL_SCANCODE_NUMLOCKCLEAR = 83,
  SDL_SCANCODE_KP_DIVIDE = 84,
  SDL_SCANCODE_KP_MULTIPLY = 85,
  SDL_SCANCODE_KP_MINUS = 86,
  SDL_SCANCODE_KP_PLUS = 87,
  SDL_SCANCODE_KP_ENTER = 88,
  SDL_SCANCODE_KP_1 = 89,
  SDL_SCANCODE_KP_2 = 90,
  SDL_SCANCODE_KP_3 = 91,
  SDL_SCANCODE_KP_4 = 92,
  SDL_SCANCODE_KP_5 = 93,
  SDL_SCANCODE_KP_6 = 94,
  SDL_SCANCODE_KP_7 = 95,
  SDL_SCANCODE_KP_8 = 96,
  SDL_SCANCODE_KP_9 = 97,
  SDL_SCANCODE_KP_0 = 98,
  SDL_SCANCODE_KP_PERIOD = 99,
  SDL_SCANCODE_NONUSBACKSLASH = 100,
  SDL_SCANCODE_APPLICATION = 101,
  SDL_SCANCODE_POWER = 102,
  SDL_SCANCODE_KP_EQUALS = 103,
  SDL_SCANCODE_F13 = 104,
  SDL_SCANCODE_F14 = 105,
  SDL_SCANCODE_F15 = 106,
  SDL_SCANCODE_F16 = 107,
  SDL_SCANCODE_F17 = 108,
  SDL_SCANCODE_F18 = 109,
  SDL_SCANCODE_F19 = 110,
  SDL_SCANCODE_F20 = 111,
  SDL_SCANCODE_F21 = 112,
  SDL_SCANCODE_F22 = 113,
  SDL_SCANCODE_F23 = 114,
  SDL_SCANCODE_F24 = 115,
  SDL_SCANCODE_EXECUTE = 116,
  SDL_SCANCODE_HELP = 117,
  SDL_SCANCODE_MENU = 118,
  SDL_SCANCODE_SELECT = 119,
  SDL_SCANCODE_STOP = 120,
  SDL_SCANCODE_AGAIN = 121,
  SDL_SCANCODE_UNDO = 122,
  SDL_SCANCODE_CUT = 123,
  SDL_SCANCODE_COPY = 124,
  SDL_SCANCODE_PASTE = 125,
  SDL_SCANCODE_FIND = 126,
  SDL_SCANCODE_MUTE = 127,
  SDL_SCANCODE_VOLUMEUP = 128,
  SDL_SCANCODE_VOLUMEDOWN = 129,
  SDL_SCANCODE_KP_COMMA = 133,
  SDL_SCANCODE_KP_EQUALSAS400 = 134,
  SDL_SCANCODE_INTERNATIONAL1 = 135,
  SDL_SCANCODE_INTERNATIONAL2 = 136,
  SDL_SCANCODE_INTERNATIONAL3 = 137,
  SDL_SCANCODE_INTERNATIONAL4 = 138,
  SDL_SCANCODE_INTERNATIONAL5 = 139,
  SDL_SCANCODE_INTERNATIONAL6 = 140,
  SDL_SCANCODE_INTERNATIONAL7 = 141,
  SDL_SCANCODE_INTERNATIONAL8 = 142,
  SDL_SCANCODE_INTERNATIONAL9 = 143,
  SDL_SCANCODE_LANG1 = 144,
  SDL_SCANCODE_LANG2 = 145,
  SDL_SCANCODE_LANG3 = 146,
  SDL_SCANCODE_LANG4 = 147,
  SDL_SCANCODE_LANG5 = 148,
  SDL_SCANCODE_LANG6 = 149,
  SDL_SCANCODE_LANG7 = 150,
  SDL_SCANCODE_LANG8 = 151,
  SDL_SCANCODE_LANG9 = 152,
  SDL_SCANCODE_ALTERASE = 153,
  SDL_SCANCODE_SYSREQ = 154,
  SDL_SCANCODE_CANCEL = 155,
  SDL_SCANCODE_CLEAR = 156,
  SDL_SCANCODE_PRIOR = 157,
  SDL_SCANCODE_RETURN2 = 158,
  SDL_SCANCODE_SEPARATOR = 159,
  SDL_SCANCODE_OUT = 160,
  SDL_SCANCODE_OPER = 161,
  SDL_SCANCODE_CLEARAGAIN = 162,
  SDL_SCANCODE_CRSEL = 163,
  SDL_SCANCODE_EXSEL = 164,
  SDL_SCANCODE_KP_00 = 176,
  SDL_SCANCODE_KP_000 = 177,
  SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
  SDL_SCANCODE_DECIMALSEPARATOR = 179,
  SDL_SCANCODE_CURRENCYUNIT = 180,
  SDL_SCANCODE_CURRENCYSUBUNIT = 181,
  SDL_SCANCODE_KP_LEFTPAREN = 182,
  SDL_SCANCODE_KP_RIGHTPAREN = 183,
  SDL_SCANCODE_KP_LEFTBRACE = 184,
  SDL_SCANCODE_KP_RIGHTBRACE = 185,
  SDL_SCANCODE_KP_TAB = 186,
  SDL_SCANCODE_KP_BACKSPACE = 187,
  SDL_SCANCODE_KP_A = 188,
  SDL_SCANCODE_KP_B = 189,
  SDL_SCANCODE_KP_C = 190,
  SDL_SCANCODE_KP_D = 191,
  SDL_SCANCODE_KP_E = 192,
  SDL_SCANCODE_KP_F = 193,
  SDL_SCANCODE_KP_XOR = 194,
  SDL_SCANCODE_KP_POWER = 195,
  SDL_SCANCODE_KP_PERCENT = 196,
  SDL_SCANCODE_KP_LESS = 197,
  SDL_SCANCODE_KP_GREATER = 198,
  SDL_SCANCODE_KP_AMPERSAND = 199,
  SDL_SCANCODE_KP_DBLAMPERSAND = 200,
  SDL_SCANCODE_KP_VERTICALBAR = 201,
  SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
  SDL_SCANCODE_KP_COLON = 203,
  SDL_SCANCODE_KP_HASH = 204,
  SDL_SCANCODE_KP_SPACE = 205,
  SDL_SCANCODE_KP_AT = 206,
  SDL_SCANCODE_KP_EXCLAM = 207,
  SDL_SCANCODE_KP_MEMSTORE = 208,
  SDL_SCANCODE_KP_MEMRECALL = 209,
  SDL_SCANCODE_KP_MEMCLEAR = 210,
  SDL_SCANCODE_KP_MEMADD = 211,
  SDL_SCANCODE_KP_MEMSUBTRACT = 212,
  SDL_SCANCODE_KP_MEMMULTIPLY = 213,
  SDL_SCANCODE_KP_MEMDIVIDE = 214,
  SDL_SCANCODE_KP_PLUSMINUS = 215,
  SDL_SCANCODE_KP_CLEAR = 216,
  SDL_SCANCODE_KP_CLEARENTRY = 217,
  SDL_SCANCODE_KP_BINARY = 218,
  SDL_SCANCODE_KP_OCTAL = 219,
  SDL_SCANCODE_KP_DECIMAL = 220,
  SDL_SCANCODE_KP_HEXADECIMAL = 221,
  SDL_SCANCODE_LCTRL = 224,
  SDL_SCANCODE_LSHIFT = 225,
  SDL_SCANCODE_LALT = 226,
  SDL_SCANCODE_LGUI = 227,
  SDL_SCANCODE_RCTRL = 228,
  SDL_SCANCODE_RSHIFT = 229,
  SDL_SCANCODE_RALT = 230,
  SDL_SCANCODE_RGUI = 231,
  SDL_SCANCODE_MODE = 257,
  SDL_SCANCODE_SLEEP = 258,
  SDL_SCANCODE_WAKE = 259,
  SDL_SCANCODE_CHANNEL_INCREMENT = 260,
  SDL_SCANCODE_CHANNEL_DECREMENT = 261,
  SDL_SCANCODE_MEDIA_PLAY = 262,
  SDL_SCANCODE_MEDIA_PAUSE = 263,
  SDL_SCANCODE_MEDIA_RECORD = 264,
  SDL_SCANCODE_MEDIA_FAST_FORWARD = 265,
  SDL_SCANCODE_MEDIA_REWIND = 266,
  SDL_SCANCODE_MEDIA_NEXT_TRACK = 267,
  SDL_SCANCODE_MEDIA_PREVIOUS_TRACK = 268,
  SDL_SCANCODE_MEDIA_STOP = 269,
  SDL_SCANCODE_MEDIA_EJECT = 270,
  SDL_SCANCODE_MEDIA_PLAY_PAUSE = 271,
  SDL_SCANCODE_MEDIA_SELECT = 272,
  SDL_SCANCODE_AC_NEW = 273,
  SDL_SCANCODE_AC_OPEN = 274,
  SDL_SCANCODE_AC_CLOSE = 275,
  SDL_SCANCODE_AC_EXIT = 276,
  SDL_SCANCODE_AC_SAVE = 277,
  SDL_SCANCODE_AC_PRINT = 278,
  SDL_SCANCODE_AC_PROPERTIES = 279,
  SDL_SCANCODE_AC_SEARCH = 280,
  SDL_SCANCODE_AC_HOME = 281,
  SDL_SCANCODE_AC_BACK = 282,
  SDL_SCANCODE_AC_FORWARD = 283,
  SDL_SCANCODE_AC_STOP = 284,
  SDL_SCANCODE_AC_REFRESH = 285,
  SDL_SCANCODE_AC_BOOKMARKS = 286,
  SDL_SCANCODE_SOFTLEFT = 287,
  SDL_SCANCODE_SOFTRIGHT = 288,
  SDL_SCANCODE_CALL = 289,
  SDL_SCANCODE_ENDCALL = 290,
  SDL_SCANCODE_RESERVED = 400,
  SDL_SCANCODE_COUNT = 512
}
global SDL_Keycode: type <cimport,nodecl> = @uint32
global SDL_Keymod: type <cimport,nodecl> = @uint16
global SDL_KeyboardID: type <cimport,nodecl> = @uint32
global SDL_TextInputType: type <cimport,nodecl,using> = @enum(cint){
  SDL_TEXTINPUT_TYPE_TEXT = 0,
  SDL_TEXTINPUT_TYPE_TEXT_NAME = 1,
  SDL_TEXTINPUT_TYPE_TEXT_EMAIL = 2,
  SDL_TEXTINPUT_TYPE_TEXT_USERNAME = 3,
  SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN = 4,
  SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE = 5,
  SDL_TEXTINPUT_TYPE_NUMBER = 6,
  SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN = 7,
  SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE = 8
}
global SDL_Capitalization: type <cimport,nodecl,using> = @enum(cint){
  SDL_CAPITALIZE_NONE = 0,
  SDL_CAPITALIZE_SENTENCES = 1,
  SDL_CAPITALIZE_WORDS = 2,
  SDL_CAPITALIZE_LETTERS = 3
}
global SDL_MouseID: type <cimport,nodecl> = @uint32
global SDL_Cursor: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_SystemCursor: type <cimport,nodecl,using> = @enum(cint){
  SDL_SYSTEM_CURSOR_DEFAULT = 0,
  SDL_SYSTEM_CURSOR_TEXT = 1,
  SDL_SYSTEM_CURSOR_WAIT = 2,
  SDL_SYSTEM_CURSOR_CROSSHAIR = 3,
  SDL_SYSTEM_CURSOR_PROGRESS = 4,
  SDL_SYSTEM_CURSOR_NWSE_RESIZE = 5,
  SDL_SYSTEM_CURSOR_NESW_RESIZE = 6,
  SDL_SYSTEM_CURSOR_EW_RESIZE = 7,
  SDL_SYSTEM_CURSOR_NS_RESIZE = 8,
  SDL_SYSTEM_CURSOR_MOVE = 9,
  SDL_SYSTEM_CURSOR_NOT_ALLOWED = 10,
  SDL_SYSTEM_CURSOR_POINTER = 11,
  SDL_SYSTEM_CURSOR_NW_RESIZE = 12,
  SDL_SYSTEM_CURSOR_N_RESIZE = 13,
  SDL_SYSTEM_CURSOR_NE_RESIZE = 14,
  SDL_SYSTEM_CURSOR_E_RESIZE = 15,
  SDL_SYSTEM_CURSOR_SE_RESIZE = 16,
  SDL_SYSTEM_CURSOR_S_RESIZE = 17,
  SDL_SYSTEM_CURSOR_SW_RESIZE = 18,
  SDL_SYSTEM_CURSOR_W_RESIZE = 19,
  SDL_SYSTEM_CURSOR_COUNT = 20
}
global SDL_MouseWheelDirection: type <cimport,nodecl,using> = @enum(cint){
  SDL_MOUSEWHEEL_NORMAL = 0,
  SDL_MOUSEWHEEL_FLIPPED = 1
}
global SDL_MouseButtonFlags: type <cimport,nodecl> = @uint32
global SDL_TouchID: type <cimport,nodecl> = @uint64
global SDL_FingerID: type <cimport,nodecl> = @uint64
global SDL_TouchDeviceType: type <cimport,nodecl,using> = @enum(cint){
  SDL_TOUCH_DEVICE_INVALID = -1,
  SDL_TOUCH_DEVICE_DIRECT = 0,
  SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1,
  SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2
}
global SDL_Finger: type <cimport,nodecl> = @record{
  id: SDL_FingerID,
  x: float32,
  y: float32,
  pressure: float32
}
global SDL_PenID: type <cimport,nodecl> = @uint32
global SDL_PenInputFlags: type <cimport,nodecl> = @uint32
global SDL_PenAxis: type <cimport,nodecl,using> = @enum(cint){
  SDL_PEN_AXIS_PRESSURE = 0,
  SDL_PEN_AXIS_XTILT = 1,
  SDL_PEN_AXIS_YTILT = 2,
  SDL_PEN_AXIS_DISTANCE = 3,
  SDL_PEN_AXIS_ROTATION = 4,
  SDL_PEN_AXIS_SLIDER = 5,
  SDL_PEN_AXIS_TANGENTIAL_PRESSURE = 6,
  SDL_PEN_AXIS_COUNT = 7
}
global SDL_EventType: type <cimport,nodecl,using> = @enum(cint){
  SDL_EVENT_FIRST = 0,
  SDL_EVENT_QUIT = 256,
  SDL_EVENT_TERMINATING = 257,
  SDL_EVENT_LOW_MEMORY = 258,
  SDL_EVENT_WILL_ENTER_BACKGROUND = 259,
  SDL_EVENT_DID_ENTER_BACKGROUND = 260,
  SDL_EVENT_WILL_ENTER_FOREGROUND = 261,
  SDL_EVENT_DID_ENTER_FOREGROUND = 262,
  SDL_EVENT_LOCALE_CHANGED = 263,
  SDL_EVENT_SYSTEM_THEME_CHANGED = 264,
  SDL_EVENT_DISPLAY_ORIENTATION = 337,
  SDL_EVENT_DISPLAY_ADDED = 338,
  SDL_EVENT_DISPLAY_REMOVED = 339,
  SDL_EVENT_DISPLAY_MOVED = 340,
  SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED = 341,
  SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED = 342,
  SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED = 343,
  SDL_EVENT_DISPLAY_FIRST = 337,
  SDL_EVENT_DISPLAY_LAST = 343,
  SDL_EVENT_WINDOW_SHOWN = 514,
  SDL_EVENT_WINDOW_HIDDEN = 515,
  SDL_EVENT_WINDOW_EXPOSED = 516,
  SDL_EVENT_WINDOW_MOVED = 517,
  SDL_EVENT_WINDOW_RESIZED = 518,
  SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED = 519,
  SDL_EVENT_WINDOW_METAL_VIEW_RESIZED = 520,
  SDL_EVENT_WINDOW_MINIMIZED = 521,
  SDL_EVENT_WINDOW_MAXIMIZED = 522,
  SDL_EVENT_WINDOW_RESTORED = 523,
  SDL_EVENT_WINDOW_MOUSE_ENTER = 524,
  SDL_EVENT_WINDOW_MOUSE_LEAVE = 525,
  SDL_EVENT_WINDOW_FOCUS_GAINED = 526,
  SDL_EVENT_WINDOW_FOCUS_LOST = 527,
  SDL_EVENT_WINDOW_CLOSE_REQUESTED = 528,
  SDL_EVENT_WINDOW_HIT_TEST = 529,
  SDL_EVENT_WINDOW_ICCPROF_CHANGED = 530,
  SDL_EVENT_WINDOW_DISPLAY_CHANGED = 531,
  SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED = 532,
  SDL_EVENT_WINDOW_SAFE_AREA_CHANGED = 533,
  SDL_EVENT_WINDOW_OCCLUDED = 534,
  SDL_EVENT_WINDOW_ENTER_FULLSCREEN = 535,
  SDL_EVENT_WINDOW_LEAVE_FULLSCREEN = 536,
  SDL_EVENT_WINDOW_DESTROYED = 537,
  SDL_EVENT_WINDOW_HDR_STATE_CHANGED = 538,
  SDL_EVENT_WINDOW_FIRST = 514,
  SDL_EVENT_WINDOW_LAST = 538,
  SDL_EVENT_KEY_DOWN = 768,
  SDL_EVENT_KEY_UP = 769,
  SDL_EVENT_TEXT_EDITING = 770,
  SDL_EVENT_TEXT_INPUT = 771,
  SDL_EVENT_KEYMAP_CHANGED = 772,
  SDL_EVENT_KEYBOARD_ADDED = 773,
  SDL_EVENT_KEYBOARD_REMOVED = 774,
  SDL_EVENT_TEXT_EDITING_CANDIDATES = 775,
  SDL_EVENT_MOUSE_MOTION = 1024,
  SDL_EVENT_MOUSE_BUTTON_DOWN = 1025,
  SDL_EVENT_MOUSE_BUTTON_UP = 1026,
  SDL_EVENT_MOUSE_WHEEL = 1027,
  SDL_EVENT_MOUSE_ADDED = 1028,
  SDL_EVENT_MOUSE_REMOVED = 1029,
  SDL_EVENT_JOYSTICK_AXIS_MOTION = 1536,
  SDL_EVENT_JOYSTICK_BALL_MOTION = 1537,
  SDL_EVENT_JOYSTICK_HAT_MOTION = 1538,
  SDL_EVENT_JOYSTICK_BUTTON_DOWN = 1539,
  SDL_EVENT_JOYSTICK_BUTTON_UP = 1540,
  SDL_EVENT_JOYSTICK_ADDED = 1541,
  SDL_EVENT_JOYSTICK_REMOVED = 1542,
  SDL_EVENT_JOYSTICK_BATTERY_UPDATED = 1543,
  SDL_EVENT_JOYSTICK_UPDATE_COMPLETE = 1544,
  SDL_EVENT_GAMEPAD_AXIS_MOTION = 1616,
  SDL_EVENT_GAMEPAD_BUTTON_DOWN = 1617,
  SDL_EVENT_GAMEPAD_BUTTON_UP = 1618,
  SDL_EVENT_GAMEPAD_ADDED = 1619,
  SDL_EVENT_GAMEPAD_REMOVED = 1620,
  SDL_EVENT_GAMEPAD_REMAPPED = 1621,
  SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN = 1622,
  SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION = 1623,
  SDL_EVENT_GAMEPAD_TOUCHPAD_UP = 1624,
  SDL_EVENT_GAMEPAD_SENSOR_UPDATE = 1625,
  SDL_EVENT_GAMEPAD_UPDATE_COMPLETE = 1626,
  SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED = 1627,
  SDL_EVENT_FINGER_DOWN = 1792,
  SDL_EVENT_FINGER_UP = 1793,
  SDL_EVENT_FINGER_MOTION = 1794,
  SDL_EVENT_FINGER_CANCELED = 1795,
  SDL_EVENT_CLIPBOARD_UPDATE = 2304,
  SDL_EVENT_DROP_FILE = 4096,
  SDL_EVENT_DROP_TEXT = 4097,
  SDL_EVENT_DROP_BEGIN = 4098,
  SDL_EVENT_DROP_COMPLETE = 4099,
  SDL_EVENT_DROP_POSITION = 4100,
  SDL_EVENT_AUDIO_DEVICE_ADDED = 4352,
  SDL_EVENT_AUDIO_DEVICE_REMOVED = 4353,
  SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED = 4354,
  SDL_EVENT_SENSOR_UPDATE = 4608,
  SDL_EVENT_PEN_PROXIMITY_IN = 4864,
  SDL_EVENT_PEN_PROXIMITY_OUT = 4865,
  SDL_EVENT_PEN_DOWN = 4866,
  SDL_EVENT_PEN_UP = 4867,
  SDL_EVENT_PEN_BUTTON_DOWN = 4868,
  SDL_EVENT_PEN_BUTTON_UP = 4869,
  SDL_EVENT_PEN_MOTION = 4870,
  SDL_EVENT_PEN_AXIS = 4871,
  SDL_EVENT_CAMERA_DEVICE_ADDED = 5120,
  SDL_EVENT_CAMERA_DEVICE_REMOVED = 5121,
  SDL_EVENT_CAMERA_DEVICE_APPROVED = 5122,
  SDL_EVENT_CAMERA_DEVICE_DENIED = 5123,
  SDL_EVENT_RENDER_TARGETS_RESET = 8192,
  SDL_EVENT_RENDER_DEVICE_RESET = 8193,
  SDL_EVENT_RENDER_DEVICE_LOST = 8194,
  SDL_EVENT_PRIVATE0 = 16384,
  SDL_EVENT_PRIVATE1 = 16385,
  SDL_EVENT_PRIVATE2 = 16386,
  SDL_EVENT_PRIVATE3 = 16387,
  SDL_EVENT_POLL_SENTINEL = 32512,
  SDL_EVENT_USER = 32768,
  SDL_EVENT_LAST = 65535,
  SDL_EVENT_ENUM_PADDING = 2147483647
}
global SDL_CommonEvent: type <cimport,nodecl> = @record{
  type: uint32,
  reserved: uint32,
  timestamp: uint64
}
global SDL_DisplayEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  displayID: SDL_DisplayID,
  data1: int32,
  data2: int32
}
global SDL_WindowEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  data1: int32,
  data2: int32
}
global SDL_KeyboardDeviceEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_KeyboardID
}
global SDL_KeyboardEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  which: SDL_KeyboardID,
  scancode: SDL_Scancode,
  key: SDL_Keycode,
  mod: SDL_Keymod,
  raw: uint16,
  down: boolean,
  repeat_: boolean
}
global SDL_TextEditingEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  text: cstring,
  start: int32,
  length: int32
}
global SDL_TextEditingCandidatesEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  candidates: *cstring,
  num_candidates: int32,
  selected_candidate: int32,
  horizontal: boolean,
  padding1: uint8,
  padding2: uint8,
  padding3: uint8
}
global SDL_TextInputEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  text: cstring
}
global SDL_MouseDeviceEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_MouseID
}
global SDL_MouseMotionEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  which: SDL_MouseID,
  state: SDL_MouseButtonFlags,
  x: float32,
  y: float32,
  xrel: float32,
  yrel: float32
}
global SDL_MouseButtonEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  which: SDL_MouseID,
  button: uint8,
  down: boolean,
  clicks: uint8,
  padding: uint8,
  x: float32,
  y: float32
}
global SDL_MouseWheelEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  which: SDL_MouseID,
  x: float32,
  y: float32,
  direction: SDL_MouseWheelDirection,
  mouse_x: float32,
  mouse_y: float32,
  integer_x: int32,
  integer_y: int32
}
global SDL_JoyAxisEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_JoystickID,
  axis: uint8,
  padding1: uint8,
  padding2: uint8,
  padding3: uint8,
  value: int16,
  padding4: uint16
}
global SDL_JoyBallEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_JoystickID,
  ball: uint8,
  padding1: uint8,
  padding2: uint8,
  padding3: uint8,
  xrel: int16,
  yrel: int16
}
global SDL_JoyHatEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_JoystickID,
  hat: uint8,
  value: uint8,
  padding1: uint8,
  padding2: uint8
}
global SDL_JoyButtonEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_JoystickID,
  button: uint8,
  down: boolean,
  padding1: uint8,
  padding2: uint8
}
global SDL_JoyDeviceEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_JoystickID
}
global SDL_JoyBatteryEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_JoystickID,
  state: SDL_PowerState,
  percent: cint
}
global SDL_GamepadAxisEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_JoystickID,
  axis: uint8,
  padding1: uint8,
  padding2: uint8,
  padding3: uint8,
  value: int16,
  padding4: uint16
}
global SDL_GamepadButtonEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_JoystickID,
  button: uint8,
  down: boolean,
  padding1: uint8,
  padding2: uint8
}
global SDL_GamepadDeviceEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_JoystickID
}
global SDL_GamepadTouchpadEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_JoystickID,
  touchpad: int32,
  finger: int32,
  x: float32,
  y: float32,
  pressure: float32
}
global SDL_GamepadSensorEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_JoystickID,
  sensor: int32,
  data: [3]float32,
  sensor_timestamp: uint64
}
global SDL_AudioDeviceEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_AudioDeviceID,
  recording: boolean,
  padding1: uint8,
  padding2: uint8,
  padding3: uint8
}
global SDL_CameraDeviceEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_CameraID
}
global SDL_RenderEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID
}
global SDL_TouchFingerEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  touchID: SDL_TouchID,
  fingerID: SDL_FingerID,
  x: float32,
  y: float32,
  dx: float32,
  dy: float32,
  pressure: float32,
  windowID: SDL_WindowID
}
global SDL_PenProximityEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  which: SDL_PenID
}
global SDL_PenMotionEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  which: SDL_PenID,
  pen_state: SDL_PenInputFlags,
  x: float32,
  y: float32
}
global SDL_PenTouchEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  which: SDL_PenID,
  pen_state: SDL_PenInputFlags,
  x: float32,
  y: float32,
  eraser: boolean,
  down: boolean
}
global SDL_PenButtonEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  which: SDL_PenID,
  pen_state: SDL_PenInputFlags,
  x: float32,
  y: float32,
  button: uint8,
  down: boolean
}
global SDL_PenAxisEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  which: SDL_PenID,
  pen_state: SDL_PenInputFlags,
  x: float32,
  y: float32,
  axis: SDL_PenAxis,
  value: float32
}
global SDL_DropEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  x: float32,
  y: float32,
  source: cstring,
  data: cstring
}
global SDL_ClipboardEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  owner: boolean,
  num_mime_types: int32,
  mime_types: *cstring
}
global SDL_SensorEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64,
  which: SDL_SensorID,
  data: [6]float32,
  sensor_timestamp: uint64
}
global SDL_QuitEvent: type <cimport,nodecl> = @record{
  type: SDL_EventType,
  reserved: uint32,
  timestamp: uint64
}
global SDL_UserEvent: type <cimport,nodecl> = @record{
  type: uint32,
  reserved: uint32,
  timestamp: uint64,
  windowID: SDL_WindowID,
  code: int32,
  data1: pointer,
  data2: pointer
}
global SDL_Event: type <cimport,nodecl> = @union{
  type: uint32,
  common: SDL_CommonEvent,
  display: SDL_DisplayEvent,
  window: SDL_WindowEvent,
  kdevice: SDL_KeyboardDeviceEvent,
  key: SDL_KeyboardEvent,
  edit: SDL_TextEditingEvent,
  edit_candidates: SDL_TextEditingCandidatesEvent,
  text: SDL_TextInputEvent,
  mdevice: SDL_MouseDeviceEvent,
  motion: SDL_MouseMotionEvent,
  button: SDL_MouseButtonEvent,
  wheel: SDL_MouseWheelEvent,
  jdevice: SDL_JoyDeviceEvent,
  jaxis: SDL_JoyAxisEvent,
  jball: SDL_JoyBallEvent,
  jhat: SDL_JoyHatEvent,
  jbutton: SDL_JoyButtonEvent,
  jbattery: SDL_JoyBatteryEvent,
  gdevice: SDL_GamepadDeviceEvent,
  gaxis: SDL_GamepadAxisEvent,
  gbutton: SDL_GamepadButtonEvent,
  gtouchpad: SDL_GamepadTouchpadEvent,
  gsensor: SDL_GamepadSensorEvent,
  adevice: SDL_AudioDeviceEvent,
  cdevice: SDL_CameraDeviceEvent,
  sensor: SDL_SensorEvent,
  quit: SDL_QuitEvent,
  user: SDL_UserEvent,
  tfinger: SDL_TouchFingerEvent,
  pproximity: SDL_PenProximityEvent,
  ptouch: SDL_PenTouchEvent,
  pmotion: SDL_PenMotionEvent,
  pbutton: SDL_PenButtonEvent,
  paxis: SDL_PenAxisEvent,
  render: SDL_RenderEvent,
  drop: SDL_DropEvent,
  clipboard: SDL_ClipboardEvent,
  padding: [128]uint8
}
global SDL_EventAction: type <cimport,nodecl,using> = @enum(cint){
  SDL_ADDEVENT = 0,
  SDL_PEEKEVENT = 1,
  SDL_GETEVENT = 2
}
global SDL_EventFilter: type <cimport,nodecl> = @function(userdata: pointer, event: *SDL_Event): boolean
global SDL_Folder: type <cimport,nodecl,using> = @enum(cint){
  SDL_FOLDER_HOME = 0,
  SDL_FOLDER_DESKTOP = 1,
  SDL_FOLDER_DOCUMENTS = 2,
  SDL_FOLDER_DOWNLOADS = 3,
  SDL_FOLDER_MUSIC = 4,
  SDL_FOLDER_PICTURES = 5,
  SDL_FOLDER_PUBLICSHARE = 6,
  SDL_FOLDER_SAVEDGAMES = 7,
  SDL_FOLDER_SCREENSHOTS = 8,
  SDL_FOLDER_TEMPLATES = 9,
  SDL_FOLDER_VIDEOS = 10,
  SDL_FOLDER_COUNT = 11
}
global SDL_PathType: type <cimport,nodecl,using> = @enum(cint){
  SDL_PATHTYPE_NONE = 0,
  SDL_PATHTYPE_FILE = 1,
  SDL_PATHTYPE_DIRECTORY = 2,
  SDL_PATHTYPE_OTHER = 3
}
global SDL_PathInfo: type <cimport,nodecl> = @record{
  type: SDL_PathType,
  size: uint64,
  create_time: SDL_Time,
  modify_time: SDL_Time,
  access_time: SDL_Time
}
global SDL_GlobFlags: type <cimport,nodecl> = @uint32
global SDL_EnumerationResult: type <cimport,nodecl,using> = @enum(cint){
  SDL_ENUM_CONTINUE = 0,
  SDL_ENUM_SUCCESS = 1,
  SDL_ENUM_FAILURE = 2
}
global SDL_EnumerateDirectoryCallback: type <cimport,nodecl> = @function(userdata: pointer, dirname: cstring, fname: cstring): SDL_EnumerationResult
global SDL_GPUDevice: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPUBuffer: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPUTransferBuffer: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPUTexture: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPUSampler: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPUShader: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPUComputePipeline: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPUGraphicsPipeline: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPUCommandBuffer: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPURenderPass: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPUComputePass: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPUCopyPass: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPUFence: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_GPUPrimitiveType: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_PRIMITIVETYPE_TRIANGLELIST = 0,
  SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP = 1,
  SDL_GPU_PRIMITIVETYPE_LINELIST = 2,
  SDL_GPU_PRIMITIVETYPE_LINESTRIP = 3,
  SDL_GPU_PRIMITIVETYPE_POINTLIST = 4
}
global SDL_GPULoadOp: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_LOADOP_LOAD = 0,
  SDL_GPU_LOADOP_CLEAR = 1,
  SDL_GPU_LOADOP_DONT_CARE = 2
}
global SDL_GPUStoreOp: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_STOREOP_STORE = 0,
  SDL_GPU_STOREOP_DONT_CARE = 1,
  SDL_GPU_STOREOP_RESOLVE = 2,
  SDL_GPU_STOREOP_RESOLVE_AND_STORE = 3
}
global SDL_GPUIndexElementSize: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_INDEXELEMENTSIZE_16BIT = 0,
  SDL_GPU_INDEXELEMENTSIZE_32BIT = 1
}
global SDL_GPUTextureFormat: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_TEXTUREFORMAT_INVALID = 0,
  SDL_GPU_TEXTUREFORMAT_A8_UNORM = 1,
  SDL_GPU_TEXTUREFORMAT_R8_UNORM = 2,
  SDL_GPU_TEXTUREFORMAT_R8G8_UNORM = 3,
  SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM = 4,
  SDL_GPU_TEXTUREFORMAT_R16_UNORM = 5,
  SDL_GPU_TEXTUREFORMAT_R16G16_UNORM = 6,
  SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM = 7,
  SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM = 8,
  SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM = 9,
  SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM = 10,
  SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM = 11,
  SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM = 12,
  SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM = 13,
  SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM = 14,
  SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM = 15,
  SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM = 16,
  SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM = 17,
  SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM = 18,
  SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT = 19,
  SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT = 20,
  SDL_GPU_TEXTUREFORMAT_R8_SNORM = 21,
  SDL_GPU_TEXTUREFORMAT_R8G8_SNORM = 22,
  SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM = 23,
  SDL_GPU_TEXTUREFORMAT_R16_SNORM = 24,
  SDL_GPU_TEXTUREFORMAT_R16G16_SNORM = 25,
  SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM = 26,
  SDL_GPU_TEXTUREFORMAT_R16_FLOAT = 27,
  SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT = 28,
  SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT = 29,
  SDL_GPU_TEXTUREFORMAT_R32_FLOAT = 30,
  SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT = 31,
  SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT = 32,
  SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT = 33,
  SDL_GPU_TEXTUREFORMAT_R8_UINT = 34,
  SDL_GPU_TEXTUREFORMAT_R8G8_UINT = 35,
  SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT = 36,
  SDL_GPU_TEXTUREFORMAT_R16_UINT = 37,
  SDL_GPU_TEXTUREFORMAT_R16G16_UINT = 38,
  SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT = 39,
  SDL_GPU_TEXTUREFORMAT_R32_UINT = 40,
  SDL_GPU_TEXTUREFORMAT_R32G32_UINT = 41,
  SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT = 42,
  SDL_GPU_TEXTUREFORMAT_R8_INT = 43,
  SDL_GPU_TEXTUREFORMAT_R8G8_INT = 44,
  SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT = 45,
  SDL_GPU_TEXTUREFORMAT_R16_INT = 46,
  SDL_GPU_TEXTUREFORMAT_R16G16_INT = 47,
  SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT = 48,
  SDL_GPU_TEXTUREFORMAT_R32_INT = 49,
  SDL_GPU_TEXTUREFORMAT_R32G32_INT = 50,
  SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT = 51,
  SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB = 52,
  SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB = 53,
  SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB = 54,
  SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB = 55,
  SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB = 56,
  SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB = 57,
  SDL_GPU_TEXTUREFORMAT_D16_UNORM = 58,
  SDL_GPU_TEXTUREFORMAT_D24_UNORM = 59,
  SDL_GPU_TEXTUREFORMAT_D32_FLOAT = 60,
  SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT = 61,
  SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT = 62,
  SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM = 63,
  SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM = 64,
  SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM = 65,
  SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM = 66,
  SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM = 67,
  SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM = 68,
  SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM = 69,
  SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM = 70,
  SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM = 71,
  SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM = 72,
  SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM = 73,
  SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM = 74,
  SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM = 75,
  SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM = 76,
  SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB = 77,
  SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB = 78,
  SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB = 79,
  SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB = 80,
  SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB = 81,
  SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB = 82,
  SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB = 83,
  SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB = 84,
  SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB = 85,
  SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB = 86,
  SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB = 87,
  SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB = 88,
  SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB = 89,
  SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB = 90,
  SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT = 91,
  SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT = 92,
  SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT = 93,
  SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT = 94,
  SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT = 95,
  SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT = 96,
  SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT = 97,
  SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT = 98,
  SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT = 99,
  SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT = 100,
  SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT = 101,
  SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT = 102,
  SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT = 103,
  SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT = 104
}
global SDL_GPUTextureUsageFlags: type <cimport,nodecl> = @uint32
global SDL_GPUTextureType: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_TEXTURETYPE_2D = 0,
  SDL_GPU_TEXTURETYPE_2D_ARRAY = 1,
  SDL_GPU_TEXTURETYPE_3D = 2,
  SDL_GPU_TEXTURETYPE_CUBE = 3,
  SDL_GPU_TEXTURETYPE_CUBE_ARRAY = 4
}
global SDL_GPUSampleCount: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_SAMPLECOUNT_1 = 0,
  SDL_GPU_SAMPLECOUNT_2 = 1,
  SDL_GPU_SAMPLECOUNT_4 = 2,
  SDL_GPU_SAMPLECOUNT_8 = 3
}
global SDL_GPUCubeMapFace: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_CUBEMAPFACE_POSITIVEX = 0,
  SDL_GPU_CUBEMAPFACE_NEGATIVEX = 1,
  SDL_GPU_CUBEMAPFACE_POSITIVEY = 2,
  SDL_GPU_CUBEMAPFACE_NEGATIVEY = 3,
  SDL_GPU_CUBEMAPFACE_POSITIVEZ = 4,
  SDL_GPU_CUBEMAPFACE_NEGATIVEZ = 5
}
global SDL_GPUBufferUsageFlags: type <cimport,nodecl> = @uint32
global SDL_GPUTransferBufferUsage: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD = 0,
  SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD = 1
}
global SDL_GPUShaderStage: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_SHADERSTAGE_VERTEX = 0,
  SDL_GPU_SHADERSTAGE_FRAGMENT = 1
}
global SDL_GPUShaderFormat: type <cimport,nodecl> = @uint32
global SDL_GPUVertexElementFormat: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_VERTEXELEMENTFORMAT_INVALID = 0,
  SDL_GPU_VERTEXELEMENTFORMAT_INT = 1,
  SDL_GPU_VERTEXELEMENTFORMAT_INT2 = 2,
  SDL_GPU_VERTEXELEMENTFORMAT_INT3 = 3,
  SDL_GPU_VERTEXELEMENTFORMAT_INT4 = 4,
  SDL_GPU_VERTEXELEMENTFORMAT_UINT = 5,
  SDL_GPU_VERTEXELEMENTFORMAT_UINT2 = 6,
  SDL_GPU_VERTEXELEMENTFORMAT_UINT3 = 7,
  SDL_GPU_VERTEXELEMENTFORMAT_UINT4 = 8,
  SDL_GPU_VERTEXELEMENTFORMAT_FLOAT = 9,
  SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2 = 10,
  SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3 = 11,
  SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4 = 12,
  SDL_GPU_VERTEXELEMENTFORMAT_BYTE2 = 13,
  SDL_GPU_VERTEXELEMENTFORMAT_BYTE4 = 14,
  SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2 = 15,
  SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4 = 16,
  SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM = 17,
  SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM = 18,
  SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM = 19,
  SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM = 20,
  SDL_GPU_VERTEXELEMENTFORMAT_SHORT2 = 21,
  SDL_GPU_VERTEXELEMENTFORMAT_SHORT4 = 22,
  SDL_GPU_VERTEXELEMENTFORMAT_USHORT2 = 23,
  SDL_GPU_VERTEXELEMENTFORMAT_USHORT4 = 24,
  SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM = 25,
  SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM = 26,
  SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM = 27,
  SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM = 28,
  SDL_GPU_VERTEXELEMENTFORMAT_HALF2 = 29,
  SDL_GPU_VERTEXELEMENTFORMAT_HALF4 = 30
}
global SDL_GPUVertexInputRate: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_VERTEXINPUTRATE_VERTEX = 0,
  SDL_GPU_VERTEXINPUTRATE_INSTANCE = 1
}
global SDL_GPUFillMode: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_FILLMODE_FILL = 0,
  SDL_GPU_FILLMODE_LINE = 1
}
global SDL_GPUCullMode: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_CULLMODE_NONE = 0,
  SDL_GPU_CULLMODE_FRONT = 1,
  SDL_GPU_CULLMODE_BACK = 2
}
global SDL_GPUFrontFace: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE = 0,
  SDL_GPU_FRONTFACE_CLOCKWISE = 1
}
global SDL_GPUCompareOp: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_COMPAREOP_INVALID = 0,
  SDL_GPU_COMPAREOP_NEVER = 1,
  SDL_GPU_COMPAREOP_LESS = 2,
  SDL_GPU_COMPAREOP_EQUAL = 3,
  SDL_GPU_COMPAREOP_LESS_OR_EQUAL = 4,
  SDL_GPU_COMPAREOP_GREATER = 5,
  SDL_GPU_COMPAREOP_NOT_EQUAL = 6,
  SDL_GPU_COMPAREOP_GREATER_OR_EQUAL = 7,
  SDL_GPU_COMPAREOP_ALWAYS = 8
}
global SDL_GPUStencilOp: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_STENCILOP_INVALID = 0,
  SDL_GPU_STENCILOP_KEEP = 1,
  SDL_GPU_STENCILOP_ZERO = 2,
  SDL_GPU_STENCILOP_REPLACE = 3,
  SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP = 4,
  SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP = 5,
  SDL_GPU_STENCILOP_INVERT = 6,
  SDL_GPU_STENCILOP_INCREMENT_AND_WRAP = 7,
  SDL_GPU_STENCILOP_DECREMENT_AND_WRAP = 8
}
global SDL_GPUBlendOp: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_BLENDOP_INVALID = 0,
  SDL_GPU_BLENDOP_ADD = 1,
  SDL_GPU_BLENDOP_SUBTRACT = 2,
  SDL_GPU_BLENDOP_REVERSE_SUBTRACT = 3,
  SDL_GPU_BLENDOP_MIN = 4,
  SDL_GPU_BLENDOP_MAX = 5
}
global SDL_GPUBlendFactor: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_BLENDFACTOR_INVALID = 0,
  SDL_GPU_BLENDFACTOR_ZERO = 1,
  SDL_GPU_BLENDFACTOR_ONE = 2,
  SDL_GPU_BLENDFACTOR_SRC_COLOR = 3,
  SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
  SDL_GPU_BLENDFACTOR_DST_COLOR = 5,
  SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR = 6,
  SDL_GPU_BLENDFACTOR_SRC_ALPHA = 7,
  SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 8,
  SDL_GPU_BLENDFACTOR_DST_ALPHA = 9,
  SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10,
  SDL_GPU_BLENDFACTOR_CONSTANT_COLOR = 11,
  SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR = 12,
  SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE = 13
}
global SDL_GPUColorComponentFlags: type <cimport,nodecl> = @uint8
global SDL_GPUFilter: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_FILTER_NEAREST = 0,
  SDL_GPU_FILTER_LINEAR = 1
}
global SDL_GPUSamplerMipmapMode: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_SAMPLERMIPMAPMODE_NEAREST = 0,
  SDL_GPU_SAMPLERMIPMAPMODE_LINEAR = 1
}
global SDL_GPUSamplerAddressMode: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_SAMPLERADDRESSMODE_REPEAT = 0,
  SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT = 1,
  SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE = 2
}
global SDL_GPUPresentMode: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_PRESENTMODE_VSYNC = 0,
  SDL_GPU_PRESENTMODE_IMMEDIATE = 1,
  SDL_GPU_PRESENTMODE_MAILBOX = 2
}
global SDL_GPUSwapchainComposition: type <cimport,nodecl,using> = @enum(cint){
  SDL_GPU_SWAPCHAINCOMPOSITION_SDR = 0,
  SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR = 1,
  SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR = 2,
  SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2084 = 3
}
global SDL_GPUViewport: type <cimport,nodecl> = @record{
  x: float32,
  y: float32,
  w: float32,
  h: float32,
  min_depth: float32,
  max_depth: float32
}
global SDL_GPUTextureTransferInfo: type <cimport,nodecl> = @record{
  transfer_buffer: *SDL_GPUTransferBuffer,
  offset: uint32,
  pixels_per_row: uint32,
  rows_per_layer: uint32
}
global SDL_GPUTransferBufferLocation: type <cimport,nodecl> = @record{
  transfer_buffer: *SDL_GPUTransferBuffer,
  offset: uint32
}
global SDL_GPUTextureLocation: type <cimport,nodecl> = @record{
  texture: *SDL_GPUTexture,
  mip_level: uint32,
  layer: uint32,
  x: uint32,
  y: uint32,
  z: uint32
}
global SDL_GPUTextureRegion: type <cimport,nodecl> = @record{
  texture: *SDL_GPUTexture,
  mip_level: uint32,
  layer: uint32,
  x: uint32,
  y: uint32,
  z: uint32,
  w: uint32,
  h: uint32,
  d: uint32
}
global SDL_GPUBlitRegion: type <cimport,nodecl> = @record{
  texture: *SDL_GPUTexture,
  mip_level: uint32,
  layer_or_depth_plane: uint32,
  x: uint32,
  y: uint32,
  w: uint32,
  h: uint32
}
global SDL_GPUBufferLocation: type <cimport,nodecl> = @record{
  buffer: *SDL_GPUBuffer,
  offset: uint32
}
global SDL_GPUBufferRegion: type <cimport,nodecl> = @record{
  buffer: *SDL_GPUBuffer,
  offset: uint32,
  size: uint32
}
global SDL_GPUIndirectDrawCommand: type <cimport,nodecl> = @record{
  num_vertices: uint32,
  num_instances: uint32,
  first_vertex: uint32,
  first_instance: uint32
}
global SDL_GPUIndexedIndirectDrawCommand: type <cimport,nodecl> = @record{
  num_indices: uint32,
  num_instances: uint32,
  first_index: uint32,
  vertex_offset: int32,
  first_instance: uint32
}
global SDL_GPUIndirectDispatchCommand: type <cimport,nodecl> = @record{
  groupcount_x: uint32,
  groupcount_y: uint32,
  groupcount_z: uint32
}
global SDL_GPUSamplerCreateInfo: type <cimport,nodecl> = @record{
  min_filter: SDL_GPUFilter,
  mag_filter: SDL_GPUFilter,
  mipmap_mode: SDL_GPUSamplerMipmapMode,
  address_mode_u: SDL_GPUSamplerAddressMode,
  address_mode_v: SDL_GPUSamplerAddressMode,
  address_mode_w: SDL_GPUSamplerAddressMode,
  mip_lod_bias: float32,
  max_anisotropy: float32,
  compare_op: SDL_GPUCompareOp,
  min_lod: float32,
  max_lod: float32,
  enable_anisotropy: boolean,
  enable_compare: boolean,
  padding1: uint8,
  padding2: uint8,
  props: SDL_PropertiesID
}
global SDL_GPUVertexBufferDescription: type <cimport,nodecl> = @record{
  slot: uint32,
  pitch: uint32,
  input_rate: SDL_GPUVertexInputRate,
  instance_step_rate: uint32
}
global SDL_GPUVertexAttribute: type <cimport,nodecl> = @record{
  location: uint32,
  buffer_slot: uint32,
  format: SDL_GPUVertexElementFormat,
  offset: uint32
}
global SDL_GPUVertexInputState: type <cimport,nodecl> = @record{
  vertex_buffer_descriptions: *SDL_GPUVertexBufferDescription,
  num_vertex_buffers: uint32,
  vertex_attributes: *SDL_GPUVertexAttribute,
  num_vertex_attributes: uint32
}
global SDL_GPUStencilOpState: type <cimport,nodecl> = @record{
  fail_op: SDL_GPUStencilOp,
  pass_op: SDL_GPUStencilOp,
  depth_fail_op: SDL_GPUStencilOp,
  compare_op: SDL_GPUCompareOp
}
global SDL_GPUColorTargetBlendState: type <cimport,nodecl> = @record{
  src_color_blendfactor: SDL_GPUBlendFactor,
  dst_color_blendfactor: SDL_GPUBlendFactor,
  color_blend_op: SDL_GPUBlendOp,
  src_alpha_blendfactor: SDL_GPUBlendFactor,
  dst_alpha_blendfactor: SDL_GPUBlendFactor,
  alpha_blend_op: SDL_GPUBlendOp,
  color_write_mask: SDL_GPUColorComponentFlags,
  enable_blend: boolean,
  enable_color_write_mask: boolean,
  padding1: uint8,
  padding2: uint8
}
global SDL_GPUShaderCreateInfo: type <cimport,nodecl> = @record{
  code_size: csize,
  code: *uint8,
  entrypoint: cstring,
  format: SDL_GPUShaderFormat,
  stage: SDL_GPUShaderStage,
  num_samplers: uint32,
  num_storage_textures: uint32,
  num_storage_buffers: uint32,
  num_uniform_buffers: uint32,
  props: SDL_PropertiesID
}
global SDL_GPUTextureCreateInfo: type <cimport,nodecl> = @record{
  type: SDL_GPUTextureType,
  format: SDL_GPUTextureFormat,
  usage: SDL_GPUTextureUsageFlags,
  width: uint32,
  height: uint32,
  layer_count_or_depth: uint32,
  num_levels: uint32,
  sample_count: SDL_GPUSampleCount,
  props: SDL_PropertiesID
}
global SDL_GPUBufferCreateInfo: type <cimport,nodecl> = @record{
  usage: SDL_GPUBufferUsageFlags,
  size: uint32,
  props: SDL_PropertiesID
}
global SDL_GPUTransferBufferCreateInfo: type <cimport,nodecl> = @record{
  usage: SDL_GPUTransferBufferUsage,
  size: uint32,
  props: SDL_PropertiesID
}
global SDL_GPURasterizerState: type <cimport,nodecl> = @record{
  fill_mode: SDL_GPUFillMode,
  cull_mode: SDL_GPUCullMode,
  front_face: SDL_GPUFrontFace,
  depth_bias_constant_factor: float32,
  depth_bias_clamp: float32,
  depth_bias_slope_factor: float32,
  enable_depth_bias: boolean,
  enable_depth_clip: boolean,
  padding1: uint8,
  padding2: uint8
}
global SDL_GPUMultisampleState: type <cimport,nodecl> = @record{
  sample_count: SDL_GPUSampleCount,
  sample_mask: uint32,
  enable_mask: boolean,
  padding1: uint8,
  padding2: uint8,
  padding3: uint8
}
global SDL_GPUDepthStencilState: type <cimport,nodecl> = @record{
  compare_op: SDL_GPUCompareOp,
  back_stencil_state: SDL_GPUStencilOpState,
  front_stencil_state: SDL_GPUStencilOpState,
  compare_mask: uint8,
  write_mask: uint8,
  enable_depth_test: boolean,
  enable_depth_write: boolean,
  enable_stencil_test: boolean,
  padding1: uint8,
  padding2: uint8,
  padding3: uint8
}
global SDL_GPUColorTargetDescription: type <cimport,nodecl> = @record{
  format: SDL_GPUTextureFormat,
  blend_state: SDL_GPUColorTargetBlendState
}
global SDL_GPUGraphicsPipelineTargetInfo: type <cimport,nodecl> = @record{
  color_target_descriptions: *SDL_GPUColorTargetDescription,
  num_color_targets: uint32,
  depth_stencil_format: SDL_GPUTextureFormat,
  has_depth_stencil_target: boolean,
  padding1: uint8,
  padding2: uint8,
  padding3: uint8
}
global SDL_GPUGraphicsPipelineCreateInfo: type <cimport,nodecl> = @record{
  vertex_shader: *SDL_GPUShader,
  fragment_shader: *SDL_GPUShader,
  vertex_input_state: SDL_GPUVertexInputState,
  primitive_type: SDL_GPUPrimitiveType,
  rasterizer_state: SDL_GPURasterizerState,
  multisample_state: SDL_GPUMultisampleState,
  depth_stencil_state: SDL_GPUDepthStencilState,
  target_info: SDL_GPUGraphicsPipelineTargetInfo,
  props: SDL_PropertiesID
}
global SDL_GPUComputePipelineCreateInfo: type <cimport,nodecl> = @record{
  code_size: csize,
  code: *uint8,
  entrypoint: cstring,
  format: SDL_GPUShaderFormat,
  num_samplers: uint32,
  num_readonly_storage_textures: uint32,
  num_readonly_storage_buffers: uint32,
  num_readwrite_storage_textures: uint32,
  num_readwrite_storage_buffers: uint32,
  num_uniform_buffers: uint32,
  threadcount_x: uint32,
  threadcount_y: uint32,
  threadcount_z: uint32,
  props: SDL_PropertiesID
}
global SDL_GPUColorTargetInfo: type <cimport,nodecl> = @record{
  texture: *SDL_GPUTexture,
  mip_level: uint32,
  layer_or_depth_plane: uint32,
  clear_color: SDL_FColor,
  load_op: SDL_GPULoadOp,
  store_op: SDL_GPUStoreOp,
  resolve_texture: *SDL_GPUTexture,
  resolve_mip_level: uint32,
  resolve_layer: uint32,
  cycle: boolean,
  cycle_resolve_texture: boolean,
  padding1: uint8,
  padding2: uint8
}
global SDL_GPUDepthStencilTargetInfo: type <cimport,nodecl> = @record{
  texture: *SDL_GPUTexture,
  clear_depth: float32,
  load_op: SDL_GPULoadOp,
  store_op: SDL_GPUStoreOp,
  stencil_load_op: SDL_GPULoadOp,
  stencil_store_op: SDL_GPUStoreOp,
  cycle: boolean,
  clear_stencil: uint8,
  padding1: uint8,
  padding2: uint8
}
global SDL_GPUBlitInfo: type <cimport,nodecl> = @record{
  source: SDL_GPUBlitRegion,
  destination: SDL_GPUBlitRegion,
  load_op: SDL_GPULoadOp,
  clear_color: SDL_FColor,
  flip_mode: SDL_FlipMode,
  filter: SDL_GPUFilter,
  cycle: boolean,
  padding1: uint8,
  padding2: uint8,
  padding3: uint8
}
global SDL_GPUBufferBinding: type <cimport,nodecl> = @record{
  buffer: *SDL_GPUBuffer,
  offset: uint32
}
global SDL_GPUTextureSamplerBinding: type <cimport,nodecl> = @record{
  texture: *SDL_GPUTexture,
  sampler: *SDL_GPUSampler
}
global SDL_GPUStorageBufferReadWriteBinding: type <cimport,nodecl> = @record{
  buffer: *SDL_GPUBuffer,
  cycle: boolean,
  padding1: uint8,
  padding2: uint8,
  padding3: uint8
}
global SDL_GPUStorageTextureReadWriteBinding: type <cimport,nodecl> = @record{
  texture: *SDL_GPUTexture,
  mip_level: uint32,
  layer: uint32,
  cycle: boolean,
  padding1: uint8,
  padding2: uint8,
  padding3: uint8
}
global SDL_Haptic: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_HapticDirection: type <cimport,nodecl> = @record{
  type: uint8,
  dir: [3]int32
}
global SDL_HapticConstant: type <cimport,nodecl> = @record{
  type: uint16,
  direction: SDL_HapticDirection,
  length: uint32,
  delay: uint16,
  button: uint16,
  interval: uint16,
  level: int16,
  attack_length: uint16,
  attack_level: uint16,
  fade_length: uint16,
  fade_level: uint16
}
global SDL_HapticPeriodic: type <cimport,nodecl> = @record{
  type: uint16,
  direction: SDL_HapticDirection,
  length: uint32,
  delay: uint16,
  button: uint16,
  interval: uint16,
  period: uint16,
  magnitude: int16,
  offset: int16,
  phase: uint16,
  attack_length: uint16,
  attack_level: uint16,
  fade_length: uint16,
  fade_level: uint16
}
global SDL_HapticCondition: type <cimport,nodecl> = @record{
  type: uint16,
  direction: SDL_HapticDirection,
  length: uint32,
  delay: uint16,
  button: uint16,
  interval: uint16,
  right_sat: [3]uint16,
  left_sat: [3]uint16,
  right_coeff: [3]int16,
  left_coeff: [3]int16,
  deadband: [3]uint16,
  center: [3]int16
}
global SDL_HapticRamp: type <cimport,nodecl> = @record{
  type: uint16,
  direction: SDL_HapticDirection,
  length: uint32,
  delay: uint16,
  button: uint16,
  interval: uint16,
  start: int16,
  end_: int16,
  attack_length: uint16,
  attack_level: uint16,
  fade_length: uint16,
  fade_level: uint16
}
global SDL_HapticLeftRight: type <cimport,nodecl> = @record{
  type: uint16,
  length: uint32,
  large_magnitude: uint16,
  small_magnitude: uint16
}
global SDL_HapticCustom: type <cimport,nodecl> = @record{
  type: uint16,
  direction: SDL_HapticDirection,
  length: uint32,
  delay: uint16,
  button: uint16,
  interval: uint16,
  channels: uint8,
  period: uint16,
  samples: uint16,
  data: *uint16,
  attack_length: uint16,
  attack_level: uint16,
  fade_length: uint16,
  fade_level: uint16
}
global SDL_HapticEffect: type <cimport,nodecl> = @union{
  type: uint16,
  constant: SDL_HapticConstant,
  periodic: SDL_HapticPeriodic,
  condition: SDL_HapticCondition,
  ramp: SDL_HapticRamp,
  leftright: SDL_HapticLeftRight,
  custom: SDL_HapticCustom
}
global SDL_HapticID: type <cimport,nodecl> = @uint32
global SDL_hid_device: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_hid_bus_type: type <cimport,nodecl,using> = @enum(cint){
  SDL_HID_API_BUS_UNKNOWN = 0,
  SDL_HID_API_BUS_USB = 1,
  SDL_HID_API_BUS_BLUETOOTH = 2,
  SDL_HID_API_BUS_I2C = 3,
  SDL_HID_API_BUS_SPI = 4
}
global SDL_hid_device_info: type <cimport,nodecl> = @record{
  path: cstring,
  vendor_id: cushort,
  product_id: cushort,
  serial_number: *cwchar_t,
  release_number: cushort,
  manufacturer_string: *cwchar_t,
  product_string: *cwchar_t,
  usage_page: cushort,
  usage: cushort,
  interface_number: cint,
  interface_class: cint,
  interface_subclass: cint,
  interface_protocol: cint,
  bus_type: SDL_hid_bus_type,
  next: *SDL_hid_device_info
}
global SDL_HintPriority: type <cimport,nodecl,using> = @enum(cint){
  SDL_HINT_DEFAULT = 0,
  SDL_HINT_NORMAL = 1,
  SDL_HINT_OVERRIDE = 2
}
global SDL_HintCallback: type <cimport,nodecl> = @function(userdata: pointer, name: cstring, oldValue: cstring, newValue: cstring): void
global SDL_InitFlags: type <cimport,nodecl> = @uint32
global SDL_AppResult: type <cimport,nodecl,using> = @enum(cint){
  SDL_APP_CONTINUE = 0,
  SDL_APP_SUCCESS = 1,
  SDL_APP_FAILURE = 2
}
global SDL_AppInit_func: type <cimport,nodecl> = @function(appstate: *pointer, argc: cint, argv: *[0]cstring): SDL_AppResult
global SDL_AppIterate_func: type <cimport,nodecl> = @function(appstate: pointer): SDL_AppResult
global SDL_AppEvent_func: type <cimport,nodecl> = @function(appstate: pointer, event: *SDL_Event): SDL_AppResult
global SDL_AppQuit_func: type <cimport,nodecl> = @function(appstate: pointer, result: SDL_AppResult): void
global SDL_MainThreadCallback: type <cimport,nodecl> = @function(userdata: pointer): void
global SDL_SharedObject: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_Locale: type <cimport,nodecl> = @record{
  language: cstring,
  country: cstring
}
global SDL_LogCategory: type <cimport,nodecl,using> = @enum(cint){
  SDL_LOG_CATEGORY_APPLICATION = 0,
  SDL_LOG_CATEGORY_ERROR = 1,
  SDL_LOG_CATEGORY_ASSERT = 2,
  SDL_LOG_CATEGORY_SYSTEM = 3,
  SDL_LOG_CATEGORY_AUDIO = 4,
  SDL_LOG_CATEGORY_VIDEO = 5,
  SDL_LOG_CATEGORY_RENDER = 6,
  SDL_LOG_CATEGORY_INPUT = 7,
  SDL_LOG_CATEGORY_TEST = 8,
  SDL_LOG_CATEGORY_GPU = 9,
  SDL_LOG_CATEGORY_RESERVED2 = 10,
  SDL_LOG_CATEGORY_RESERVED3 = 11,
  SDL_LOG_CATEGORY_RESERVED4 = 12,
  SDL_LOG_CATEGORY_RESERVED5 = 13,
  SDL_LOG_CATEGORY_RESERVED6 = 14,
  SDL_LOG_CATEGORY_RESERVED7 = 15,
  SDL_LOG_CATEGORY_RESERVED8 = 16,
  SDL_LOG_CATEGORY_RESERVED9 = 17,
  SDL_LOG_CATEGORY_RESERVED10 = 18,
  SDL_LOG_CATEGORY_CUSTOM = 19
}
global SDL_LogPriority: type <cimport,nodecl,using> = @enum(cint){
  SDL_LOG_PRIORITY_INVALID = 0,
  SDL_LOG_PRIORITY_TRACE = 1,
  SDL_LOG_PRIORITY_VERBOSE = 2,
  SDL_LOG_PRIORITY_DEBUG = 3,
  SDL_LOG_PRIORITY_INFO = 4,
  SDL_LOG_PRIORITY_WARN = 5,
  SDL_LOG_PRIORITY_ERROR = 6,
  SDL_LOG_PRIORITY_CRITICAL = 7,
  SDL_LOG_PRIORITY_COUNT = 8
}
global SDL_LogOutputFunction: type <cimport,nodecl> = @function(userdata: pointer, category: cint, priority: SDL_LogPriority, message: cstring): void
global SDL_MessageBoxFlags: type <cimport,nodecl> = @uint32
global SDL_MessageBoxButtonFlags: type <cimport,nodecl> = @uint32
global SDL_MessageBoxButtonData: type <cimport,nodecl> = @record{
  flags: SDL_MessageBoxButtonFlags,
  buttonID: cint,
  text: cstring
}
global SDL_MessageBoxColor: type <cimport,nodecl> = @record{
  r: uint8,
  g: uint8,
  b: uint8
}
global SDL_MessageBoxColorType: type <cimport,nodecl,using> = @enum(cint){
  SDL_MESSAGEBOX_COLOR_BACKGROUND = 0,
  SDL_MESSAGEBOX_COLOR_TEXT = 1,
  SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2,
  SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3,
  SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4,
  SDL_MESSAGEBOX_COLOR_COUNT = 5
}
global SDL_MessageBoxColorScheme: type <cimport,nodecl> = @record{
  colors: [5]SDL_MessageBoxColor
}
global SDL_MessageBoxData: type <cimport,nodecl> = @record{
  flags: SDL_MessageBoxFlags,
  window: *SDL_Window,
  title: cstring,
  message: cstring,
  numbuttons: cint,
  buttons: *SDL_MessageBoxButtonData,
  colorScheme: *SDL_MessageBoxColorScheme
}
global SDL_MetalView: type <cimport,nodecl> = @pointer
global SDL_Process: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_ProcessIO: type <cimport,nodecl,using> = @enum(cint){
  SDL_PROCESS_STDIO_INHERITED = 0,
  SDL_PROCESS_STDIO_NULL = 1,
  SDL_PROCESS_STDIO_APP = 2,
  SDL_PROCESS_STDIO_REDIRECT = 3
}
global SDL_Vertex: type <cimport,nodecl> = @record{
  position: SDL_FPoint,
  color: SDL_FColor,
  tex_coord: SDL_FPoint
}
global SDL_TextureAccess: type <cimport,nodecl,using> = @enum(cint){
  SDL_TEXTUREACCESS_STATIC = 0,
  SDL_TEXTUREACCESS_STREAMING = 1,
  SDL_TEXTUREACCESS_TARGET = 2
}
global SDL_RendererLogicalPresentation: type <cimport,nodecl,using> = @enum(cint){
  SDL_LOGICAL_PRESENTATION_DISABLED = 0,
  SDL_LOGICAL_PRESENTATION_STRETCH = 1,
  SDL_LOGICAL_PRESENTATION_LETTERBOX = 2,
  SDL_LOGICAL_PRESENTATION_OVERSCAN = 3,
  SDL_LOGICAL_PRESENTATION_INTEGER_SCALE = 4
}
global SDL_Renderer: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_Texture: type <cimport,nodecl> = @record{
  format: SDL_PixelFormat,
  w: cint,
  h: cint,
  refcount: cint
}
global SDL_StorageInterface: type <cimport,nodecl> = @record{
  version: uint32,
  close: function(userdata: pointer): boolean,
  ready: function(userdata: pointer): boolean,
  enumerate: function(userdata: pointer, path: cstring, callback: SDL_EnumerateDirectoryCallback, callback_userdata: pointer): boolean,
  info: function(userdata: pointer, path: cstring, info: *SDL_PathInfo): boolean,
  read_file: function(userdata: pointer, path: cstring, destination: pointer, length: uint64): boolean,
  write_file: function(userdata: pointer, path: cstring, source: pointer, length: uint64): boolean,
  mkdir: function(userdata: pointer, path: cstring): boolean,
  remove: function(userdata: pointer, path: cstring): boolean,
  rename: function(userdata: pointer, oldpath: cstring, newpath: cstring): boolean,
  copy: function(userdata: pointer, oldpath: cstring, newpath: cstring): boolean,
  space_remaining: function(userdata: pointer): uint64
}
global SDL_Storage: type <cimport,nodecl,forwarddecl> = @record{}
global MSG: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_WindowsMessageHook: type <cimport,nodecl> = @function(userdata: pointer, msg: *MSG): boolean
global XEvent: type <cimport,nodecl,forwarddecl> = @union{}
global SDL_X11EventHook: type <cimport,nodecl> = @function(userdata: pointer, xevent: *XEvent): boolean
global SDL_Sandbox: type <cimport,nodecl,using> = @enum(cint){
  SDL_SANDBOX_NONE = 0,
  SDL_SANDBOX_UNKNOWN_CONTAINER = 1,
  SDL_SANDBOX_FLATPAK = 2,
  SDL_SANDBOX_SNAP = 3,
  SDL_SANDBOX_MACOS = 4
}
global SDL_DateTime: type <cimport,nodecl> = @record{
  year: cint,
  month: cint,
  day: cint,
  hour: cint,
  minute: cint,
  second: cint,
  nanosecond: cint,
  day_of_week: cint,
  utc_offset: cint
}
global SDL_DateFormat: type <cimport,nodecl,using> = @enum(cint){
  SDL_DATE_FORMAT_YYYYMMDD = 0,
  SDL_DATE_FORMAT_DDMMYYYY = 1,
  SDL_DATE_FORMAT_MMDDYYYY = 2
}
global SDL_TimeFormat: type <cimport,nodecl,using> = @enum(cint){
  SDL_TIME_FORMAT_24HR = 0,
  SDL_TIME_FORMAT_12HR = 1
}
global SDL_TimerID: type <cimport,nodecl> = @uint32
global SDL_TimerCallback: type <cimport,nodecl> = @function(userdata: pointer, timerID: SDL_TimerID, interval: uint32): uint32
global SDL_NSTimerCallback: type <cimport,nodecl> = @function(userdata: pointer, timerID: SDL_TimerID, interval: uint64): uint64
global SDL_Tray: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_TrayMenu: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_TrayEntry: type <cimport,nodecl,forwarddecl> = @record{}
global SDL_TrayEntryFlags: type <cimport,nodecl> = @uint32
global SDL_TrayCallback: type <cimport,nodecl> = @function(userdata: pointer, entry: *SDL_TrayEntry): void
global function memset(_Dst: pointer, _Val: cint, _Size: csize): pointer <cimport,nodecl> end
global function memmove(_Dst: pointer, _Src: pointer, _MaxCount: csize): pointer <cimport,nodecl> end
global function memcpy(_Dst: pointer, _Src: pointer, _MaxCount: csize): pointer <cimport,nodecl> end
global function SDL_malloc(size: csize): pointer <cimport,nodecl> end
global function SDL_calloc(nmemb: csize, size: csize): pointer <cimport,nodecl> end
global function SDL_realloc(mem: pointer, size: csize): pointer <cimport,nodecl> end
global function SDL_free(mem: pointer): void <cimport,nodecl> end
global function SDL_GetOriginalMemoryFunctions(malloc_func: *SDL_malloc_func, calloc_func: *SDL_calloc_func, realloc_func: *SDL_realloc_func, free_func: *SDL_free_func): void <cimport,nodecl> end
global function SDL_GetMemoryFunctions(malloc_func: *SDL_malloc_func, calloc_func: *SDL_calloc_func, realloc_func: *SDL_realloc_func, free_func: *SDL_free_func): void <cimport,nodecl> end
global function SDL_SetMemoryFunctions(malloc_func: SDL_malloc_func, calloc_func: SDL_calloc_func, realloc_func: SDL_realloc_func, free_func: SDL_free_func): boolean <cimport,nodecl> end
global function SDL_aligned_alloc(alignment: csize, size: csize): pointer <cimport,nodecl> end
global function SDL_aligned_free(mem: pointer): void <cimport,nodecl> end
global function SDL_GetNumAllocations(): cint <cimport,nodecl> end
global function SDL_GetEnvironment(): *SDL_Environment <cimport,nodecl> end
global function SDL_CreateEnvironment(populated: boolean): *SDL_Environment <cimport,nodecl> end
global function SDL_GetEnvironmentVariable(env: *SDL_Environment, name: cstring): cstring <cimport,nodecl> end
global function SDL_GetEnvironmentVariables(env: *SDL_Environment): *cstring <cimport,nodecl> end
global function SDL_SetEnvironmentVariable(env: *SDL_Environment, name: cstring, value: cstring, overwrite: boolean): boolean <cimport,nodecl> end
global function SDL_UnsetEnvironmentVariable(env: *SDL_Environment, name: cstring): boolean <cimport,nodecl> end
global function SDL_DestroyEnvironment(env: *SDL_Environment): void <cimport,nodecl> end
global function SDL_getenv(name: cstring): cstring <cimport,nodecl> end
global function SDL_getenv_unsafe(name: cstring): cstring <cimport,nodecl> end
global function SDL_setenv_unsafe(name: cstring, value: cstring, overwrite: cint): cint <cimport,nodecl> end
global function SDL_unsetenv_unsafe(name: cstring): cint <cimport,nodecl> end
global function SDL_qsort(base: pointer, nmemb: csize, size: csize, compare: SDL_CompareCallback): void <cimport,nodecl> end
global function SDL_bsearch(key: pointer, base: pointer, nmemb: csize, size: csize, compare: SDL_CompareCallback): pointer <cimport,nodecl> end
global function SDL_qsort_r(base: pointer, nmemb: csize, size: csize, compare: SDL_CompareCallback_r, userdata: pointer): void <cimport,nodecl> end
global function SDL_bsearch_r(key: pointer, base: pointer, nmemb: csize, size: csize, compare: SDL_CompareCallback_r, userdata: pointer): pointer <cimport,nodecl> end
global function SDL_abs(x: cint): cint <cimport,nodecl> end
global function SDL_isalpha(x: cint): cint <cimport,nodecl> end
global function SDL_isalnum(x: cint): cint <cimport,nodecl> end
global function SDL_isblank(x: cint): cint <cimport,nodecl> end
global function SDL_iscntrl(x: cint): cint <cimport,nodecl> end
global function SDL_isdigit(x: cint): cint <cimport,nodecl> end
global function SDL_isxdigit(x: cint): cint <cimport,nodecl> end
global function SDL_ispunct(x: cint): cint <cimport,nodecl> end
global function SDL_isspace(x: cint): cint <cimport,nodecl> end
global function SDL_isupper(x: cint): cint <cimport,nodecl> end
global function SDL_islower(x: cint): cint <cimport,nodecl> end
global function SDL_isprint(x: cint): cint <cimport,nodecl> end
global function SDL_isgraph(x: cint): cint <cimport,nodecl> end
global function SDL_toupper(x: cint): cint <cimport,nodecl> end
global function SDL_tolower(x: cint): cint <cimport,nodecl> end
global function SDL_crc16(crc: uint16, data: pointer, len: csize): uint16 <cimport,nodecl> end
global function SDL_crc32(crc: uint32, data: pointer, len: csize): uint32 <cimport,nodecl> end
global function SDL_murmur3_32(data: pointer, len: csize, seed: uint32): uint32 <cimport,nodecl> end
global function SDL_memcpy(dst: pointer, src: pointer, len: csize): pointer <cimport,nodecl> end
global function SDL_memmove(dst: pointer, src: pointer, len: csize): pointer <cimport,nodecl> end
global function SDL_memset(dst: pointer, c: cint, len: csize): pointer <cimport,nodecl> end
global function SDL_memset4(dst: pointer, val: uint32, dwords: csize): pointer <cimport,nodecl> end
global function SDL_memcmp(s1: pointer, s2: pointer, len: csize): cint <cimport,nodecl> end
global function SDL_wcslen(wstr: *cwchar_t): csize <cimport,nodecl> end
global function SDL_wcsnlen(wstr: *cwchar_t, maxlen: csize): csize <cimport,nodecl> end
global function SDL_wcslcpy(dst: *cwchar_t, src: *cwchar_t, maxlen: csize): csize <cimport,nodecl> end
global function SDL_wcslcat(dst: *cwchar_t, src: *cwchar_t, maxlen: csize): csize <cimport,nodecl> end
global function SDL_wcsdup(wstr: *cwchar_t): *cwchar_t <cimport,nodecl> end
global function SDL_wcsstr(haystack: *cwchar_t, needle: *cwchar_t): *cwchar_t <cimport,nodecl> end
global function SDL_wcsnstr(haystack: *cwchar_t, needle: *cwchar_t, maxlen: csize): *cwchar_t <cimport,nodecl> end
global function SDL_wcscmp(str1: *cwchar_t, str2: *cwchar_t): cint <cimport,nodecl> end
global function SDL_wcsncmp(str1: *cwchar_t, str2: *cwchar_t, maxlen: csize): cint <cimport,nodecl> end
global function SDL_wcscasecmp(str1: *cwchar_t, str2: *cwchar_t): cint <cimport,nodecl> end
global function SDL_wcsncasecmp(str1: *cwchar_t, str2: *cwchar_t, maxlen: csize): cint <cimport,nodecl> end
global function SDL_wcstol(str: *cwchar_t, endp: **cwchar_t, base: cint): clong <cimport,nodecl> end
global function SDL_strlen(str: cstring): csize <cimport,nodecl> end
global function SDL_strnlen(str: cstring, maxlen: csize): csize <cimport,nodecl> end
global function SDL_strlcpy(dst: cstring, src: cstring, maxlen: csize): csize <cimport,nodecl> end
global function SDL_utf8strlcpy(dst: cstring, src: cstring, dst_bytes: csize): csize <cimport,nodecl> end
global function SDL_strlcat(dst: cstring, src: cstring, maxlen: csize): csize <cimport,nodecl> end
global function SDL_strdup(str: cstring): cstring <cimport,nodecl> end
global function SDL_strndup(str: cstring, maxlen: csize): cstring <cimport,nodecl> end
global function SDL_strrev(str: cstring): cstring <cimport,nodecl> end
global function SDL_strupr(str: cstring): cstring <cimport,nodecl> end
global function SDL_strlwr(str: cstring): cstring <cimport,nodecl> end
global function SDL_strchr(str: cstring, c: cint): cstring <cimport,nodecl> end
global function SDL_strrchr(str: cstring, c: cint): cstring <cimport,nodecl> end
global function SDL_strstr(haystack: cstring, needle: cstring): cstring <cimport,nodecl> end
global function SDL_strnstr(haystack: cstring, needle: cstring, maxlen: csize): cstring <cimport,nodecl> end
global function SDL_strcasestr(haystack: cstring, needle: cstring): cstring <cimport,nodecl> end
global function SDL_strtok_r(str: cstring, delim: cstring, saveptr: *cstring): cstring <cimport,nodecl> end
global function SDL_utf8strlen(str: cstring): csize <cimport,nodecl> end
global function SDL_utf8strnlen(str: cstring, bytes: csize): csize <cimport,nodecl> end
global function SDL_itoa(value: cint, str: cstring, radix: cint): cstring <cimport,nodecl> end
global function SDL_uitoa(value: cuint, str: cstring, radix: cint): cstring <cimport,nodecl> end
global function SDL_ltoa(value: clong, str: cstring, radix: cint): cstring <cimport,nodecl> end
global function SDL_ultoa(value: culong, str: cstring, radix: cint): cstring <cimport,nodecl> end
global function SDL_lltoa(value: clonglong, str: cstring, radix: cint): cstring <cimport,nodecl> end
global function SDL_ulltoa(value: culonglong, str: cstring, radix: cint): cstring <cimport,nodecl> end
global function SDL_atoi(str: cstring): cint <cimport,nodecl> end
global function SDL_atof(str: cstring): float64 <cimport,nodecl> end
global function SDL_strtol(str: cstring, endp: *cstring, base: cint): clong <cimport,nodecl> end
global function SDL_strtoul(str: cstring, endp: *cstring, base: cint): culong <cimport,nodecl> end
global function SDL_strtoll(str: cstring, endp: *cstring, base: cint): clonglong <cimport,nodecl> end
global function SDL_strtoull(str: cstring, endp: *cstring, base: cint): culonglong <cimport,nodecl> end
global function SDL_strtod(str: cstring, endp: *cstring): float64 <cimport,nodecl> end
global function SDL_strcmp(str1: cstring, str2: cstring): cint <cimport,nodecl> end
global function SDL_strncmp(str1: cstring, str2: cstring, maxlen: csize): cint <cimport,nodecl> end
global function SDL_strcasecmp(str1: cstring, str2: cstring): cint <cimport,nodecl> end
global function SDL_strncasecmp(str1: cstring, str2: cstring, maxlen: csize): cint <cimport,nodecl> end
global function SDL_strpbrk(str: cstring, breakset: cstring): cstring <cimport,nodecl> end
global function SDL_StepUTF8(pstr: *cstring, pslen: *csize): uint32 <cimport,nodecl> end
global function SDL_StepBackUTF8(start: cstring, pstr: *cstring): uint32 <cimport,nodecl> end
global function SDL_UCS4ToUTF8(codepoint: uint32, dst: cstring): cstring <cimport,nodecl> end
global function SDL_sscanf(text: cstring, fmt: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function SDL_vsscanf(text: cstring, fmt: cstring, ap: cvalist): cint <cimport,nodecl> end
global function SDL_snprintf(text: cstring, maxlen: csize, fmt: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function SDL_swprintf(text: *cwchar_t, maxlen: csize, fmt: *cwchar_t, ...: cvarargs): cint <cimport,nodecl> end
global function SDL_vsnprintf(text: cstring, maxlen: csize, fmt: cstring, ap: cvalist): cint <cimport,nodecl> end
global function SDL_vswprintf(text: *cwchar_t, maxlen: csize, fmt: *cwchar_t, ap: cvalist): cint <cimport,nodecl> end
global function SDL_asprintf(strp: *cstring, fmt: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function SDL_vasprintf(strp: *cstring, fmt: cstring, ap: cvalist): cint <cimport,nodecl> end
global function SDL_srand(seed: uint64): void <cimport,nodecl> end
global function SDL_rand(n: int32): int32 <cimport,nodecl> end
global function SDL_randf(): float32 <cimport,nodecl> end
global function SDL_rand_bits(): uint32 <cimport,nodecl> end
global function SDL_rand_r(state: *uint64, n: int32): int32 <cimport,nodecl> end
global function SDL_randf_r(state: *uint64): float32 <cimport,nodecl> end
global function SDL_rand_bits_r(state: *uint64): uint32 <cimport,nodecl> end
global function SDL_acos(x: float64): float64 <cimport,nodecl> end
global function SDL_acosf(x: float32): float32 <cimport,nodecl> end
global function SDL_asin(x: float64): float64 <cimport,nodecl> end
global function SDL_asinf(x: float32): float32 <cimport,nodecl> end
global function SDL_atan(x: float64): float64 <cimport,nodecl> end
global function SDL_atanf(x: float32): float32 <cimport,nodecl> end
global function SDL_atan2(y: float64, x: float64): float64 <cimport,nodecl> end
global function SDL_atan2f(y: float32, x: float32): float32 <cimport,nodecl> end
global function SDL_ceil(x: float64): float64 <cimport,nodecl> end
global function SDL_ceilf(x: float32): float32 <cimport,nodecl> end
global function SDL_copysign(x: float64, y: float64): float64 <cimport,nodecl> end
global function SDL_copysignf(x: float32, y: float32): float32 <cimport,nodecl> end
global function SDL_cos(x: float64): float64 <cimport,nodecl> end
global function SDL_cosf(x: float32): float32 <cimport,nodecl> end
global function SDL_exp(x: float64): float64 <cimport,nodecl> end
global function SDL_expf(x: float32): float32 <cimport,nodecl> end
global function SDL_fabs(x: float64): float64 <cimport,nodecl> end
global function SDL_fabsf(x: float32): float32 <cimport,nodecl> end
global function SDL_floor(x: float64): float64 <cimport,nodecl> end
global function SDL_floorf(x: float32): float32 <cimport,nodecl> end
global function SDL_trunc(x: float64): float64 <cimport,nodecl> end
global function SDL_truncf(x: float32): float32 <cimport,nodecl> end
global function SDL_fmod(x: float64, y: float64): float64 <cimport,nodecl> end
global function SDL_fmodf(x: float32, y: float32): float32 <cimport,nodecl> end
global function SDL_isinf(x: float64): cint <cimport,nodecl> end
global function SDL_isinff(x: float32): cint <cimport,nodecl> end
global function SDL_isnan(x: float64): cint <cimport,nodecl> end
global function SDL_isnanf(x: float32): cint <cimport,nodecl> end
global function SDL_log(x: float64): float64 <cimport,nodecl> end
global function SDL_logf(x: float32): float32 <cimport,nodecl> end
global function SDL_log10(x: float64): float64 <cimport,nodecl> end
global function SDL_log10f(x: float32): float32 <cimport,nodecl> end
global function SDL_modf(x: float64, y: *float64): float64 <cimport,nodecl> end
global function SDL_modff(x: float32, y: *float32): float32 <cimport,nodecl> end
global function SDL_pow(x: float64, y: float64): float64 <cimport,nodecl> end
global function SDL_powf(x: float32, y: float32): float32 <cimport,nodecl> end
global function SDL_round(x: float64): float64 <cimport,nodecl> end
global function SDL_roundf(x: float32): float32 <cimport,nodecl> end
global function SDL_lround(x: float64): clong <cimport,nodecl> end
global function SDL_lroundf(x: float32): clong <cimport,nodecl> end
global function SDL_scalbn(x: float64, n: cint): float64 <cimport,nodecl> end
global function SDL_scalbnf(x: float32, n: cint): float32 <cimport,nodecl> end
global function SDL_sin(x: float64): float64 <cimport,nodecl> end
global function SDL_sinf(x: float32): float32 <cimport,nodecl> end
global function SDL_sqrt(x: float64): float64 <cimport,nodecl> end
global function SDL_sqrtf(x: float32): float32 <cimport,nodecl> end
global function SDL_tan(x: float64): float64 <cimport,nodecl> end
global function SDL_tanf(x: float32): float32 <cimport,nodecl> end
global function SDL_iconv_open(tocode: cstring, fromcode: cstring): SDL_iconv_t <cimport,nodecl> end
global function SDL_iconv_close(cd: SDL_iconv_t): cint <cimport,nodecl> end
global function SDL_iconv(cd: SDL_iconv_t, inbuf: *cstring, inbytesleft: *csize, outbuf: *cstring, outbytesleft: *csize): csize <cimport,nodecl> end
global function SDL_iconv_string(tocode: cstring, fromcode: cstring, inbuf: cstring, inbytesleft: csize): cstring <cimport,nodecl> end
global function SDL_size_mul_check_overflow(a: csize, b: csize, ret: *csize): boolean <cimport,nodecl> end
global function SDL_size_mul_check_overflow_builtin(a: csize, b: csize, ret: *csize): boolean <cimport,nodecl> end
global function SDL_size_add_check_overflow(a: csize, b: csize, ret: *csize): boolean <cimport,nodecl> end
global function SDL_size_add_check_overflow_builtin(a: csize, b: csize, ret: *csize): boolean <cimport,nodecl> end
global function SDL_ReportAssertion(data: *SDL_AssertData, func: cstring, file: cstring, line: cint): SDL_AssertState <cimport,nodecl> end
global function SDL_SetAssertionHandler(handler: SDL_AssertionHandler, userdata: pointer): void <cimport,nodecl> end
global function SDL_GetDefaultAssertionHandler(): SDL_AssertionHandler <cimport,nodecl> end
global function SDL_GetAssertionHandler(puserdata: *pointer): SDL_AssertionHandler <cimport,nodecl> end
global function SDL_GetAssertionReport(): *SDL_AssertData <cimport,nodecl> end
global function SDL_ResetAssertionReport(): void <cimport,nodecl> end
global function SDL_AsyncIOFromFile(file: cstring, mode: cstring): *SDL_AsyncIO <cimport,nodecl> end
global function SDL_GetAsyncIOSize(asyncio: *SDL_AsyncIO): int64 <cimport,nodecl> end
global function SDL_ReadAsyncIO(asyncio: *SDL_AsyncIO, ptr: pointer, offset: uint64, size: uint64, queue: *SDL_AsyncIOQueue, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_WriteAsyncIO(asyncio: *SDL_AsyncIO, ptr: pointer, offset: uint64, size: uint64, queue: *SDL_AsyncIOQueue, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_CloseAsyncIO(asyncio: *SDL_AsyncIO, flush: boolean, queue: *SDL_AsyncIOQueue, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_CreateAsyncIOQueue(): *SDL_AsyncIOQueue <cimport,nodecl> end
global function SDL_DestroyAsyncIOQueue(queue: *SDL_AsyncIOQueue): void <cimport,nodecl> end
global function SDL_GetAsyncIOResult(queue: *SDL_AsyncIOQueue, outcome: *SDL_AsyncIOOutcome): boolean <cimport,nodecl> end
global function SDL_WaitAsyncIOResult(queue: *SDL_AsyncIOQueue, outcome: *SDL_AsyncIOOutcome, timeoutMS: int32): boolean <cimport,nodecl> end
global function SDL_SignalAsyncIOQueue(queue: *SDL_AsyncIOQueue): void <cimport,nodecl> end
global function SDL_LoadFileAsync(file: cstring, queue: *SDL_AsyncIOQueue, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_TryLockSpinlock(lock: *SDL_SpinLock): boolean <cimport,nodecl> end
global function SDL_LockSpinlock(lock: *SDL_SpinLock): void <cimport,nodecl> end
global function SDL_UnlockSpinlock(lock: *SDL_SpinLock): void <cimport,nodecl> end
global function SDL_MemoryBarrierReleaseFunction(): void <cimport,nodecl> end
global function SDL_MemoryBarrierAcquireFunction(): void <cimport,nodecl> end
global function SDL_CompareAndSwapAtomicInt(a: *SDL_AtomicInt, oldval: cint, newval: cint): boolean <cimport,nodecl> end
global function SDL_SetAtomicInt(a: *SDL_AtomicInt, v: cint): cint <cimport,nodecl> end
global function SDL_GetAtomicInt(a: *SDL_AtomicInt): cint <cimport,nodecl> end
global function SDL_AddAtomicInt(a: *SDL_AtomicInt, v: cint): cint <cimport,nodecl> end
global function SDL_CompareAndSwapAtomicU32(a: *SDL_AtomicU32, oldval: uint32, newval: uint32): boolean <cimport,nodecl> end
global function SDL_SetAtomicU32(a: *SDL_AtomicU32, v: uint32): uint32 <cimport,nodecl> end
global function SDL_GetAtomicU32(a: *SDL_AtomicU32): uint32 <cimport,nodecl> end
global function SDL_CompareAndSwapAtomicPointer(a: *pointer, oldval: pointer, newval: pointer): boolean <cimport,nodecl> end
global function SDL_SetAtomicPointer(a: *pointer, v: pointer): pointer <cimport,nodecl> end
global function SDL_GetAtomicPointer(a: *pointer): pointer <cimport,nodecl> end
global function SDL_SwapFloat(x: float32): float32 <cimport,nodecl> end
global function SDL_SetError(fmt: cstring, ...: cvarargs): boolean <cimport,nodecl> end
global function SDL_SetErrorV(fmt: cstring, ap: cvalist): boolean <cimport,nodecl> end
global function SDL_OutOfMemory(): boolean <cimport,nodecl> end
global function SDL_GetError(): cstring <cimport,nodecl> end
global function SDL_ClearError(): boolean <cimport,nodecl> end
global function SDL_GetGlobalProperties(): SDL_PropertiesID <cimport,nodecl> end
global function SDL_CreateProperties(): SDL_PropertiesID <cimport,nodecl> end
global function SDL_CopyProperties(src: SDL_PropertiesID, dst: SDL_PropertiesID): boolean <cimport,nodecl> end
global function SDL_LockProperties(props: SDL_PropertiesID): boolean <cimport,nodecl> end
global function SDL_UnlockProperties(props: SDL_PropertiesID): void <cimport,nodecl> end
global function SDL_SetPointerPropertyWithCleanup(props: SDL_PropertiesID, name: cstring, value: pointer, cleanup: SDL_CleanupPropertyCallback, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_SetPointerProperty(props: SDL_PropertiesID, name: cstring, value: pointer): boolean <cimport,nodecl> end
global function SDL_SetStringProperty(props: SDL_PropertiesID, name: cstring, value: cstring): boolean <cimport,nodecl> end
global function SDL_SetNumberProperty(props: SDL_PropertiesID, name: cstring, value: int64): boolean <cimport,nodecl> end
global function SDL_SetFloatProperty(props: SDL_PropertiesID, name: cstring, value: float32): boolean <cimport,nodecl> end
global function SDL_SetBooleanProperty(props: SDL_PropertiesID, name: cstring, value: boolean): boolean <cimport,nodecl> end
global function SDL_HasProperty(props: SDL_PropertiesID, name: cstring): boolean <cimport,nodecl> end
global function SDL_GetPropertyType(props: SDL_PropertiesID, name: cstring): SDL_PropertyType <cimport,nodecl> end
global function SDL_GetPointerProperty(props: SDL_PropertiesID, name: cstring, default_value: pointer): pointer <cimport,nodecl> end
global function SDL_GetStringProperty(props: SDL_PropertiesID, name: cstring, default_value: cstring): cstring <cimport,nodecl> end
global function SDL_GetNumberProperty(props: SDL_PropertiesID, name: cstring, default_value: int64): int64 <cimport,nodecl> end
global function SDL_GetFloatProperty(props: SDL_PropertiesID, name: cstring, default_value: float32): float32 <cimport,nodecl> end
global function SDL_GetBooleanProperty(props: SDL_PropertiesID, name: cstring, default_value: boolean): boolean <cimport,nodecl> end
global function SDL_ClearProperty(props: SDL_PropertiesID, name: cstring): boolean <cimport,nodecl> end
global function SDL_EnumerateProperties(props: SDL_PropertiesID, callback: SDL_EnumeratePropertiesCallback, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_DestroyProperties(props: SDL_PropertiesID): void <cimport,nodecl> end
global function _beginthreadex(_Security: pointer, _StackSize: cuint, _StartAddress: function(a1: pointer): cuint, _ArgList: pointer, _InitFlag: cuint, _ThrdAddr: *cuint): usize <cimport,nodecl> end
global function _endthreadex(_Retval: cuint): void <cimport,nodecl> end
global function SDL_CreateThreadRuntime(fn: SDL_ThreadFunction, name: cstring, data: pointer, pfnBeginThread: SDL_FunctionPointer, pfnEndThread: SDL_FunctionPointer): *SDL_Thread <cimport,nodecl> end
global function SDL_CreateThreadWithPropertiesRuntime(props: SDL_PropertiesID, pfnBeginThread: SDL_FunctionPointer, pfnEndThread: SDL_FunctionPointer): *SDL_Thread <cimport,nodecl> end
global function SDL_GetThreadName(thread: *SDL_Thread): cstring <cimport,nodecl> end
global function SDL_GetCurrentThreadID(): SDL_ThreadID <cimport,nodecl> end
global function SDL_GetThreadID(thread: *SDL_Thread): SDL_ThreadID <cimport,nodecl> end
global function SDL_SetCurrentThreadPriority(priority: SDL_ThreadPriority): boolean <cimport,nodecl> end
global function SDL_WaitThread(thread: *SDL_Thread, status: *cint): void <cimport,nodecl> end
global function SDL_GetThreadState(thread: *SDL_Thread): SDL_ThreadState <cimport,nodecl> end
global function SDL_DetachThread(thread: *SDL_Thread): void <cimport,nodecl> end
global function SDL_GetTLS(id: *SDL_TLSID): pointer <cimport,nodecl> end
global function SDL_SetTLS(id: *SDL_TLSID, value: pointer, destructor: SDL_TLSDestructorCallback): boolean <cimport,nodecl> end
global function SDL_CleanupTLS(): void <cimport,nodecl> end
global function SDL_CreateMutex(): *SDL_Mutex <cimport,nodecl> end
global function SDL_LockMutex(mutex: *SDL_Mutex): void <cimport,nodecl> end
global function SDL_TryLockMutex(mutex: *SDL_Mutex): boolean <cimport,nodecl> end
global function SDL_UnlockMutex(mutex: *SDL_Mutex): void <cimport,nodecl> end
global function SDL_DestroyMutex(mutex: *SDL_Mutex): void <cimport,nodecl> end
global function SDL_CreateRWLock(): *SDL_RWLock <cimport,nodecl> end
global function SDL_LockRWLockForReading(rwlock: *SDL_RWLock): void <cimport,nodecl> end
global function SDL_LockRWLockForWriting(rwlock: *SDL_RWLock): void <cimport,nodecl> end
global function SDL_TryLockRWLockForReading(rwlock: *SDL_RWLock): boolean <cimport,nodecl> end
global function SDL_TryLockRWLockForWriting(rwlock: *SDL_RWLock): boolean <cimport,nodecl> end
global function SDL_UnlockRWLock(rwlock: *SDL_RWLock): void <cimport,nodecl> end
global function SDL_DestroyRWLock(rwlock: *SDL_RWLock): void <cimport,nodecl> end
global function SDL_CreateSemaphore(initial_value: uint32): *SDL_Semaphore <cimport,nodecl> end
global function SDL_DestroySemaphore(sem: *SDL_Semaphore): void <cimport,nodecl> end
global function SDL_WaitSemaphore(sem: *SDL_Semaphore): void <cimport,nodecl> end
global function SDL_TryWaitSemaphore(sem: *SDL_Semaphore): boolean <cimport,nodecl> end
global function SDL_WaitSemaphoreTimeout(sem: *SDL_Semaphore, timeoutMS: int32): boolean <cimport,nodecl> end
global function SDL_SignalSemaphore(sem: *SDL_Semaphore): void <cimport,nodecl> end
global function SDL_GetSemaphoreValue(sem: *SDL_Semaphore): uint32 <cimport,nodecl> end
global function SDL_CreateCondition(): *SDL_Condition <cimport,nodecl> end
global function SDL_DestroyCondition(cond: *SDL_Condition): void <cimport,nodecl> end
global function SDL_SignalCondition(cond: *SDL_Condition): void <cimport,nodecl> end
global function SDL_BroadcastCondition(cond: *SDL_Condition): void <cimport,nodecl> end
global function SDL_WaitCondition(cond: *SDL_Condition, mutex: *SDL_Mutex): void <cimport,nodecl> end
global function SDL_WaitConditionTimeout(cond: *SDL_Condition, mutex: *SDL_Mutex, timeoutMS: int32): boolean <cimport,nodecl> end
global function SDL_ShouldInit(state: *SDL_InitState): boolean <cimport,nodecl> end
global function SDL_ShouldQuit(state: *SDL_InitState): boolean <cimport,nodecl> end
global function SDL_SetInitialized(state: *SDL_InitState, initialized: boolean): void <cimport,nodecl> end
global function SDL_IOFromFile(file: cstring, mode: cstring): *SDL_IOStream <cimport,nodecl> end
global function SDL_IOFromMem(mem: pointer, size: csize): *SDL_IOStream <cimport,nodecl> end
global function SDL_IOFromConstMem(mem: pointer, size: csize): *SDL_IOStream <cimport,nodecl> end
global function SDL_IOFromDynamicMem(): *SDL_IOStream <cimport,nodecl> end
global function SDL_OpenIO(iface: *SDL_IOStreamInterface, userdata: pointer): *SDL_IOStream <cimport,nodecl> end
global function SDL_CloseIO(context: *SDL_IOStream): boolean <cimport,nodecl> end
global function SDL_GetIOProperties(context: *SDL_IOStream): SDL_PropertiesID <cimport,nodecl> end
global function SDL_GetIOStatus(context: *SDL_IOStream): SDL_IOStatus <cimport,nodecl> end
global function SDL_GetIOSize(context: *SDL_IOStream): int64 <cimport,nodecl> end
global function SDL_SeekIO(context: *SDL_IOStream, offset: int64, whence: SDL_IOWhence): int64 <cimport,nodecl> end
global function SDL_TellIO(context: *SDL_IOStream): int64 <cimport,nodecl> end
global function SDL_ReadIO(context: *SDL_IOStream, ptr: pointer, size: csize): csize <cimport,nodecl> end
global function SDL_WriteIO(context: *SDL_IOStream, ptr: pointer, size: csize): csize <cimport,nodecl> end
global function SDL_IOprintf(context: *SDL_IOStream, fmt: cstring, ...: cvarargs): csize <cimport,nodecl> end
global function SDL_IOvprintf(context: *SDL_IOStream, fmt: cstring, ap: cvalist): csize <cimport,nodecl> end
global function SDL_FlushIO(context: *SDL_IOStream): boolean <cimport,nodecl> end
global function SDL_LoadFile_IO(src: *SDL_IOStream, datasize: *csize, closeio: boolean): pointer <cimport,nodecl> end
global function SDL_LoadFile(file: cstring, datasize: *csize): pointer <cimport,nodecl> end
global function SDL_SaveFile_IO(src: *SDL_IOStream, data: pointer, datasize: csize, closeio: boolean): boolean <cimport,nodecl> end
global function SDL_SaveFile(file: cstring, data: pointer, datasize: csize): boolean <cimport,nodecl> end
global function SDL_ReadU8(src: *SDL_IOStream, value: *uint8): boolean <cimport,nodecl> end
global function SDL_ReadS8(src: *SDL_IOStream, value: *int8): boolean <cimport,nodecl> end
global function SDL_ReadU16LE(src: *SDL_IOStream, value: *uint16): boolean <cimport,nodecl> end
global function SDL_ReadS16LE(src: *SDL_IOStream, value: *int16): boolean <cimport,nodecl> end
global function SDL_ReadU16BE(src: *SDL_IOStream, value: *uint16): boolean <cimport,nodecl> end
global function SDL_ReadS16BE(src: *SDL_IOStream, value: *int16): boolean <cimport,nodecl> end
global function SDL_ReadU32LE(src: *SDL_IOStream, value: *uint32): boolean <cimport,nodecl> end
global function SDL_ReadS32LE(src: *SDL_IOStream, value: *int32): boolean <cimport,nodecl> end
global function SDL_ReadU32BE(src: *SDL_IOStream, value: *uint32): boolean <cimport,nodecl> end
global function SDL_ReadS32BE(src: *SDL_IOStream, value: *int32): boolean <cimport,nodecl> end
global function SDL_ReadU64LE(src: *SDL_IOStream, value: *uint64): boolean <cimport,nodecl> end
global function SDL_ReadS64LE(src: *SDL_IOStream, value: *int64): boolean <cimport,nodecl> end
global function SDL_ReadU64BE(src: *SDL_IOStream, value: *uint64): boolean <cimport,nodecl> end
global function SDL_ReadS64BE(src: *SDL_IOStream, value: *int64): boolean <cimport,nodecl> end
global function SDL_WriteU8(dst: *SDL_IOStream, value: uint8): boolean <cimport,nodecl> end
global function SDL_WriteS8(dst: *SDL_IOStream, value: int8): boolean <cimport,nodecl> end
global function SDL_WriteU16LE(dst: *SDL_IOStream, value: uint16): boolean <cimport,nodecl> end
global function SDL_WriteS16LE(dst: *SDL_IOStream, value: int16): boolean <cimport,nodecl> end
global function SDL_WriteU16BE(dst: *SDL_IOStream, value: uint16): boolean <cimport,nodecl> end
global function SDL_WriteS16BE(dst: *SDL_IOStream, value: int16): boolean <cimport,nodecl> end
global function SDL_WriteU32LE(dst: *SDL_IOStream, value: uint32): boolean <cimport,nodecl> end
global function SDL_WriteS32LE(dst: *SDL_IOStream, value: int32): boolean <cimport,nodecl> end
global function SDL_WriteU32BE(dst: *SDL_IOStream, value: uint32): boolean <cimport,nodecl> end
global function SDL_WriteS32BE(dst: *SDL_IOStream, value: int32): boolean <cimport,nodecl> end
global function SDL_WriteU64LE(dst: *SDL_IOStream, value: uint64): boolean <cimport,nodecl> end
global function SDL_WriteS64LE(dst: *SDL_IOStream, value: int64): boolean <cimport,nodecl> end
global function SDL_WriteU64BE(dst: *SDL_IOStream, value: uint64): boolean <cimport,nodecl> end
global function SDL_WriteS64BE(dst: *SDL_IOStream, value: int64): boolean <cimport,nodecl> end
global function SDL_GetNumAudioDrivers(): cint <cimport,nodecl> end
global function SDL_GetAudioDriver(index: cint): cstring <cimport,nodecl> end
global function SDL_GetCurrentAudioDriver(): cstring <cimport,nodecl> end
global function SDL_GetAudioPlaybackDevices(count: *cint): *SDL_AudioDeviceID <cimport,nodecl> end
global function SDL_GetAudioRecordingDevices(count: *cint): *SDL_AudioDeviceID <cimport,nodecl> end
global function SDL_GetAudioDeviceName(devid: SDL_AudioDeviceID): cstring <cimport,nodecl> end
global function SDL_GetAudioDeviceFormat(devid: SDL_AudioDeviceID, spec: *SDL_AudioSpec, sample_frames: *cint): boolean <cimport,nodecl> end
global function SDL_GetAudioDeviceChannelMap(devid: SDL_AudioDeviceID, count: *cint): *cint <cimport,nodecl> end
global function SDL_OpenAudioDevice(devid: SDL_AudioDeviceID, spec: *SDL_AudioSpec): SDL_AudioDeviceID <cimport,nodecl> end
global function SDL_IsAudioDevicePhysical(devid: SDL_AudioDeviceID): boolean <cimport,nodecl> end
global function SDL_IsAudioDevicePlayback(devid: SDL_AudioDeviceID): boolean <cimport,nodecl> end
global function SDL_PauseAudioDevice(devid: SDL_AudioDeviceID): boolean <cimport,nodecl> end
global function SDL_ResumeAudioDevice(devid: SDL_AudioDeviceID): boolean <cimport,nodecl> end
global function SDL_AudioDevicePaused(devid: SDL_AudioDeviceID): boolean <cimport,nodecl> end
global function SDL_GetAudioDeviceGain(devid: SDL_AudioDeviceID): float32 <cimport,nodecl> end
global function SDL_SetAudioDeviceGain(devid: SDL_AudioDeviceID, gain: float32): boolean <cimport,nodecl> end
global function SDL_CloseAudioDevice(devid: SDL_AudioDeviceID): void <cimport,nodecl> end
global function SDL_BindAudioStreams(devid: SDL_AudioDeviceID, streams: **SDL_AudioStream, num_streams: cint): boolean <cimport,nodecl> end
global function SDL_BindAudioStream(devid: SDL_AudioDeviceID, stream: *SDL_AudioStream): boolean <cimport,nodecl> end
global function SDL_UnbindAudioStreams(streams: **SDL_AudioStream, num_streams: cint): void <cimport,nodecl> end
global function SDL_UnbindAudioStream(stream: *SDL_AudioStream): void <cimport,nodecl> end
global function SDL_GetAudioStreamDevice(stream: *SDL_AudioStream): SDL_AudioDeviceID <cimport,nodecl> end
global function SDL_CreateAudioStream(src_spec: *SDL_AudioSpec, dst_spec: *SDL_AudioSpec): *SDL_AudioStream <cimport,nodecl> end
global function SDL_GetAudioStreamProperties(stream: *SDL_AudioStream): SDL_PropertiesID <cimport,nodecl> end
global function SDL_GetAudioStreamFormat(stream: *SDL_AudioStream, src_spec: *SDL_AudioSpec, dst_spec: *SDL_AudioSpec): boolean <cimport,nodecl> end
global function SDL_SetAudioStreamFormat(stream: *SDL_AudioStream, src_spec: *SDL_AudioSpec, dst_spec: *SDL_AudioSpec): boolean <cimport,nodecl> end
global function SDL_GetAudioStreamFrequencyRatio(stream: *SDL_AudioStream): float32 <cimport,nodecl> end
global function SDL_SetAudioStreamFrequencyRatio(stream: *SDL_AudioStream, ratio: float32): boolean <cimport,nodecl> end
global function SDL_GetAudioStreamGain(stream: *SDL_AudioStream): float32 <cimport,nodecl> end
global function SDL_SetAudioStreamGain(stream: *SDL_AudioStream, gain: float32): boolean <cimport,nodecl> end
global function SDL_GetAudioStreamInputChannelMap(stream: *SDL_AudioStream, count: *cint): *cint <cimport,nodecl> end
global function SDL_GetAudioStreamOutputChannelMap(stream: *SDL_AudioStream, count: *cint): *cint <cimport,nodecl> end
global function SDL_SetAudioStreamInputChannelMap(stream: *SDL_AudioStream, chmap: *cint, count: cint): boolean <cimport,nodecl> end
global function SDL_SetAudioStreamOutputChannelMap(stream: *SDL_AudioStream, chmap: *cint, count: cint): boolean <cimport,nodecl> end
global function SDL_PutAudioStreamData(stream: *SDL_AudioStream, buf: pointer, len: cint): boolean <cimport,nodecl> end
global function SDL_GetAudioStreamData(stream: *SDL_AudioStream, buf: pointer, len: cint): cint <cimport,nodecl> end
global function SDL_GetAudioStreamAvailable(stream: *SDL_AudioStream): cint <cimport,nodecl> end
global function SDL_GetAudioStreamQueued(stream: *SDL_AudioStream): cint <cimport,nodecl> end
global function SDL_FlushAudioStream(stream: *SDL_AudioStream): boolean <cimport,nodecl> end
global function SDL_ClearAudioStream(stream: *SDL_AudioStream): boolean <cimport,nodecl> end
global function SDL_PauseAudioStreamDevice(stream: *SDL_AudioStream): boolean <cimport,nodecl> end
global function SDL_ResumeAudioStreamDevice(stream: *SDL_AudioStream): boolean <cimport,nodecl> end
global function SDL_AudioStreamDevicePaused(stream: *SDL_AudioStream): boolean <cimport,nodecl> end
global function SDL_LockAudioStream(stream: *SDL_AudioStream): boolean <cimport,nodecl> end
global function SDL_UnlockAudioStream(stream: *SDL_AudioStream): boolean <cimport,nodecl> end
global function SDL_SetAudioStreamGetCallback(stream: *SDL_AudioStream, callback: SDL_AudioStreamCallback, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_SetAudioStreamPutCallback(stream: *SDL_AudioStream, callback: SDL_AudioStreamCallback, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_DestroyAudioStream(stream: *SDL_AudioStream): void <cimport,nodecl> end
global function SDL_OpenAudioDeviceStream(devid: SDL_AudioDeviceID, spec: *SDL_AudioSpec, callback: SDL_AudioStreamCallback, userdata: pointer): *SDL_AudioStream <cimport,nodecl> end
global function SDL_SetAudioPostmixCallback(devid: SDL_AudioDeviceID, callback: SDL_AudioPostmixCallback, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_LoadWAV_IO(src: *SDL_IOStream, closeio: boolean, spec: *SDL_AudioSpec, audio_buf: **uint8, audio_len: *uint32): boolean <cimport,nodecl> end
global function SDL_LoadWAV(path: cstring, spec: *SDL_AudioSpec, audio_buf: **uint8, audio_len: *uint32): boolean <cimport,nodecl> end
global function SDL_MixAudio(dst: *uint8, src: *uint8, format: SDL_AudioFormat, len: uint32, volume: float32): boolean <cimport,nodecl> end
global function SDL_ConvertAudioSamples(src_spec: *SDL_AudioSpec, src_data: *uint8, src_len: cint, dst_spec: *SDL_AudioSpec, dst_data: **uint8, dst_len: *cint): boolean <cimport,nodecl> end
global function SDL_GetAudioFormatName(format: SDL_AudioFormat): cstring <cimport,nodecl> end
global function SDL_GetSilenceValueForFormat(format: SDL_AudioFormat): cint <cimport,nodecl> end
global function SDL_MostSignificantBitIndex32(x: uint32): cint <cimport,nodecl> end
global function SDL_HasExactlyOneBitSet32(x: uint32): boolean <cimport,nodecl> end
global function SDL_ComposeCustomBlendMode(srcColorFactor: SDL_BlendFactor, dstColorFactor: SDL_BlendFactor, colorOperation: SDL_BlendOperation, srcAlphaFactor: SDL_BlendFactor, dstAlphaFactor: SDL_BlendFactor, alphaOperation: SDL_BlendOperation): SDL_BlendMode <cimport,nodecl> end
global function SDL_GetPixelFormatName(format: SDL_PixelFormat): cstring <cimport,nodecl> end
global function SDL_GetMasksForPixelFormat(format: SDL_PixelFormat, bpp: *cint, Rmask: *uint32, Gmask: *uint32, Bmask: *uint32, Amask: *uint32): boolean <cimport,nodecl> end
global function SDL_GetPixelFormatForMasks(bpp: cint, Rmask: uint32, Gmask: uint32, Bmask: uint32, Amask: uint32): SDL_PixelFormat <cimport,nodecl> end
global function SDL_GetPixelFormatDetails(format: SDL_PixelFormat): *SDL_PixelFormatDetails <cimport,nodecl> end
global function SDL_CreatePalette(ncolors: cint): *SDL_Palette <cimport,nodecl> end
global function SDL_SetPaletteColors(palette: *SDL_Palette, colors: *SDL_Color, firstcolor: cint, ncolors: cint): boolean <cimport,nodecl> end
global function SDL_DestroyPalette(palette: *SDL_Palette): void <cimport,nodecl> end
global function SDL_MapRGB(format: *SDL_PixelFormatDetails, palette: *SDL_Palette, r: uint8, g: uint8, b: uint8): uint32 <cimport,nodecl> end
global function SDL_MapRGBA(format: *SDL_PixelFormatDetails, palette: *SDL_Palette, r: uint8, g: uint8, b: uint8, a: uint8): uint32 <cimport,nodecl> end
global function SDL_GetRGB(pixel: uint32, format: *SDL_PixelFormatDetails, palette: *SDL_Palette, r: *uint8, g: *uint8, b: *uint8): void <cimport,nodecl> end
global function SDL_GetRGBA(pixel: uint32, format: *SDL_PixelFormatDetails, palette: *SDL_Palette, r: *uint8, g: *uint8, b: *uint8, a: *uint8): void <cimport,nodecl> end
global function SDL_RectToFRect(rect: *SDL_Rect, frect: *SDL_FRect): void <cimport,nodecl> end
global function SDL_PointInRect(p: *SDL_Point, r: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_RectEmpty(r: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_RectsEqual(a: *SDL_Rect, b: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_HasRectIntersection(A: *SDL_Rect, B: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_GetRectIntersection(A: *SDL_Rect, B: *SDL_Rect, result: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_GetRectUnion(A: *SDL_Rect, B: *SDL_Rect, result: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_GetRectEnclosingPoints(points: *SDL_Point, count: cint, clip: *SDL_Rect, result: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_GetRectAndLineIntersection(rect: *SDL_Rect, X1: *cint, Y1: *cint, X2: *cint, Y2: *cint): boolean <cimport,nodecl> end
global function SDL_PointInRectFloat(p: *SDL_FPoint, r: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_RectEmptyFloat(r: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_RectsEqualEpsilon(a: *SDL_FRect, b: *SDL_FRect, epsilon: float32): boolean <cimport,nodecl> end
global function SDL_RectsEqualFloat(a: *SDL_FRect, b: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_HasRectIntersectionFloat(A: *SDL_FRect, B: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_GetRectIntersectionFloat(A: *SDL_FRect, B: *SDL_FRect, result: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_GetRectUnionFloat(A: *SDL_FRect, B: *SDL_FRect, result: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_GetRectEnclosingPointsFloat(points: *SDL_FPoint, count: cint, clip: *SDL_FRect, result: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_GetRectAndLineIntersectionFloat(rect: *SDL_FRect, X1: *float32, Y1: *float32, X2: *float32, Y2: *float32): boolean <cimport,nodecl> end
global function SDL_CreateSurface(width: cint, height: cint, format: SDL_PixelFormat): *SDL_Surface <cimport,nodecl> end
global function SDL_CreateSurfaceFrom(width: cint, height: cint, format: SDL_PixelFormat, pixels: pointer, pitch: cint): *SDL_Surface <cimport,nodecl> end
global function SDL_DestroySurface(surface: *SDL_Surface): void <cimport,nodecl> end
global function SDL_GetSurfaceProperties(surface: *SDL_Surface): SDL_PropertiesID <cimport,nodecl> end
global function SDL_SetSurfaceColorspace(surface: *SDL_Surface, colorspace: SDL_Colorspace): boolean <cimport,nodecl> end
global function SDL_GetSurfaceColorspace(surface: *SDL_Surface): SDL_Colorspace <cimport,nodecl> end
global function SDL_CreateSurfacePalette(surface: *SDL_Surface): *SDL_Palette <cimport,nodecl> end
global function SDL_SetSurfacePalette(surface: *SDL_Surface, palette: *SDL_Palette): boolean <cimport,nodecl> end
global function SDL_GetSurfacePalette(surface: *SDL_Surface): *SDL_Palette <cimport,nodecl> end
global function SDL_AddSurfaceAlternateImage(surface: *SDL_Surface, image: *SDL_Surface): boolean <cimport,nodecl> end
global function SDL_SurfaceHasAlternateImages(surface: *SDL_Surface): boolean <cimport,nodecl> end
global function SDL_GetSurfaceImages(surface: *SDL_Surface, count: *cint): **SDL_Surface <cimport,nodecl> end
global function SDL_RemoveSurfaceAlternateImages(surface: *SDL_Surface): void <cimport,nodecl> end
global function SDL_LockSurface(surface: *SDL_Surface): boolean <cimport,nodecl> end
global function SDL_UnlockSurface(surface: *SDL_Surface): void <cimport,nodecl> end
global function SDL_LoadBMP_IO(src: *SDL_IOStream, closeio: boolean): *SDL_Surface <cimport,nodecl> end
global function SDL_LoadBMP(file: cstring): *SDL_Surface <cimport,nodecl> end
global function SDL_SaveBMP_IO(surface: *SDL_Surface, dst: *SDL_IOStream, closeio: boolean): boolean <cimport,nodecl> end
global function SDL_SaveBMP(surface: *SDL_Surface, file: cstring): boolean <cimport,nodecl> end
global function SDL_SetSurfaceRLE(surface: *SDL_Surface, enabled: boolean): boolean <cimport,nodecl> end
global function SDL_SurfaceHasRLE(surface: *SDL_Surface): boolean <cimport,nodecl> end
global function SDL_SetSurfaceColorKey(surface: *SDL_Surface, enabled: boolean, key: uint32): boolean <cimport,nodecl> end
global function SDL_SurfaceHasColorKey(surface: *SDL_Surface): boolean <cimport,nodecl> end
global function SDL_GetSurfaceColorKey(surface: *SDL_Surface, key: *uint32): boolean <cimport,nodecl> end
global function SDL_SetSurfaceColorMod(surface: *SDL_Surface, r: uint8, g: uint8, b: uint8): boolean <cimport,nodecl> end
global function SDL_GetSurfaceColorMod(surface: *SDL_Surface, r: *uint8, g: *uint8, b: *uint8): boolean <cimport,nodecl> end
global function SDL_SetSurfaceAlphaMod(surface: *SDL_Surface, alpha: uint8): boolean <cimport,nodecl> end
global function SDL_GetSurfaceAlphaMod(surface: *SDL_Surface, alpha: *uint8): boolean <cimport,nodecl> end
global function SDL_SetSurfaceBlendMode(surface: *SDL_Surface, blendMode: SDL_BlendMode): boolean <cimport,nodecl> end
global function SDL_GetSurfaceBlendMode(surface: *SDL_Surface, blendMode: *SDL_BlendMode): boolean <cimport,nodecl> end
global function SDL_SetSurfaceClipRect(surface: *SDL_Surface, rect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_GetSurfaceClipRect(surface: *SDL_Surface, rect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_FlipSurface(surface: *SDL_Surface, flip: SDL_FlipMode): boolean <cimport,nodecl> end
global function SDL_DuplicateSurface(surface: *SDL_Surface): *SDL_Surface <cimport,nodecl> end
global function SDL_ScaleSurface(surface: *SDL_Surface, width: cint, height: cint, scaleMode: SDL_ScaleMode): *SDL_Surface <cimport,nodecl> end
global function SDL_ConvertSurface(surface: *SDL_Surface, format: SDL_PixelFormat): *SDL_Surface <cimport,nodecl> end
global function SDL_ConvertSurfaceAndColorspace(surface: *SDL_Surface, format: SDL_PixelFormat, palette: *SDL_Palette, colorspace: SDL_Colorspace, props: SDL_PropertiesID): *SDL_Surface <cimport,nodecl> end
global function SDL_ConvertPixels(width: cint, height: cint, src_format: SDL_PixelFormat, src: pointer, src_pitch: cint, dst_format: SDL_PixelFormat, dst: pointer, dst_pitch: cint): boolean <cimport,nodecl> end
global function SDL_ConvertPixelsAndColorspace(width: cint, height: cint, src_format: SDL_PixelFormat, src_colorspace: SDL_Colorspace, src_properties: SDL_PropertiesID, src: pointer, src_pitch: cint, dst_format: SDL_PixelFormat, dst_colorspace: SDL_Colorspace, dst_properties: SDL_PropertiesID, dst: pointer, dst_pitch: cint): boolean <cimport,nodecl> end
global function SDL_PremultiplyAlpha(width: cint, height: cint, src_format: SDL_PixelFormat, src: pointer, src_pitch: cint, dst_format: SDL_PixelFormat, dst: pointer, dst_pitch: cint, linear: boolean): boolean <cimport,nodecl> end
global function SDL_PremultiplySurfaceAlpha(surface: *SDL_Surface, linear: boolean): boolean <cimport,nodecl> end
global function SDL_ClearSurface(surface: *SDL_Surface, r: float32, g: float32, b: float32, a: float32): boolean <cimport,nodecl> end
global function SDL_FillSurfaceRect(dst: *SDL_Surface, rect: *SDL_Rect, color: uint32): boolean <cimport,nodecl> end
global function SDL_FillSurfaceRects(dst: *SDL_Surface, rects: *SDL_Rect, count: cint, color: uint32): boolean <cimport,nodecl> end
global function SDL_BlitSurface(src: *SDL_Surface, srcrect: *SDL_Rect, dst: *SDL_Surface, dstrect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_BlitSurfaceUnchecked(src: *SDL_Surface, srcrect: *SDL_Rect, dst: *SDL_Surface, dstrect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_BlitSurfaceScaled(src: *SDL_Surface, srcrect: *SDL_Rect, dst: *SDL_Surface, dstrect: *SDL_Rect, scaleMode: SDL_ScaleMode): boolean <cimport,nodecl> end
global function SDL_BlitSurfaceUncheckedScaled(src: *SDL_Surface, srcrect: *SDL_Rect, dst: *SDL_Surface, dstrect: *SDL_Rect, scaleMode: SDL_ScaleMode): boolean <cimport,nodecl> end
global function SDL_StretchSurface(src: *SDL_Surface, srcrect: *SDL_Rect, dst: *SDL_Surface, dstrect: *SDL_Rect, scaleMode: SDL_ScaleMode): boolean <cimport,nodecl> end
global function SDL_BlitSurfaceTiled(src: *SDL_Surface, srcrect: *SDL_Rect, dst: *SDL_Surface, dstrect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_BlitSurfaceTiledWithScale(src: *SDL_Surface, srcrect: *SDL_Rect, scale: float32, scaleMode: SDL_ScaleMode, dst: *SDL_Surface, dstrect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_BlitSurface9Grid(src: *SDL_Surface, srcrect: *SDL_Rect, left_width: cint, right_width: cint, top_height: cint, bottom_height: cint, scale: float32, scaleMode: SDL_ScaleMode, dst: *SDL_Surface, dstrect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_MapSurfaceRGB(surface: *SDL_Surface, r: uint8, g: uint8, b: uint8): uint32 <cimport,nodecl> end
global function SDL_MapSurfaceRGBA(surface: *SDL_Surface, r: uint8, g: uint8, b: uint8, a: uint8): uint32 <cimport,nodecl> end
global function SDL_ReadSurfacePixel(surface: *SDL_Surface, x: cint, y: cint, r: *uint8, g: *uint8, b: *uint8, a: *uint8): boolean <cimport,nodecl> end
global function SDL_ReadSurfacePixelFloat(surface: *SDL_Surface, x: cint, y: cint, r: *float32, g: *float32, b: *float32, a: *float32): boolean <cimport,nodecl> end
global function SDL_WriteSurfacePixel(surface: *SDL_Surface, x: cint, y: cint, r: uint8, g: uint8, b: uint8, a: uint8): boolean <cimport,nodecl> end
global function SDL_WriteSurfacePixelFloat(surface: *SDL_Surface, x: cint, y: cint, r: float32, g: float32, b: float32, a: float32): boolean <cimport,nodecl> end
global function SDL_GetNumCameraDrivers(): cint <cimport,nodecl> end
global function SDL_GetCameraDriver(index: cint): cstring <cimport,nodecl> end
global function SDL_GetCurrentCameraDriver(): cstring <cimport,nodecl> end
global function SDL_GetCameras(count: *cint): *SDL_CameraID <cimport,nodecl> end
global function SDL_GetCameraSupportedFormats(instance_id: SDL_CameraID, count: *cint): **SDL_CameraSpec <cimport,nodecl> end
global function SDL_GetCameraName(instance_id: SDL_CameraID): cstring <cimport,nodecl> end
global function SDL_GetCameraPosition(instance_id: SDL_CameraID): SDL_CameraPosition <cimport,nodecl> end
global function SDL_OpenCamera(instance_id: SDL_CameraID, spec: *SDL_CameraSpec): *SDL_Camera <cimport,nodecl> end
global function SDL_GetCameraPermissionState(camera: *SDL_Camera): cint <cimport,nodecl> end
global function SDL_GetCameraID(camera: *SDL_Camera): SDL_CameraID <cimport,nodecl> end
global function SDL_GetCameraProperties(camera: *SDL_Camera): SDL_PropertiesID <cimport,nodecl> end
global function SDL_GetCameraFormat(camera: *SDL_Camera, spec: *SDL_CameraSpec): boolean <cimport,nodecl> end
global function SDL_AcquireCameraFrame(camera: *SDL_Camera, timestampNS: *uint64): *SDL_Surface <cimport,nodecl> end
global function SDL_ReleaseCameraFrame(camera: *SDL_Camera, frame: *SDL_Surface): void <cimport,nodecl> end
global function SDL_CloseCamera(camera: *SDL_Camera): void <cimport,nodecl> end
global function SDL_SetClipboardText(text: cstring): boolean <cimport,nodecl> end
global function SDL_GetClipboardText(): cstring <cimport,nodecl> end
global function SDL_HasClipboardText(): boolean <cimport,nodecl> end
global function SDL_SetPrimarySelectionText(text: cstring): boolean <cimport,nodecl> end
global function SDL_GetPrimarySelectionText(): cstring <cimport,nodecl> end
global function SDL_HasPrimarySelectionText(): boolean <cimport,nodecl> end
global function SDL_SetClipboardData(callback: SDL_ClipboardDataCallback, cleanup: SDL_ClipboardCleanupCallback, userdata: pointer, mime_types: *cstring, num_mime_types: csize): boolean <cimport,nodecl> end
global function SDL_ClearClipboardData(): boolean <cimport,nodecl> end
global function SDL_GetClipboardData(mime_type: cstring, size: *csize): pointer <cimport,nodecl> end
global function SDL_HasClipboardData(mime_type: cstring): boolean <cimport,nodecl> end
global function SDL_GetClipboardMimeTypes(num_mime_types: *csize): *cstring <cimport,nodecl> end
global function SDL_GetNumLogicalCPUCores(): cint <cimport,nodecl> end
global function SDL_GetCPUCacheLineSize(): cint <cimport,nodecl> end
global function SDL_HasAltiVec(): boolean <cimport,nodecl> end
global function SDL_HasMMX(): boolean <cimport,nodecl> end
global function SDL_HasSSE(): boolean <cimport,nodecl> end
global function SDL_HasSSE2(): boolean <cimport,nodecl> end
global function SDL_HasSSE3(): boolean <cimport,nodecl> end
global function SDL_HasSSE41(): boolean <cimport,nodecl> end
global function SDL_HasSSE42(): boolean <cimport,nodecl> end
global function SDL_HasAVX(): boolean <cimport,nodecl> end
global function SDL_HasAVX2(): boolean <cimport,nodecl> end
global function SDL_HasAVX512F(): boolean <cimport,nodecl> end
global function SDL_HasARMSIMD(): boolean <cimport,nodecl> end
global function SDL_HasNEON(): boolean <cimport,nodecl> end
global function SDL_HasLSX(): boolean <cimport,nodecl> end
global function SDL_HasLASX(): boolean <cimport,nodecl> end
global function SDL_GetSystemRAM(): cint <cimport,nodecl> end
global function SDL_GetSIMDAlignment(): csize <cimport,nodecl> end
global function SDL_GetNumVideoDrivers(): cint <cimport,nodecl> end
global function SDL_GetVideoDriver(index: cint): cstring <cimport,nodecl> end
global function SDL_GetCurrentVideoDriver(): cstring <cimport,nodecl> end
global function SDL_GetSystemTheme(): SDL_SystemTheme <cimport,nodecl> end
global function SDL_GetDisplays(count: *cint): *SDL_DisplayID <cimport,nodecl> end
global function SDL_GetPrimaryDisplay(): SDL_DisplayID <cimport,nodecl> end
global function SDL_GetDisplayProperties(displayID: SDL_DisplayID): SDL_PropertiesID <cimport,nodecl> end
global function SDL_GetDisplayName(displayID: SDL_DisplayID): cstring <cimport,nodecl> end
global function SDL_GetDisplayBounds(displayID: SDL_DisplayID, rect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_GetDisplayUsableBounds(displayID: SDL_DisplayID, rect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_GetNaturalDisplayOrientation(displayID: SDL_DisplayID): SDL_DisplayOrientation <cimport,nodecl> end
global function SDL_GetCurrentDisplayOrientation(displayID: SDL_DisplayID): SDL_DisplayOrientation <cimport,nodecl> end
global function SDL_GetDisplayContentScale(displayID: SDL_DisplayID): float32 <cimport,nodecl> end
global function SDL_GetFullscreenDisplayModes(displayID: SDL_DisplayID, count: *cint): **SDL_DisplayMode <cimport,nodecl> end
global function SDL_GetClosestFullscreenDisplayMode(displayID: SDL_DisplayID, w: cint, h: cint, refresh_rate: float32, include_high_density_modes: boolean, closest: *SDL_DisplayMode): boolean <cimport,nodecl> end
global function SDL_GetDesktopDisplayMode(displayID: SDL_DisplayID): *SDL_DisplayMode <cimport,nodecl> end
global function SDL_GetCurrentDisplayMode(displayID: SDL_DisplayID): *SDL_DisplayMode <cimport,nodecl> end
global function SDL_GetDisplayForPoint(point: *SDL_Point): SDL_DisplayID <cimport,nodecl> end
global function SDL_GetDisplayForRect(rect: *SDL_Rect): SDL_DisplayID <cimport,nodecl> end
global function SDL_GetDisplayForWindow(window: *SDL_Window): SDL_DisplayID <cimport,nodecl> end
global function SDL_GetWindowPixelDensity(window: *SDL_Window): float32 <cimport,nodecl> end
global function SDL_GetWindowDisplayScale(window: *SDL_Window): float32 <cimport,nodecl> end
global function SDL_SetWindowFullscreenMode(window: *SDL_Window, mode: *SDL_DisplayMode): boolean <cimport,nodecl> end
global function SDL_GetWindowFullscreenMode(window: *SDL_Window): *SDL_DisplayMode <cimport,nodecl> end
global function SDL_GetWindowICCProfile(window: *SDL_Window, size: *csize): pointer <cimport,nodecl> end
global function SDL_GetWindowPixelFormat(window: *SDL_Window): SDL_PixelFormat <cimport,nodecl> end
global function SDL_GetWindows(count: *cint): **SDL_Window <cimport,nodecl> end
global function SDL_CreateWindow(title: cstring, w: cint, h: cint, flags: SDL_WindowFlags): *SDL_Window <cimport,nodecl> end
global function SDL_CreatePopupWindow(parent: *SDL_Window, offset_x: cint, offset_y: cint, w: cint, h: cint, flags: SDL_WindowFlags): *SDL_Window <cimport,nodecl> end
global function SDL_CreateWindowWithProperties(props: SDL_PropertiesID): *SDL_Window <cimport,nodecl> end
global function SDL_GetWindowID(window: *SDL_Window): SDL_WindowID <cimport,nodecl> end
global function SDL_GetWindowFromID(id: SDL_WindowID): *SDL_Window <cimport,nodecl> end
global function SDL_GetWindowParent(window: *SDL_Window): *SDL_Window <cimport,nodecl> end
global function SDL_GetWindowProperties(window: *SDL_Window): SDL_PropertiesID <cimport,nodecl> end
global function SDL_GetWindowFlags(window: *SDL_Window): SDL_WindowFlags <cimport,nodecl> end
global function SDL_SetWindowTitle(window: *SDL_Window, title: cstring): boolean <cimport,nodecl> end
global function SDL_GetWindowTitle(window: *SDL_Window): cstring <cimport,nodecl> end
global function SDL_SetWindowIcon(window: *SDL_Window, icon: *SDL_Surface): boolean <cimport,nodecl> end
global function SDL_SetWindowPosition(window: *SDL_Window, x: cint, y: cint): boolean <cimport,nodecl> end
global function SDL_GetWindowPosition(window: *SDL_Window, x: *cint, y: *cint): boolean <cimport,nodecl> end
global function SDL_SetWindowSize(window: *SDL_Window, w: cint, h: cint): boolean <cimport,nodecl> end
global function SDL_GetWindowSize(window: *SDL_Window, w: *cint, h: *cint): boolean <cimport,nodecl> end
global function SDL_GetWindowSafeArea(window: *SDL_Window, rect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_SetWindowAspectRatio(window: *SDL_Window, min_aspect: float32, max_aspect: float32): boolean <cimport,nodecl> end
global function SDL_GetWindowAspectRatio(window: *SDL_Window, min_aspect: *float32, max_aspect: *float32): boolean <cimport,nodecl> end
global function SDL_GetWindowBordersSize(window: *SDL_Window, top: *cint, left: *cint, bottom: *cint, right: *cint): boolean <cimport,nodecl> end
global function SDL_GetWindowSizeInPixels(window: *SDL_Window, w: *cint, h: *cint): boolean <cimport,nodecl> end
global function SDL_SetWindowMinimumSize(window: *SDL_Window, min_w: cint, min_h: cint): boolean <cimport,nodecl> end
global function SDL_GetWindowMinimumSize(window: *SDL_Window, w: *cint, h: *cint): boolean <cimport,nodecl> end
global function SDL_SetWindowMaximumSize(window: *SDL_Window, max_w: cint, max_h: cint): boolean <cimport,nodecl> end
global function SDL_GetWindowMaximumSize(window: *SDL_Window, w: *cint, h: *cint): boolean <cimport,nodecl> end
global function SDL_SetWindowBordered(window: *SDL_Window, bordered: boolean): boolean <cimport,nodecl> end
global function SDL_SetWindowResizable(window: *SDL_Window, resizable: boolean): boolean <cimport,nodecl> end
global function SDL_SetWindowAlwaysOnTop(window: *SDL_Window, on_top: boolean): boolean <cimport,nodecl> end
global function SDL_ShowWindow(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_HideWindow(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_RaiseWindow(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_MaximizeWindow(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_MinimizeWindow(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_RestoreWindow(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_SetWindowFullscreen(window: *SDL_Window, fullscreen: boolean): boolean <cimport,nodecl> end
global function SDL_SyncWindow(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_WindowHasSurface(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_GetWindowSurface(window: *SDL_Window): *SDL_Surface <cimport,nodecl> end
global function SDL_SetWindowSurfaceVSync(window: *SDL_Window, vsync: cint): boolean <cimport,nodecl> end
global function SDL_GetWindowSurfaceVSync(window: *SDL_Window, vsync: *cint): boolean <cimport,nodecl> end
global function SDL_UpdateWindowSurface(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_UpdateWindowSurfaceRects(window: *SDL_Window, rects: *SDL_Rect, numrects: cint): boolean <cimport,nodecl> end
global function SDL_DestroyWindowSurface(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_SetWindowKeyboardGrab(window: *SDL_Window, grabbed: boolean): boolean <cimport,nodecl> end
global function SDL_SetWindowMouseGrab(window: *SDL_Window, grabbed: boolean): boolean <cimport,nodecl> end
global function SDL_GetWindowKeyboardGrab(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_GetWindowMouseGrab(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_GetGrabbedWindow(): *SDL_Window <cimport,nodecl> end
global function SDL_SetWindowMouseRect(window: *SDL_Window, rect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_GetWindowMouseRect(window: *SDL_Window): *SDL_Rect <cimport,nodecl> end
global function SDL_SetWindowOpacity(window: *SDL_Window, opacity: float32): boolean <cimport,nodecl> end
global function SDL_GetWindowOpacity(window: *SDL_Window): float32 <cimport,nodecl> end
global function SDL_SetWindowParent(window: *SDL_Window, parent: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_SetWindowModal(window: *SDL_Window, modal: boolean): boolean <cimport,nodecl> end
global function SDL_SetWindowFocusable(window: *SDL_Window, focusable: boolean): boolean <cimport,nodecl> end
global function SDL_ShowWindowSystemMenu(window: *SDL_Window, x: cint, y: cint): boolean <cimport,nodecl> end
global function SDL_SetWindowHitTest(window: *SDL_Window, callback: SDL_HitTest, callback_data: pointer): boolean <cimport,nodecl> end
global function SDL_SetWindowShape(window: *SDL_Window, shape: *SDL_Surface): boolean <cimport,nodecl> end
global function SDL_FlashWindow(window: *SDL_Window, operation: SDL_FlashOperation): boolean <cimport,nodecl> end
global function SDL_DestroyWindow(window: *SDL_Window): void <cimport,nodecl> end
global function SDL_ScreenSaverEnabled(): boolean <cimport,nodecl> end
global function SDL_EnableScreenSaver(): boolean <cimport,nodecl> end
global function SDL_DisableScreenSaver(): boolean <cimport,nodecl> end
global function SDL_GL_LoadLibrary(path: cstring): boolean <cimport,nodecl> end
global function SDL_GL_GetProcAddress(proc: cstring): SDL_FunctionPointer <cimport,nodecl> end
global function SDL_EGL_GetProcAddress(proc: cstring): SDL_FunctionPointer <cimport,nodecl> end
global function SDL_GL_UnloadLibrary(): void <cimport,nodecl> end
global function SDL_GL_ExtensionSupported(extension: cstring): boolean <cimport,nodecl> end
global function SDL_GL_ResetAttributes(): void <cimport,nodecl> end
global function SDL_GL_SetAttribute(attr: SDL_GLAttr, value: cint): boolean <cimport,nodecl> end
global function SDL_GL_GetAttribute(attr: SDL_GLAttr, value: *cint): boolean <cimport,nodecl> end
global function SDL_GL_CreateContext(window: *SDL_Window): SDL_GLContext <cimport,nodecl> end
global function SDL_GL_MakeCurrent(window: *SDL_Window, context: SDL_GLContext): boolean <cimport,nodecl> end
global function SDL_GL_GetCurrentWindow(): *SDL_Window <cimport,nodecl> end
global function SDL_GL_GetCurrentContext(): SDL_GLContext <cimport,nodecl> end
global function SDL_EGL_GetCurrentDisplay(): SDL_EGLDisplay <cimport,nodecl> end
global function SDL_EGL_GetCurrentConfig(): SDL_EGLConfig <cimport,nodecl> end
global function SDL_EGL_GetWindowSurface(window: *SDL_Window): SDL_EGLSurface <cimport,nodecl> end
global function SDL_EGL_SetAttributeCallbacks(platformAttribCallback: SDL_EGLAttribArrayCallback, surfaceAttribCallback: SDL_EGLIntArrayCallback, contextAttribCallback: SDL_EGLIntArrayCallback, userdata: pointer): void <cimport,nodecl> end
global function SDL_GL_SetSwapInterval(interval: cint): boolean <cimport,nodecl> end
global function SDL_GL_GetSwapInterval(interval: *cint): boolean <cimport,nodecl> end
global function SDL_GL_SwapWindow(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_GL_DestroyContext(context: SDL_GLContext): boolean <cimport,nodecl> end
global function SDL_ShowOpenFileDialog(callback: SDL_DialogFileCallback, userdata: pointer, window: *SDL_Window, filters: *SDL_DialogFileFilter, nfilters: cint, default_location: cstring, allow_many: boolean): void <cimport,nodecl> end
global function SDL_ShowSaveFileDialog(callback: SDL_DialogFileCallback, userdata: pointer, window: *SDL_Window, filters: *SDL_DialogFileFilter, nfilters: cint, default_location: cstring): void <cimport,nodecl> end
global function SDL_ShowOpenFolderDialog(callback: SDL_DialogFileCallback, userdata: pointer, window: *SDL_Window, default_location: cstring, allow_many: boolean): void <cimport,nodecl> end
global function SDL_ShowFileDialogWithProperties(type: SDL_FileDialogType, callback: SDL_DialogFileCallback, userdata: pointer, props: SDL_PropertiesID): void <cimport,nodecl> end
global function SDL_GUIDToString(guid: SDL_GUID, pszGUID: cstring, cbGUID: cint): void <cimport,nodecl> end
global function SDL_StringToGUID(pchGUID: cstring): SDL_GUID <cimport,nodecl> end
global function SDL_GetPowerInfo(seconds: *cint, percent: *cint): SDL_PowerState <cimport,nodecl> end
global function SDL_GetSensors(count: *cint): *SDL_SensorID <cimport,nodecl> end
global function SDL_GetSensorNameForID(instance_id: SDL_SensorID): cstring <cimport,nodecl> end
global function SDL_GetSensorTypeForID(instance_id: SDL_SensorID): SDL_SensorType <cimport,nodecl> end
global function SDL_GetSensorNonPortableTypeForID(instance_id: SDL_SensorID): cint <cimport,nodecl> end
global function SDL_OpenSensor(instance_id: SDL_SensorID): *SDL_Sensor <cimport,nodecl> end
global function SDL_GetSensorFromID(instance_id: SDL_SensorID): *SDL_Sensor <cimport,nodecl> end
global function SDL_GetSensorProperties(sensor: *SDL_Sensor): SDL_PropertiesID <cimport,nodecl> end
global function SDL_GetSensorName(sensor: *SDL_Sensor): cstring <cimport,nodecl> end
global function SDL_GetSensorType(sensor: *SDL_Sensor): SDL_SensorType <cimport,nodecl> end
global function SDL_GetSensorNonPortableType(sensor: *SDL_Sensor): cint <cimport,nodecl> end
global function SDL_GetSensorID(sensor: *SDL_Sensor): SDL_SensorID <cimport,nodecl> end
global function SDL_GetSensorData(sensor: *SDL_Sensor, data: *float32, num_values: cint): boolean <cimport,nodecl> end
global function SDL_CloseSensor(sensor: *SDL_Sensor): void <cimport,nodecl> end
global function SDL_UpdateSensors(): void <cimport,nodecl> end
global function SDL_LockJoysticks(): void <cimport,nodecl> end
global function SDL_UnlockJoysticks(): void <cimport,nodecl> end
global function SDL_HasJoystick(): boolean <cimport,nodecl> end
global function SDL_GetJoysticks(count: *cint): *SDL_JoystickID <cimport,nodecl> end
global function SDL_GetJoystickNameForID(instance_id: SDL_JoystickID): cstring <cimport,nodecl> end
global function SDL_GetJoystickPathForID(instance_id: SDL_JoystickID): cstring <cimport,nodecl> end
global function SDL_GetJoystickPlayerIndexForID(instance_id: SDL_JoystickID): cint <cimport,nodecl> end
global function SDL_GetJoystickGUIDForID(instance_id: SDL_JoystickID): SDL_GUID <cimport,nodecl> end
global function SDL_GetJoystickVendorForID(instance_id: SDL_JoystickID): uint16 <cimport,nodecl> end
global function SDL_GetJoystickProductForID(instance_id: SDL_JoystickID): uint16 <cimport,nodecl> end
global function SDL_GetJoystickProductVersionForID(instance_id: SDL_JoystickID): uint16 <cimport,nodecl> end
global function SDL_GetJoystickTypeForID(instance_id: SDL_JoystickID): SDL_JoystickType <cimport,nodecl> end
global function SDL_OpenJoystick(instance_id: SDL_JoystickID): *SDL_Joystick <cimport,nodecl> end
global function SDL_GetJoystickFromID(instance_id: SDL_JoystickID): *SDL_Joystick <cimport,nodecl> end
global function SDL_GetJoystickFromPlayerIndex(player_index: cint): *SDL_Joystick <cimport,nodecl> end
global function SDL_AttachVirtualJoystick(desc: *SDL_VirtualJoystickDesc): SDL_JoystickID <cimport,nodecl> end
global function SDL_DetachVirtualJoystick(instance_id: SDL_JoystickID): boolean <cimport,nodecl> end
global function SDL_IsJoystickVirtual(instance_id: SDL_JoystickID): boolean <cimport,nodecl> end
global function SDL_SetJoystickVirtualAxis(joystick: *SDL_Joystick, axis: cint, value: int16): boolean <cimport,nodecl> end
global function SDL_SetJoystickVirtualBall(joystick: *SDL_Joystick, ball: cint, xrel: int16, yrel: int16): boolean <cimport,nodecl> end
global function SDL_SetJoystickVirtualButton(joystick: *SDL_Joystick, button: cint, down: boolean): boolean <cimport,nodecl> end
global function SDL_SetJoystickVirtualHat(joystick: *SDL_Joystick, hat: cint, value: uint8): boolean <cimport,nodecl> end
global function SDL_SetJoystickVirtualTouchpad(joystick: *SDL_Joystick, touchpad: cint, finger: cint, down: boolean, x: float32, y: float32, pressure: float32): boolean <cimport,nodecl> end
global function SDL_SendJoystickVirtualSensorData(joystick: *SDL_Joystick, type: SDL_SensorType, sensor_timestamp: uint64, data: *float32, num_values: cint): boolean <cimport,nodecl> end
global function SDL_GetJoystickProperties(joystick: *SDL_Joystick): SDL_PropertiesID <cimport,nodecl> end
global function SDL_GetJoystickName(joystick: *SDL_Joystick): cstring <cimport,nodecl> end
global function SDL_GetJoystickPath(joystick: *SDL_Joystick): cstring <cimport,nodecl> end
global function SDL_GetJoystickPlayerIndex(joystick: *SDL_Joystick): cint <cimport,nodecl> end
global function SDL_SetJoystickPlayerIndex(joystick: *SDL_Joystick, player_index: cint): boolean <cimport,nodecl> end
global function SDL_GetJoystickGUID(joystick: *SDL_Joystick): SDL_GUID <cimport,nodecl> end
global function SDL_GetJoystickVendor(joystick: *SDL_Joystick): uint16 <cimport,nodecl> end
global function SDL_GetJoystickProduct(joystick: *SDL_Joystick): uint16 <cimport,nodecl> end
global function SDL_GetJoystickProductVersion(joystick: *SDL_Joystick): uint16 <cimport,nodecl> end
global function SDL_GetJoystickFirmwareVersion(joystick: *SDL_Joystick): uint16 <cimport,nodecl> end
global function SDL_GetJoystickSerial(joystick: *SDL_Joystick): cstring <cimport,nodecl> end
global function SDL_GetJoystickType(joystick: *SDL_Joystick): SDL_JoystickType <cimport,nodecl> end
global function SDL_GetJoystickGUIDInfo(guid: SDL_GUID, vendor: *uint16, product: *uint16, version: *uint16, crc16: *uint16): void <cimport,nodecl> end
global function SDL_JoystickConnected(joystick: *SDL_Joystick): boolean <cimport,nodecl> end
global function SDL_GetJoystickID(joystick: *SDL_Joystick): SDL_JoystickID <cimport,nodecl> end
global function SDL_GetNumJoystickAxes(joystick: *SDL_Joystick): cint <cimport,nodecl> end
global function SDL_GetNumJoystickBalls(joystick: *SDL_Joystick): cint <cimport,nodecl> end
global function SDL_GetNumJoystickHats(joystick: *SDL_Joystick): cint <cimport,nodecl> end
global function SDL_GetNumJoystickButtons(joystick: *SDL_Joystick): cint <cimport,nodecl> end
global function SDL_SetJoystickEventsEnabled(enabled: boolean): void <cimport,nodecl> end
global function SDL_JoystickEventsEnabled(): boolean <cimport,nodecl> end
global function SDL_UpdateJoysticks(): void <cimport,nodecl> end
global function SDL_GetJoystickAxis(joystick: *SDL_Joystick, axis: cint): int16 <cimport,nodecl> end
global function SDL_GetJoystickAxisInitialState(joystick: *SDL_Joystick, axis: cint, state: *int16): boolean <cimport,nodecl> end
global function SDL_GetJoystickBall(joystick: *SDL_Joystick, ball: cint, dx: *cint, dy: *cint): boolean <cimport,nodecl> end
global function SDL_GetJoystickHat(joystick: *SDL_Joystick, hat: cint): uint8 <cimport,nodecl> end
global function SDL_GetJoystickButton(joystick: *SDL_Joystick, button: cint): boolean <cimport,nodecl> end
global function SDL_RumbleJoystick(joystick: *SDL_Joystick, low_frequency_rumble: uint16, high_frequency_rumble: uint16, duration_ms: uint32): boolean <cimport,nodecl> end
global function SDL_RumbleJoystickTriggers(joystick: *SDL_Joystick, left_rumble: uint16, right_rumble: uint16, duration_ms: uint32): boolean <cimport,nodecl> end
global function SDL_SetJoystickLED(joystick: *SDL_Joystick, red: uint8, green: uint8, blue: uint8): boolean <cimport,nodecl> end
global function SDL_SendJoystickEffect(joystick: *SDL_Joystick, data: pointer, size: cint): boolean <cimport,nodecl> end
global function SDL_CloseJoystick(joystick: *SDL_Joystick): void <cimport,nodecl> end
global function SDL_GetJoystickConnectionState(joystick: *SDL_Joystick): SDL_JoystickConnectionState <cimport,nodecl> end
global function SDL_GetJoystickPowerInfo(joystick: *SDL_Joystick, percent: *cint): SDL_PowerState <cimport,nodecl> end
global function SDL_AddGamepadMapping(mapping: cstring): cint <cimport,nodecl> end
global function SDL_AddGamepadMappingsFromIO(src: *SDL_IOStream, closeio: boolean): cint <cimport,nodecl> end
global function SDL_AddGamepadMappingsFromFile(file: cstring): cint <cimport,nodecl> end
global function SDL_ReloadGamepadMappings(): boolean <cimport,nodecl> end
global function SDL_GetGamepadMappings(count: *cint): *cstring <cimport,nodecl> end
global function SDL_GetGamepadMappingForGUID(guid: SDL_GUID): cstring <cimport,nodecl> end
global function SDL_GetGamepadMapping(gamepad: *SDL_Gamepad): cstring <cimport,nodecl> end
global function SDL_SetGamepadMapping(instance_id: SDL_JoystickID, mapping: cstring): boolean <cimport,nodecl> end
global function SDL_HasGamepad(): boolean <cimport,nodecl> end
global function SDL_GetGamepads(count: *cint): *SDL_JoystickID <cimport,nodecl> end
global function SDL_IsGamepad(instance_id: SDL_JoystickID): boolean <cimport,nodecl> end
global function SDL_GetGamepadNameForID(instance_id: SDL_JoystickID): cstring <cimport,nodecl> end
global function SDL_GetGamepadPathForID(instance_id: SDL_JoystickID): cstring <cimport,nodecl> end
global function SDL_GetGamepadPlayerIndexForID(instance_id: SDL_JoystickID): cint <cimport,nodecl> end
global function SDL_GetGamepadGUIDForID(instance_id: SDL_JoystickID): SDL_GUID <cimport,nodecl> end
global function SDL_GetGamepadVendorForID(instance_id: SDL_JoystickID): uint16 <cimport,nodecl> end
global function SDL_GetGamepadProductForID(instance_id: SDL_JoystickID): uint16 <cimport,nodecl> end
global function SDL_GetGamepadProductVersionForID(instance_id: SDL_JoystickID): uint16 <cimport,nodecl> end
global function SDL_GetGamepadTypeForID(instance_id: SDL_JoystickID): SDL_GamepadType <cimport,nodecl> end
global function SDL_GetRealGamepadTypeForID(instance_id: SDL_JoystickID): SDL_GamepadType <cimport,nodecl> end
global function SDL_GetGamepadMappingForID(instance_id: SDL_JoystickID): cstring <cimport,nodecl> end
global function SDL_OpenGamepad(instance_id: SDL_JoystickID): *SDL_Gamepad <cimport,nodecl> end
global function SDL_GetGamepadFromID(instance_id: SDL_JoystickID): *SDL_Gamepad <cimport,nodecl> end
global function SDL_GetGamepadFromPlayerIndex(player_index: cint): *SDL_Gamepad <cimport,nodecl> end
global function SDL_GetGamepadProperties(gamepad: *SDL_Gamepad): SDL_PropertiesID <cimport,nodecl> end
global function SDL_GetGamepadID(gamepad: *SDL_Gamepad): SDL_JoystickID <cimport,nodecl> end
global function SDL_GetGamepadName(gamepad: *SDL_Gamepad): cstring <cimport,nodecl> end
global function SDL_GetGamepadPath(gamepad: *SDL_Gamepad): cstring <cimport,nodecl> end
global function SDL_GetGamepadType(gamepad: *SDL_Gamepad): SDL_GamepadType <cimport,nodecl> end
global function SDL_GetRealGamepadType(gamepad: *SDL_Gamepad): SDL_GamepadType <cimport,nodecl> end
global function SDL_GetGamepadPlayerIndex(gamepad: *SDL_Gamepad): cint <cimport,nodecl> end
global function SDL_SetGamepadPlayerIndex(gamepad: *SDL_Gamepad, player_index: cint): boolean <cimport,nodecl> end
global function SDL_GetGamepadVendor(gamepad: *SDL_Gamepad): uint16 <cimport,nodecl> end
global function SDL_GetGamepadProduct(gamepad: *SDL_Gamepad): uint16 <cimport,nodecl> end
global function SDL_GetGamepadProductVersion(gamepad: *SDL_Gamepad): uint16 <cimport,nodecl> end
global function SDL_GetGamepadFirmwareVersion(gamepad: *SDL_Gamepad): uint16 <cimport,nodecl> end
global function SDL_GetGamepadSerial(gamepad: *SDL_Gamepad): cstring <cimport,nodecl> end
global function SDL_GetGamepadSteamHandle(gamepad: *SDL_Gamepad): uint64 <cimport,nodecl> end
global function SDL_GetGamepadConnectionState(gamepad: *SDL_Gamepad): SDL_JoystickConnectionState <cimport,nodecl> end
global function SDL_GetGamepadPowerInfo(gamepad: *SDL_Gamepad, percent: *cint): SDL_PowerState <cimport,nodecl> end
global function SDL_GamepadConnected(gamepad: *SDL_Gamepad): boolean <cimport,nodecl> end
global function SDL_GetGamepadJoystick(gamepad: *SDL_Gamepad): *SDL_Joystick <cimport,nodecl> end
global function SDL_SetGamepadEventsEnabled(enabled: boolean): void <cimport,nodecl> end
global function SDL_GamepadEventsEnabled(): boolean <cimport,nodecl> end
global function SDL_GetGamepadBindings(gamepad: *SDL_Gamepad, count: *cint): **SDL_GamepadBinding <cimport,nodecl> end
global function SDL_UpdateGamepads(): void <cimport,nodecl> end
global function SDL_GetGamepadTypeFromString(str: cstring): SDL_GamepadType <cimport,nodecl> end
global function SDL_GetGamepadStringForType(type: SDL_GamepadType): cstring <cimport,nodecl> end
global function SDL_GetGamepadAxisFromString(str: cstring): SDL_GamepadAxis <cimport,nodecl> end
global function SDL_GetGamepadStringForAxis(axis: SDL_GamepadAxis): cstring <cimport,nodecl> end
global function SDL_GamepadHasAxis(gamepad: *SDL_Gamepad, axis: SDL_GamepadAxis): boolean <cimport,nodecl> end
global function SDL_GetGamepadAxis(gamepad: *SDL_Gamepad, axis: SDL_GamepadAxis): int16 <cimport,nodecl> end
global function SDL_GetGamepadButtonFromString(str: cstring): SDL_GamepadButton <cimport,nodecl> end
global function SDL_GetGamepadStringForButton(button: SDL_GamepadButton): cstring <cimport,nodecl> end
global function SDL_GamepadHasButton(gamepad: *SDL_Gamepad, button: SDL_GamepadButton): boolean <cimport,nodecl> end
global function SDL_GetGamepadButton(gamepad: *SDL_Gamepad, button: SDL_GamepadButton): boolean <cimport,nodecl> end
global function SDL_GetGamepadButtonLabelForType(type: SDL_GamepadType, button: SDL_GamepadButton): SDL_GamepadButtonLabel <cimport,nodecl> end
global function SDL_GetGamepadButtonLabel(gamepad: *SDL_Gamepad, button: SDL_GamepadButton): SDL_GamepadButtonLabel <cimport,nodecl> end
global function SDL_GetNumGamepadTouchpads(gamepad: *SDL_Gamepad): cint <cimport,nodecl> end
global function SDL_GetNumGamepadTouchpadFingers(gamepad: *SDL_Gamepad, touchpad: cint): cint <cimport,nodecl> end
global function SDL_GetGamepadTouchpadFinger(gamepad: *SDL_Gamepad, touchpad: cint, finger: cint, down: *boolean, x: *float32, y: *float32, pressure: *float32): boolean <cimport,nodecl> end
global function SDL_GamepadHasSensor(gamepad: *SDL_Gamepad, type: SDL_SensorType): boolean <cimport,nodecl> end
global function SDL_SetGamepadSensorEnabled(gamepad: *SDL_Gamepad, type: SDL_SensorType, enabled: boolean): boolean <cimport,nodecl> end
global function SDL_GamepadSensorEnabled(gamepad: *SDL_Gamepad, type: SDL_SensorType): boolean <cimport,nodecl> end
global function SDL_GetGamepadSensorDataRate(gamepad: *SDL_Gamepad, type: SDL_SensorType): float32 <cimport,nodecl> end
global function SDL_GetGamepadSensorData(gamepad: *SDL_Gamepad, type: SDL_SensorType, data: *float32, num_values: cint): boolean <cimport,nodecl> end
global function SDL_RumbleGamepad(gamepad: *SDL_Gamepad, low_frequency_rumble: uint16, high_frequency_rumble: uint16, duration_ms: uint32): boolean <cimport,nodecl> end
global function SDL_RumbleGamepadTriggers(gamepad: *SDL_Gamepad, left_rumble: uint16, right_rumble: uint16, duration_ms: uint32): boolean <cimport,nodecl> end
global function SDL_SetGamepadLED(gamepad: *SDL_Gamepad, red: uint8, green: uint8, blue: uint8): boolean <cimport,nodecl> end
global function SDL_SendGamepadEffect(gamepad: *SDL_Gamepad, data: pointer, size: cint): boolean <cimport,nodecl> end
global function SDL_CloseGamepad(gamepad: *SDL_Gamepad): void <cimport,nodecl> end
global function SDL_GetGamepadAppleSFSymbolsNameForButton(gamepad: *SDL_Gamepad, button: SDL_GamepadButton): cstring <cimport,nodecl> end
global function SDL_GetGamepadAppleSFSymbolsNameForAxis(gamepad: *SDL_Gamepad, axis: SDL_GamepadAxis): cstring <cimport,nodecl> end
global function SDL_HasKeyboard(): boolean <cimport,nodecl> end
global function SDL_GetKeyboards(count: *cint): *SDL_KeyboardID <cimport,nodecl> end
global function SDL_GetKeyboardNameForID(instance_id: SDL_KeyboardID): cstring <cimport,nodecl> end
global function SDL_GetKeyboardFocus(): *SDL_Window <cimport,nodecl> end
global function SDL_GetKeyboardState(numkeys: *cint): *boolean <cimport,nodecl> end
global function SDL_ResetKeyboard(): void <cimport,nodecl> end
global function SDL_GetModState(): SDL_Keymod <cimport,nodecl> end
global function SDL_SetModState(modstate: SDL_Keymod): void <cimport,nodecl> end
global function SDL_GetKeyFromScancode(scancode: SDL_Scancode, modstate: SDL_Keymod, key_event: boolean): SDL_Keycode <cimport,nodecl> end
global function SDL_GetScancodeFromKey(key: SDL_Keycode, modstate: *SDL_Keymod): SDL_Scancode <cimport,nodecl> end
global function SDL_SetScancodeName(scancode: SDL_Scancode, name: cstring): boolean <cimport,nodecl> end
global function SDL_GetScancodeName(scancode: SDL_Scancode): cstring <cimport,nodecl> end
global function SDL_GetScancodeFromName(name: cstring): SDL_Scancode <cimport,nodecl> end
global function SDL_GetKeyName(key: SDL_Keycode): cstring <cimport,nodecl> end
global function SDL_GetKeyFromName(name: cstring): SDL_Keycode <cimport,nodecl> end
global function SDL_StartTextInput(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_StartTextInputWithProperties(window: *SDL_Window, props: SDL_PropertiesID): boolean <cimport,nodecl> end
global function SDL_TextInputActive(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_StopTextInput(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_ClearComposition(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_SetTextInputArea(window: *SDL_Window, rect: *SDL_Rect, cursor: cint): boolean <cimport,nodecl> end
global function SDL_GetTextInputArea(window: *SDL_Window, rect: *SDL_Rect, cursor: *cint): boolean <cimport,nodecl> end
global function SDL_HasScreenKeyboardSupport(): boolean <cimport,nodecl> end
global function SDL_ScreenKeyboardShown(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_HasMouse(): boolean <cimport,nodecl> end
global function SDL_GetMice(count: *cint): *SDL_MouseID <cimport,nodecl> end
global function SDL_GetMouseNameForID(instance_id: SDL_MouseID): cstring <cimport,nodecl> end
global function SDL_GetMouseFocus(): *SDL_Window <cimport,nodecl> end
global function SDL_GetMouseState(x: *float32, y: *float32): SDL_MouseButtonFlags <cimport,nodecl> end
global function SDL_GetGlobalMouseState(x: *float32, y: *float32): SDL_MouseButtonFlags <cimport,nodecl> end
global function SDL_GetRelativeMouseState(x: *float32, y: *float32): SDL_MouseButtonFlags <cimport,nodecl> end
global function SDL_WarpMouseInWindow(window: *SDL_Window, x: float32, y: float32): void <cimport,nodecl> end
global function SDL_WarpMouseGlobal(x: float32, y: float32): boolean <cimport,nodecl> end
global function SDL_SetWindowRelativeMouseMode(window: *SDL_Window, enabled: boolean): boolean <cimport,nodecl> end
global function SDL_GetWindowRelativeMouseMode(window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_CaptureMouse(enabled: boolean): boolean <cimport,nodecl> end
global function SDL_CreateCursor(data: *uint8, mask: *uint8, w: cint, h: cint, hot_x: cint, hot_y: cint): *SDL_Cursor <cimport,nodecl> end
global function SDL_CreateColorCursor(surface: *SDL_Surface, hot_x: cint, hot_y: cint): *SDL_Cursor <cimport,nodecl> end
global function SDL_CreateSystemCursor(id: SDL_SystemCursor): *SDL_Cursor <cimport,nodecl> end
global function SDL_SetCursor(cursor: *SDL_Cursor): boolean <cimport,nodecl> end
global function SDL_GetCursor(): *SDL_Cursor <cimport,nodecl> end
global function SDL_GetDefaultCursor(): *SDL_Cursor <cimport,nodecl> end
global function SDL_DestroyCursor(cursor: *SDL_Cursor): void <cimport,nodecl> end
global function SDL_ShowCursor(): boolean <cimport,nodecl> end
global function SDL_HideCursor(): boolean <cimport,nodecl> end
global function SDL_CursorVisible(): boolean <cimport,nodecl> end
global function SDL_GetTouchDevices(count: *cint): *SDL_TouchID <cimport,nodecl> end
global function SDL_GetTouchDeviceName(touchID: SDL_TouchID): cstring <cimport,nodecl> end
global function SDL_GetTouchDeviceType(touchID: SDL_TouchID): SDL_TouchDeviceType <cimport,nodecl> end
global function SDL_GetTouchFingers(touchID: SDL_TouchID, count: *cint): **SDL_Finger <cimport,nodecl> end
global function SDL_PumpEvents(): void <cimport,nodecl> end
global function SDL_PeepEvents(events: *SDL_Event, numevents: cint, action: SDL_EventAction, minType: uint32, maxType: uint32): cint <cimport,nodecl> end
global function SDL_HasEvent(type: uint32): boolean <cimport,nodecl> end
global function SDL_HasEvents(minType: uint32, maxType: uint32): boolean <cimport,nodecl> end
global function SDL_FlushEvent(type: uint32): void <cimport,nodecl> end
global function SDL_FlushEvents(minType: uint32, maxType: uint32): void <cimport,nodecl> end
global function SDL_PollEvent(event: *SDL_Event): boolean <cimport,nodecl> end
global function SDL_WaitEvent(event: *SDL_Event): boolean <cimport,nodecl> end
global function SDL_WaitEventTimeout(event: *SDL_Event, timeoutMS: int32): boolean <cimport,nodecl> end
global function SDL_PushEvent(event: *SDL_Event): boolean <cimport,nodecl> end
global function SDL_SetEventFilter(filter: SDL_EventFilter, userdata: pointer): void <cimport,nodecl> end
global function SDL_GetEventFilter(filter: *SDL_EventFilter, userdata: *pointer): boolean <cimport,nodecl> end
global function SDL_AddEventWatch(filter: SDL_EventFilter, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_RemoveEventWatch(filter: SDL_EventFilter, userdata: pointer): void <cimport,nodecl> end
global function SDL_FilterEvents(filter: SDL_EventFilter, userdata: pointer): void <cimport,nodecl> end
global function SDL_SetEventEnabled(type: uint32, enabled: boolean): void <cimport,nodecl> end
global function SDL_EventEnabled(type: uint32): boolean <cimport,nodecl> end
global function SDL_RegisterEvents(numevents: cint): uint32 <cimport,nodecl> end
global function SDL_GetWindowFromEvent(event: *SDL_Event): *SDL_Window <cimport,nodecl> end
global function SDL_GetBasePath(): cstring <cimport,nodecl> end
global function SDL_GetPrefPath(org: cstring, app: cstring): cstring <cimport,nodecl> end
global function SDL_GetUserFolder(folder: SDL_Folder): cstring <cimport,nodecl> end
global function SDL_CreateDirectory(path: cstring): boolean <cimport,nodecl> end
global function SDL_EnumerateDirectory(path: cstring, callback: SDL_EnumerateDirectoryCallback, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_RemovePath(path: cstring): boolean <cimport,nodecl> end
global function SDL_RenamePath(oldpath: cstring, newpath: cstring): boolean <cimport,nodecl> end
global function SDL_CopyFile(oldpath: cstring, newpath: cstring): boolean <cimport,nodecl> end
global function SDL_GetPathInfo(path: cstring, info: *SDL_PathInfo): boolean <cimport,nodecl> end
global function SDL_GlobDirectory(path: cstring, pattern: cstring, flags: SDL_GlobFlags, count: *cint): *cstring <cimport,nodecl> end
global function SDL_GetCurrentDirectory(): cstring <cimport,nodecl> end
global function SDL_GPUSupportsShaderFormats(format_flags: SDL_GPUShaderFormat, name: cstring): boolean <cimport,nodecl> end
global function SDL_GPUSupportsProperties(props: SDL_PropertiesID): boolean <cimport,nodecl> end
global function SDL_CreateGPUDevice(format_flags: SDL_GPUShaderFormat, debug_mode: boolean, name: cstring): *SDL_GPUDevice <cimport,nodecl> end
global function SDL_CreateGPUDeviceWithProperties(props: SDL_PropertiesID): *SDL_GPUDevice <cimport,nodecl> end
global function SDL_DestroyGPUDevice(device: *SDL_GPUDevice): void <cimport,nodecl> end
global function SDL_GetNumGPUDrivers(): cint <cimport,nodecl> end
global function SDL_GetGPUDriver(index: cint): cstring <cimport,nodecl> end
global function SDL_GetGPUDeviceDriver(device: *SDL_GPUDevice): cstring <cimport,nodecl> end
global function SDL_GetGPUShaderFormats(device: *SDL_GPUDevice): SDL_GPUShaderFormat <cimport,nodecl> end
global function SDL_CreateGPUComputePipeline(device: *SDL_GPUDevice, createinfo: *SDL_GPUComputePipelineCreateInfo): *SDL_GPUComputePipeline <cimport,nodecl> end
global function SDL_CreateGPUGraphicsPipeline(device: *SDL_GPUDevice, createinfo: *SDL_GPUGraphicsPipelineCreateInfo): *SDL_GPUGraphicsPipeline <cimport,nodecl> end
global function SDL_CreateGPUSampler(device: *SDL_GPUDevice, createinfo: *SDL_GPUSamplerCreateInfo): *SDL_GPUSampler <cimport,nodecl> end
global function SDL_CreateGPUShader(device: *SDL_GPUDevice, createinfo: *SDL_GPUShaderCreateInfo): *SDL_GPUShader <cimport,nodecl> end
global function SDL_CreateGPUTexture(device: *SDL_GPUDevice, createinfo: *SDL_GPUTextureCreateInfo): *SDL_GPUTexture <cimport,nodecl> end
global function SDL_CreateGPUBuffer(device: *SDL_GPUDevice, createinfo: *SDL_GPUBufferCreateInfo): *SDL_GPUBuffer <cimport,nodecl> end
global function SDL_CreateGPUTransferBuffer(device: *SDL_GPUDevice, createinfo: *SDL_GPUTransferBufferCreateInfo): *SDL_GPUTransferBuffer <cimport,nodecl> end
global function SDL_SetGPUBufferName(device: *SDL_GPUDevice, buffer: *SDL_GPUBuffer, text: cstring): void <cimport,nodecl> end
global function SDL_SetGPUTextureName(device: *SDL_GPUDevice, texture: *SDL_GPUTexture, text: cstring): void <cimport,nodecl> end
global function SDL_InsertGPUDebugLabel(command_buffer: *SDL_GPUCommandBuffer, text: cstring): void <cimport,nodecl> end
global function SDL_PushGPUDebugGroup(command_buffer: *SDL_GPUCommandBuffer, name: cstring): void <cimport,nodecl> end
global function SDL_PopGPUDebugGroup(command_buffer: *SDL_GPUCommandBuffer): void <cimport,nodecl> end
global function SDL_ReleaseGPUTexture(device: *SDL_GPUDevice, texture: *SDL_GPUTexture): void <cimport,nodecl> end
global function SDL_ReleaseGPUSampler(device: *SDL_GPUDevice, sampler: *SDL_GPUSampler): void <cimport,nodecl> end
global function SDL_ReleaseGPUBuffer(device: *SDL_GPUDevice, buffer: *SDL_GPUBuffer): void <cimport,nodecl> end
global function SDL_ReleaseGPUTransferBuffer(device: *SDL_GPUDevice, transfer_buffer: *SDL_GPUTransferBuffer): void <cimport,nodecl> end
global function SDL_ReleaseGPUComputePipeline(device: *SDL_GPUDevice, compute_pipeline: *SDL_GPUComputePipeline): void <cimport,nodecl> end
global function SDL_ReleaseGPUShader(device: *SDL_GPUDevice, shader: *SDL_GPUShader): void <cimport,nodecl> end
global function SDL_ReleaseGPUGraphicsPipeline(device: *SDL_GPUDevice, graphics_pipeline: *SDL_GPUGraphicsPipeline): void <cimport,nodecl> end
global function SDL_AcquireGPUCommandBuffer(device: *SDL_GPUDevice): *SDL_GPUCommandBuffer <cimport,nodecl> end
global function SDL_PushGPUVertexUniformData(command_buffer: *SDL_GPUCommandBuffer, slot_index: uint32, data: pointer, length: uint32): void <cimport,nodecl> end
global function SDL_PushGPUFragmentUniformData(command_buffer: *SDL_GPUCommandBuffer, slot_index: uint32, data: pointer, length: uint32): void <cimport,nodecl> end
global function SDL_PushGPUComputeUniformData(command_buffer: *SDL_GPUCommandBuffer, slot_index: uint32, data: pointer, length: uint32): void <cimport,nodecl> end
global function SDL_BeginGPURenderPass(command_buffer: *SDL_GPUCommandBuffer, color_target_infos: *SDL_GPUColorTargetInfo, num_color_targets: uint32, depth_stencil_target_info: *SDL_GPUDepthStencilTargetInfo): *SDL_GPURenderPass <cimport,nodecl> end
global function SDL_BindGPUGraphicsPipeline(render_pass: *SDL_GPURenderPass, graphics_pipeline: *SDL_GPUGraphicsPipeline): void <cimport,nodecl> end
global function SDL_SetGPUViewport(render_pass: *SDL_GPURenderPass, viewport: *SDL_GPUViewport): void <cimport,nodecl> end
global function SDL_SetGPUScissor(render_pass: *SDL_GPURenderPass, scissor: *SDL_Rect): void <cimport,nodecl> end
global function SDL_SetGPUBlendConstants(render_pass: *SDL_GPURenderPass, blend_constants: SDL_FColor): void <cimport,nodecl> end
global function SDL_SetGPUStencilReference(render_pass: *SDL_GPURenderPass, reference: uint8): void <cimport,nodecl> end
global function SDL_BindGPUVertexBuffers(render_pass: *SDL_GPURenderPass, first_slot: uint32, bindings: *SDL_GPUBufferBinding, num_bindings: uint32): void <cimport,nodecl> end
global function SDL_BindGPUIndexBuffer(render_pass: *SDL_GPURenderPass, binding: *SDL_GPUBufferBinding, index_element_size: SDL_GPUIndexElementSize): void <cimport,nodecl> end
global function SDL_BindGPUVertexSamplers(render_pass: *SDL_GPURenderPass, first_slot: uint32, texture_sampler_bindings: *SDL_GPUTextureSamplerBinding, num_bindings: uint32): void <cimport,nodecl> end
global function SDL_BindGPUVertexStorageTextures(render_pass: *SDL_GPURenderPass, first_slot: uint32, storage_textures: **SDL_GPUTexture, num_bindings: uint32): void <cimport,nodecl> end
global function SDL_BindGPUVertexStorageBuffers(render_pass: *SDL_GPURenderPass, first_slot: uint32, storage_buffers: **SDL_GPUBuffer, num_bindings: uint32): void <cimport,nodecl> end
global function SDL_BindGPUFragmentSamplers(render_pass: *SDL_GPURenderPass, first_slot: uint32, texture_sampler_bindings: *SDL_GPUTextureSamplerBinding, num_bindings: uint32): void <cimport,nodecl> end
global function SDL_BindGPUFragmentStorageTextures(render_pass: *SDL_GPURenderPass, first_slot: uint32, storage_textures: **SDL_GPUTexture, num_bindings: uint32): void <cimport,nodecl> end
global function SDL_BindGPUFragmentStorageBuffers(render_pass: *SDL_GPURenderPass, first_slot: uint32, storage_buffers: **SDL_GPUBuffer, num_bindings: uint32): void <cimport,nodecl> end
global function SDL_DrawGPUIndexedPrimitives(render_pass: *SDL_GPURenderPass, num_indices: uint32, num_instances: uint32, first_index: uint32, vertex_offset: int32, first_instance: uint32): void <cimport,nodecl> end
global function SDL_DrawGPUPrimitives(render_pass: *SDL_GPURenderPass, num_vertices: uint32, num_instances: uint32, first_vertex: uint32, first_instance: uint32): void <cimport,nodecl> end
global function SDL_DrawGPUPrimitivesIndirect(render_pass: *SDL_GPURenderPass, buffer: *SDL_GPUBuffer, offset: uint32, draw_count: uint32): void <cimport,nodecl> end
global function SDL_DrawGPUIndexedPrimitivesIndirect(render_pass: *SDL_GPURenderPass, buffer: *SDL_GPUBuffer, offset: uint32, draw_count: uint32): void <cimport,nodecl> end
global function SDL_EndGPURenderPass(render_pass: *SDL_GPURenderPass): void <cimport,nodecl> end
global function SDL_BeginGPUComputePass(command_buffer: *SDL_GPUCommandBuffer, storage_texture_bindings: *SDL_GPUStorageTextureReadWriteBinding, num_storage_texture_bindings: uint32, storage_buffer_bindings: *SDL_GPUStorageBufferReadWriteBinding, num_storage_buffer_bindings: uint32): *SDL_GPUComputePass <cimport,nodecl> end
global function SDL_BindGPUComputePipeline(compute_pass: *SDL_GPUComputePass, compute_pipeline: *SDL_GPUComputePipeline): void <cimport,nodecl> end
global function SDL_BindGPUComputeSamplers(compute_pass: *SDL_GPUComputePass, first_slot: uint32, texture_sampler_bindings: *SDL_GPUTextureSamplerBinding, num_bindings: uint32): void <cimport,nodecl> end
global function SDL_BindGPUComputeStorageTextures(compute_pass: *SDL_GPUComputePass, first_slot: uint32, storage_textures: **SDL_GPUTexture, num_bindings: uint32): void <cimport,nodecl> end
global function SDL_BindGPUComputeStorageBuffers(compute_pass: *SDL_GPUComputePass, first_slot: uint32, storage_buffers: **SDL_GPUBuffer, num_bindings: uint32): void <cimport,nodecl> end
global function SDL_DispatchGPUCompute(compute_pass: *SDL_GPUComputePass, groupcount_x: uint32, groupcount_y: uint32, groupcount_z: uint32): void <cimport,nodecl> end
global function SDL_DispatchGPUComputeIndirect(compute_pass: *SDL_GPUComputePass, buffer: *SDL_GPUBuffer, offset: uint32): void <cimport,nodecl> end
global function SDL_EndGPUComputePass(compute_pass: *SDL_GPUComputePass): void <cimport,nodecl> end
global function SDL_MapGPUTransferBuffer(device: *SDL_GPUDevice, transfer_buffer: *SDL_GPUTransferBuffer, cycle: boolean): pointer <cimport,nodecl> end
global function SDL_UnmapGPUTransferBuffer(device: *SDL_GPUDevice, transfer_buffer: *SDL_GPUTransferBuffer): void <cimport,nodecl> end
global function SDL_BeginGPUCopyPass(command_buffer: *SDL_GPUCommandBuffer): *SDL_GPUCopyPass <cimport,nodecl> end
global function SDL_UploadToGPUTexture(copy_pass: *SDL_GPUCopyPass, source: *SDL_GPUTextureTransferInfo, destination: *SDL_GPUTextureRegion, cycle: boolean): void <cimport,nodecl> end
global function SDL_UploadToGPUBuffer(copy_pass: *SDL_GPUCopyPass, source: *SDL_GPUTransferBufferLocation, destination: *SDL_GPUBufferRegion, cycle: boolean): void <cimport,nodecl> end
global function SDL_CopyGPUTextureToTexture(copy_pass: *SDL_GPUCopyPass, source: *SDL_GPUTextureLocation, destination: *SDL_GPUTextureLocation, w: uint32, h: uint32, d: uint32, cycle: boolean): void <cimport,nodecl> end
global function SDL_CopyGPUBufferToBuffer(copy_pass: *SDL_GPUCopyPass, source: *SDL_GPUBufferLocation, destination: *SDL_GPUBufferLocation, size: uint32, cycle: boolean): void <cimport,nodecl> end
global function SDL_DownloadFromGPUTexture(copy_pass: *SDL_GPUCopyPass, source: *SDL_GPUTextureRegion, destination: *SDL_GPUTextureTransferInfo): void <cimport,nodecl> end
global function SDL_DownloadFromGPUBuffer(copy_pass: *SDL_GPUCopyPass, source: *SDL_GPUBufferRegion, destination: *SDL_GPUTransferBufferLocation): void <cimport,nodecl> end
global function SDL_EndGPUCopyPass(copy_pass: *SDL_GPUCopyPass): void <cimport,nodecl> end
global function SDL_GenerateMipmapsForGPUTexture(command_buffer: *SDL_GPUCommandBuffer, texture: *SDL_GPUTexture): void <cimport,nodecl> end
global function SDL_BlitGPUTexture(command_buffer: *SDL_GPUCommandBuffer, info: *SDL_GPUBlitInfo): void <cimport,nodecl> end
global function SDL_WindowSupportsGPUSwapchainComposition(device: *SDL_GPUDevice, window: *SDL_Window, swapchain_composition: SDL_GPUSwapchainComposition): boolean <cimport,nodecl> end
global function SDL_WindowSupportsGPUPresentMode(device: *SDL_GPUDevice, window: *SDL_Window, present_mode: SDL_GPUPresentMode): boolean <cimport,nodecl> end
global function SDL_ClaimWindowForGPUDevice(device: *SDL_GPUDevice, window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_ReleaseWindowFromGPUDevice(device: *SDL_GPUDevice, window: *SDL_Window): void <cimport,nodecl> end
global function SDL_SetGPUSwapchainParameters(device: *SDL_GPUDevice, window: *SDL_Window, swapchain_composition: SDL_GPUSwapchainComposition, present_mode: SDL_GPUPresentMode): boolean <cimport,nodecl> end
global function SDL_SetGPUAllowedFramesInFlight(device: *SDL_GPUDevice, allowed_frames_in_flight: uint32): boolean <cimport,nodecl> end
global function SDL_GetGPUSwapchainTextureFormat(device: *SDL_GPUDevice, window: *SDL_Window): SDL_GPUTextureFormat <cimport,nodecl> end
global function SDL_AcquireGPUSwapchainTexture(command_buffer: *SDL_GPUCommandBuffer, window: *SDL_Window, swapchain_texture: **SDL_GPUTexture, swapchain_texture_width: *uint32, swapchain_texture_height: *uint32): boolean <cimport,nodecl> end
global function SDL_WaitForGPUSwapchain(device: *SDL_GPUDevice, window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_WaitAndAcquireGPUSwapchainTexture(command_buffer: *SDL_GPUCommandBuffer, window: *SDL_Window, swapchain_texture: **SDL_GPUTexture, swapchain_texture_width: *uint32, swapchain_texture_height: *uint32): boolean <cimport,nodecl> end
global function SDL_SubmitGPUCommandBuffer(command_buffer: *SDL_GPUCommandBuffer): boolean <cimport,nodecl> end
global function SDL_SubmitGPUCommandBufferAndAcquireFence(command_buffer: *SDL_GPUCommandBuffer): *SDL_GPUFence <cimport,nodecl> end
global function SDL_CancelGPUCommandBuffer(command_buffer: *SDL_GPUCommandBuffer): boolean <cimport,nodecl> end
global function SDL_WaitForGPUIdle(device: *SDL_GPUDevice): boolean <cimport,nodecl> end
global function SDL_WaitForGPUFences(device: *SDL_GPUDevice, wait_all: boolean, fences: **SDL_GPUFence, num_fences: uint32): boolean <cimport,nodecl> end
global function SDL_QueryGPUFence(device: *SDL_GPUDevice, fence: *SDL_GPUFence): boolean <cimport,nodecl> end
global function SDL_ReleaseGPUFence(device: *SDL_GPUDevice, fence: *SDL_GPUFence): void <cimport,nodecl> end
global function SDL_GPUTextureFormatTexelBlockSize(format: SDL_GPUTextureFormat): uint32 <cimport,nodecl> end
global function SDL_GPUTextureSupportsFormat(device: *SDL_GPUDevice, format: SDL_GPUTextureFormat, type: SDL_GPUTextureType, usage: SDL_GPUTextureUsageFlags): boolean <cimport,nodecl> end
global function SDL_GPUTextureSupportsSampleCount(device: *SDL_GPUDevice, format: SDL_GPUTextureFormat, sample_count: SDL_GPUSampleCount): boolean <cimport,nodecl> end
global function SDL_CalculateGPUTextureFormatSize(format: SDL_GPUTextureFormat, width: uint32, height: uint32, depth_or_layer_count: uint32): uint32 <cimport,nodecl> end
global function SDL_GetHaptics(count: *cint): *SDL_HapticID <cimport,nodecl> end
global function SDL_GetHapticNameForID(instance_id: SDL_HapticID): cstring <cimport,nodecl> end
global function SDL_OpenHaptic(instance_id: SDL_HapticID): *SDL_Haptic <cimport,nodecl> end
global function SDL_GetHapticFromID(instance_id: SDL_HapticID): *SDL_Haptic <cimport,nodecl> end
global function SDL_GetHapticID(haptic: *SDL_Haptic): SDL_HapticID <cimport,nodecl> end
global function SDL_GetHapticName(haptic: *SDL_Haptic): cstring <cimport,nodecl> end
global function SDL_IsMouseHaptic(): boolean <cimport,nodecl> end
global function SDL_OpenHapticFromMouse(): *SDL_Haptic <cimport,nodecl> end
global function SDL_IsJoystickHaptic(joystick: *SDL_Joystick): boolean <cimport,nodecl> end
global function SDL_OpenHapticFromJoystick(joystick: *SDL_Joystick): *SDL_Haptic <cimport,nodecl> end
global function SDL_CloseHaptic(haptic: *SDL_Haptic): void <cimport,nodecl> end
global function SDL_GetMaxHapticEffects(haptic: *SDL_Haptic): cint <cimport,nodecl> end
global function SDL_GetMaxHapticEffectsPlaying(haptic: *SDL_Haptic): cint <cimport,nodecl> end
global function SDL_GetHapticFeatures(haptic: *SDL_Haptic): uint32 <cimport,nodecl> end
global function SDL_GetNumHapticAxes(haptic: *SDL_Haptic): cint <cimport,nodecl> end
global function SDL_HapticEffectSupported(haptic: *SDL_Haptic, effect: *SDL_HapticEffect): boolean <cimport,nodecl> end
global function SDL_CreateHapticEffect(haptic: *SDL_Haptic, effect: *SDL_HapticEffect): cint <cimport,nodecl> end
global function SDL_UpdateHapticEffect(haptic: *SDL_Haptic, effect: cint, data: *SDL_HapticEffect): boolean <cimport,nodecl> end
global function SDL_RunHapticEffect(haptic: *SDL_Haptic, effect: cint, iterations: uint32): boolean <cimport,nodecl> end
global function SDL_StopHapticEffect(haptic: *SDL_Haptic, effect: cint): boolean <cimport,nodecl> end
global function SDL_DestroyHapticEffect(haptic: *SDL_Haptic, effect: cint): void <cimport,nodecl> end
global function SDL_GetHapticEffectStatus(haptic: *SDL_Haptic, effect: cint): boolean <cimport,nodecl> end
global function SDL_SetHapticGain(haptic: *SDL_Haptic, gain: cint): boolean <cimport,nodecl> end
global function SDL_SetHapticAutocenter(haptic: *SDL_Haptic, autocenter: cint): boolean <cimport,nodecl> end
global function SDL_PauseHaptic(haptic: *SDL_Haptic): boolean <cimport,nodecl> end
global function SDL_ResumeHaptic(haptic: *SDL_Haptic): boolean <cimport,nodecl> end
global function SDL_StopHapticEffects(haptic: *SDL_Haptic): boolean <cimport,nodecl> end
global function SDL_HapticRumbleSupported(haptic: *SDL_Haptic): boolean <cimport,nodecl> end
global function SDL_InitHapticRumble(haptic: *SDL_Haptic): boolean <cimport,nodecl> end
global function SDL_PlayHapticRumble(haptic: *SDL_Haptic, strength: float32, length: uint32): boolean <cimport,nodecl> end
global function SDL_StopHapticRumble(haptic: *SDL_Haptic): boolean <cimport,nodecl> end
global function SDL_hid_init(): cint <cimport,nodecl> end
global function SDL_hid_exit(): cint <cimport,nodecl> end
global function SDL_hid_device_change_count(): uint32 <cimport,nodecl> end
global function SDL_hid_enumerate(vendor_id: cushort, product_id: cushort): *SDL_hid_device_info <cimport,nodecl> end
global function SDL_hid_free_enumeration(devs: *SDL_hid_device_info): void <cimport,nodecl> end
global function SDL_hid_open(vendor_id: cushort, product_id: cushort, serial_number: *cwchar_t): *SDL_hid_device <cimport,nodecl> end
global function SDL_hid_open_path(path: cstring): *SDL_hid_device <cimport,nodecl> end
global function SDL_hid_write(dev: *SDL_hid_device, data: *cuchar, length: csize): cint <cimport,nodecl> end
global function SDL_hid_read_timeout(dev: *SDL_hid_device, data: *cuchar, length: csize, milliseconds: cint): cint <cimport,nodecl> end
global function SDL_hid_read(dev: *SDL_hid_device, data: *cuchar, length: csize): cint <cimport,nodecl> end
global function SDL_hid_set_nonblocking(dev: *SDL_hid_device, nonblock: cint): cint <cimport,nodecl> end
global function SDL_hid_send_feature_report(dev: *SDL_hid_device, data: *cuchar, length: csize): cint <cimport,nodecl> end
global function SDL_hid_get_feature_report(dev: *SDL_hid_device, data: *cuchar, length: csize): cint <cimport,nodecl> end
global function SDL_hid_get_input_report(dev: *SDL_hid_device, data: *cuchar, length: csize): cint <cimport,nodecl> end
global function SDL_hid_close(dev: *SDL_hid_device): cint <cimport,nodecl> end
global function SDL_hid_get_manufacturer_string(dev: *SDL_hid_device, string: *cwchar_t, maxlen: csize): cint <cimport,nodecl> end
global function SDL_hid_get_product_string(dev: *SDL_hid_device, string: *cwchar_t, maxlen: csize): cint <cimport,nodecl> end
global function SDL_hid_get_serial_number_string(dev: *SDL_hid_device, string: *cwchar_t, maxlen: csize): cint <cimport,nodecl> end
global function SDL_hid_get_indexed_string(dev: *SDL_hid_device, string_index: cint, string: *cwchar_t, maxlen: csize): cint <cimport,nodecl> end
global function SDL_hid_get_device_info(dev: *SDL_hid_device): *SDL_hid_device_info <cimport,nodecl> end
global function SDL_hid_get_report_descriptor(dev: *SDL_hid_device, buf: *cuchar, buf_size: csize): cint <cimport,nodecl> end
global function SDL_hid_ble_scan(active: boolean): void <cimport,nodecl> end
global function SDL_SetHintWithPriority(name: cstring, value: cstring, priority: SDL_HintPriority): boolean <cimport,nodecl> end
global function SDL_SetHint(name: cstring, value: cstring): boolean <cimport,nodecl> end
global function SDL_ResetHint(name: cstring): boolean <cimport,nodecl> end
global function SDL_ResetHints(): void <cimport,nodecl> end
global function SDL_GetHint(name: cstring): cstring <cimport,nodecl> end
global function SDL_GetHintBoolean(name: cstring, default_value: boolean): boolean <cimport,nodecl> end
global function SDL_AddHintCallback(name: cstring, callback: SDL_HintCallback, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_RemoveHintCallback(name: cstring, callback: SDL_HintCallback, userdata: pointer): void <cimport,nodecl> end
global function SDL_Init(flags: SDL_InitFlags): boolean <cimport,nodecl> end
global function SDL_InitSubSystem(flags: SDL_InitFlags): boolean <cimport,nodecl> end
global function SDL_QuitSubSystem(flags: SDL_InitFlags): void <cimport,nodecl> end
global function SDL_WasInit(flags: SDL_InitFlags): SDL_InitFlags <cimport,nodecl> end
global function SDL_Quit(): void <cimport,nodecl> end
global function SDL_IsMainThread(): boolean <cimport,nodecl> end
global function SDL_RunOnMainThread(callback: SDL_MainThreadCallback, userdata: pointer, wait_complete: boolean): boolean <cimport,nodecl> end
global function SDL_SetAppMetadata(appname: cstring, appversion: cstring, appidentifier: cstring): boolean <cimport,nodecl> end
global function SDL_SetAppMetadataProperty(name: cstring, value: cstring): boolean <cimport,nodecl> end
global function SDL_GetAppMetadataProperty(name: cstring): cstring <cimport,nodecl> end
global function SDL_LoadObject(sofile: cstring): *SDL_SharedObject <cimport,nodecl> end
global function SDL_LoadFunction(handle: *SDL_SharedObject, name: cstring): SDL_FunctionPointer <cimport,nodecl> end
global function SDL_UnloadObject(handle: *SDL_SharedObject): void <cimport,nodecl> end
global function SDL_GetPreferredLocales(count: *cint): **SDL_Locale <cimport,nodecl> end
global function SDL_SetLogPriorities(priority: SDL_LogPriority): void <cimport,nodecl> end
global function SDL_SetLogPriority(category: cint, priority: SDL_LogPriority): void <cimport,nodecl> end
global function SDL_GetLogPriority(category: cint): SDL_LogPriority <cimport,nodecl> end
global function SDL_ResetLogPriorities(): void <cimport,nodecl> end
global function SDL_SetLogPriorityPrefix(priority: SDL_LogPriority, prefix: cstring): boolean <cimport,nodecl> end
global function SDL_Log(fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function SDL_LogTrace(category: cint, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function SDL_LogVerbose(category: cint, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function SDL_LogDebug(category: cint, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function SDL_LogInfo(category: cint, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function SDL_LogWarn(category: cint, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function SDL_LogError(category: cint, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function SDL_LogCritical(category: cint, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function SDL_LogMessage(category: cint, priority: SDL_LogPriority, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function SDL_LogMessageV(category: cint, priority: SDL_LogPriority, fmt: cstring, ap: cvalist): void <cimport,nodecl> end
global function SDL_GetDefaultLogOutputFunction(): SDL_LogOutputFunction <cimport,nodecl> end
global function SDL_GetLogOutputFunction(callback: *SDL_LogOutputFunction, userdata: *pointer): void <cimport,nodecl> end
global function SDL_SetLogOutputFunction(callback: SDL_LogOutputFunction, userdata: pointer): void <cimport,nodecl> end
global function SDL_ShowMessageBox(messageboxdata: *SDL_MessageBoxData, buttonid: *cint): boolean <cimport,nodecl> end
global function SDL_ShowSimpleMessageBox(flags: SDL_MessageBoxFlags, title: cstring, message: cstring, window: *SDL_Window): boolean <cimport,nodecl> end
global function SDL_Metal_CreateView(window: *SDL_Window): SDL_MetalView <cimport,nodecl> end
global function SDL_Metal_DestroyView(view: SDL_MetalView): void <cimport,nodecl> end
global function SDL_Metal_GetLayer(view: SDL_MetalView): pointer <cimport,nodecl> end
global function SDL_OpenURL(url: cstring): boolean <cimport,nodecl> end
global function SDL_GetPlatform(): cstring <cimport,nodecl> end
global function SDL_CreateProcess(args: *cstring, pipe_stdio: boolean): *SDL_Process <cimport,nodecl> end
global function SDL_CreateProcessWithProperties(props: SDL_PropertiesID): *SDL_Process <cimport,nodecl> end
global function SDL_GetProcessProperties(process: *SDL_Process): SDL_PropertiesID <cimport,nodecl> end
global function SDL_ReadProcess(process: *SDL_Process, datasize: *csize, exitcode: *cint): pointer <cimport,nodecl> end
global function SDL_GetProcessInput(process: *SDL_Process): *SDL_IOStream <cimport,nodecl> end
global function SDL_GetProcessOutput(process: *SDL_Process): *SDL_IOStream <cimport,nodecl> end
global function SDL_KillProcess(process: *SDL_Process, force: boolean): boolean <cimport,nodecl> end
global function SDL_WaitProcess(process: *SDL_Process, block: boolean, exitcode: *cint): boolean <cimport,nodecl> end
global function SDL_DestroyProcess(process: *SDL_Process): void <cimport,nodecl> end
global function SDL_GetNumRenderDrivers(): cint <cimport,nodecl> end
global function SDL_GetRenderDriver(index: cint): cstring <cimport,nodecl> end
global function SDL_CreateWindowAndRenderer(title: cstring, width: cint, height: cint, window_flags: SDL_WindowFlags, window: **SDL_Window, renderer: **SDL_Renderer): boolean <cimport,nodecl> end
global function SDL_CreateRenderer(window: *SDL_Window, name: cstring): *SDL_Renderer <cimport,nodecl> end
global function SDL_CreateRendererWithProperties(props: SDL_PropertiesID): *SDL_Renderer <cimport,nodecl> end
global function SDL_CreateSoftwareRenderer(surface: *SDL_Surface): *SDL_Renderer <cimport,nodecl> end
global function SDL_GetRenderer(window: *SDL_Window): *SDL_Renderer <cimport,nodecl> end
global function SDL_GetRenderWindow(renderer: *SDL_Renderer): *SDL_Window <cimport,nodecl> end
global function SDL_GetRendererName(renderer: *SDL_Renderer): cstring <cimport,nodecl> end
global function SDL_GetRendererProperties(renderer: *SDL_Renderer): SDL_PropertiesID <cimport,nodecl> end
global function SDL_GetRenderOutputSize(renderer: *SDL_Renderer, w: *cint, h: *cint): boolean <cimport,nodecl> end
global function SDL_GetCurrentRenderOutputSize(renderer: *SDL_Renderer, w: *cint, h: *cint): boolean <cimport,nodecl> end
global function SDL_CreateTexture(renderer: *SDL_Renderer, format: SDL_PixelFormat, access: SDL_TextureAccess, w: cint, h: cint): *SDL_Texture <cimport,nodecl> end
global function SDL_CreateTextureFromSurface(renderer: *SDL_Renderer, surface: *SDL_Surface): *SDL_Texture <cimport,nodecl> end
global function SDL_CreateTextureWithProperties(renderer: *SDL_Renderer, props: SDL_PropertiesID): *SDL_Texture <cimport,nodecl> end
global function SDL_GetTextureProperties(texture: *SDL_Texture): SDL_PropertiesID <cimport,nodecl> end
global function SDL_GetRendererFromTexture(texture: *SDL_Texture): *SDL_Renderer <cimport,nodecl> end
global function SDL_GetTextureSize(texture: *SDL_Texture, w: *float32, h: *float32): boolean <cimport,nodecl> end
global function SDL_SetTextureColorMod(texture: *SDL_Texture, r: uint8, g: uint8, b: uint8): boolean <cimport,nodecl> end
global function SDL_SetTextureColorModFloat(texture: *SDL_Texture, r: float32, g: float32, b: float32): boolean <cimport,nodecl> end
global function SDL_GetTextureColorMod(texture: *SDL_Texture, r: *uint8, g: *uint8, b: *uint8): boolean <cimport,nodecl> end
global function SDL_GetTextureColorModFloat(texture: *SDL_Texture, r: *float32, g: *float32, b: *float32): boolean <cimport,nodecl> end
global function SDL_SetTextureAlphaMod(texture: *SDL_Texture, alpha: uint8): boolean <cimport,nodecl> end
global function SDL_SetTextureAlphaModFloat(texture: *SDL_Texture, alpha: float32): boolean <cimport,nodecl> end
global function SDL_GetTextureAlphaMod(texture: *SDL_Texture, alpha: *uint8): boolean <cimport,nodecl> end
global function SDL_GetTextureAlphaModFloat(texture: *SDL_Texture, alpha: *float32): boolean <cimport,nodecl> end
global function SDL_SetTextureBlendMode(texture: *SDL_Texture, blendMode: SDL_BlendMode): boolean <cimport,nodecl> end
global function SDL_GetTextureBlendMode(texture: *SDL_Texture, blendMode: *SDL_BlendMode): boolean <cimport,nodecl> end
global function SDL_SetTextureScaleMode(texture: *SDL_Texture, scaleMode: SDL_ScaleMode): boolean <cimport,nodecl> end
global function SDL_GetTextureScaleMode(texture: *SDL_Texture, scaleMode: *SDL_ScaleMode): boolean <cimport,nodecl> end
global function SDL_UpdateTexture(texture: *SDL_Texture, rect: *SDL_Rect, pixels: pointer, pitch: cint): boolean <cimport,nodecl> end
global function SDL_UpdateYUVTexture(texture: *SDL_Texture, rect: *SDL_Rect, Yplane: *uint8, Ypitch: cint, Uplane: *uint8, Upitch: cint, Vplane: *uint8, Vpitch: cint): boolean <cimport,nodecl> end
global function SDL_UpdateNVTexture(texture: *SDL_Texture, rect: *SDL_Rect, Yplane: *uint8, Ypitch: cint, UVplane: *uint8, UVpitch: cint): boolean <cimport,nodecl> end
global function SDL_LockTexture(texture: *SDL_Texture, rect: *SDL_Rect, pixels: *pointer, pitch: *cint): boolean <cimport,nodecl> end
global function SDL_LockTextureToSurface(texture: *SDL_Texture, rect: *SDL_Rect, surface: **SDL_Surface): boolean <cimport,nodecl> end
global function SDL_UnlockTexture(texture: *SDL_Texture): void <cimport,nodecl> end
global function SDL_SetRenderTarget(renderer: *SDL_Renderer, texture: *SDL_Texture): boolean <cimport,nodecl> end
global function SDL_GetRenderTarget(renderer: *SDL_Renderer): *SDL_Texture <cimport,nodecl> end
global function SDL_SetRenderLogicalPresentation(renderer: *SDL_Renderer, w: cint, h: cint, mode: SDL_RendererLogicalPresentation): boolean <cimport,nodecl> end
global function SDL_GetRenderLogicalPresentation(renderer: *SDL_Renderer, w: *cint, h: *cint, mode: *SDL_RendererLogicalPresentation): boolean <cimport,nodecl> end
global function SDL_GetRenderLogicalPresentationRect(renderer: *SDL_Renderer, rect: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_RenderCoordinatesFromWindow(renderer: *SDL_Renderer, window_x: float32, window_y: float32, x: *float32, y: *float32): boolean <cimport,nodecl> end
global function SDL_RenderCoordinatesToWindow(renderer: *SDL_Renderer, x: float32, y: float32, window_x: *float32, window_y: *float32): boolean <cimport,nodecl> end
global function SDL_ConvertEventToRenderCoordinates(renderer: *SDL_Renderer, event: *SDL_Event): boolean <cimport,nodecl> end
global function SDL_SetRenderViewport(renderer: *SDL_Renderer, rect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_GetRenderViewport(renderer: *SDL_Renderer, rect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_RenderViewportSet(renderer: *SDL_Renderer): boolean <cimport,nodecl> end
global function SDL_GetRenderSafeArea(renderer: *SDL_Renderer, rect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_SetRenderClipRect(renderer: *SDL_Renderer, rect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_GetRenderClipRect(renderer: *SDL_Renderer, rect: *SDL_Rect): boolean <cimport,nodecl> end
global function SDL_RenderClipEnabled(renderer: *SDL_Renderer): boolean <cimport,nodecl> end
global function SDL_SetRenderScale(renderer: *SDL_Renderer, scaleX: float32, scaleY: float32): boolean <cimport,nodecl> end
global function SDL_GetRenderScale(renderer: *SDL_Renderer, scaleX: *float32, scaleY: *float32): boolean <cimport,nodecl> end
global function SDL_SetRenderDrawColor(renderer: *SDL_Renderer, r: uint8, g: uint8, b: uint8, a: uint8): boolean <cimport,nodecl> end
global function SDL_SetRenderDrawColorFloat(renderer: *SDL_Renderer, r: float32, g: float32, b: float32, a: float32): boolean <cimport,nodecl> end
global function SDL_GetRenderDrawColor(renderer: *SDL_Renderer, r: *uint8, g: *uint8, b: *uint8, a: *uint8): boolean <cimport,nodecl> end
global function SDL_GetRenderDrawColorFloat(renderer: *SDL_Renderer, r: *float32, g: *float32, b: *float32, a: *float32): boolean <cimport,nodecl> end
global function SDL_SetRenderColorScale(renderer: *SDL_Renderer, scale: float32): boolean <cimport,nodecl> end
global function SDL_GetRenderColorScale(renderer: *SDL_Renderer, scale: *float32): boolean <cimport,nodecl> end
global function SDL_SetRenderDrawBlendMode(renderer: *SDL_Renderer, blendMode: SDL_BlendMode): boolean <cimport,nodecl> end
global function SDL_GetRenderDrawBlendMode(renderer: *SDL_Renderer, blendMode: *SDL_BlendMode): boolean <cimport,nodecl> end
global function SDL_RenderClear(renderer: *SDL_Renderer): boolean <cimport,nodecl> end
global function SDL_RenderPoint(renderer: *SDL_Renderer, x: float32, y: float32): boolean <cimport,nodecl> end
global function SDL_RenderPoints(renderer: *SDL_Renderer, points: *SDL_FPoint, count: cint): boolean <cimport,nodecl> end
global function SDL_RenderLine(renderer: *SDL_Renderer, x1: float32, y1: float32, x2: float32, y2: float32): boolean <cimport,nodecl> end
global function SDL_RenderLines(renderer: *SDL_Renderer, points: *SDL_FPoint, count: cint): boolean <cimport,nodecl> end
global function SDL_RenderRect(renderer: *SDL_Renderer, rect: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_RenderRects(renderer: *SDL_Renderer, rects: *SDL_FRect, count: cint): boolean <cimport,nodecl> end
global function SDL_RenderFillRect(renderer: *SDL_Renderer, rect: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_RenderFillRects(renderer: *SDL_Renderer, rects: *SDL_FRect, count: cint): boolean <cimport,nodecl> end
global function SDL_RenderTexture(renderer: *SDL_Renderer, texture: *SDL_Texture, srcrect: *SDL_FRect, dstrect: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_RenderTextureRotated(renderer: *SDL_Renderer, texture: *SDL_Texture, srcrect: *SDL_FRect, dstrect: *SDL_FRect, angle: float64, center: *SDL_FPoint, flip: SDL_FlipMode): boolean <cimport,nodecl> end
global function SDL_RenderTextureAffine(renderer: *SDL_Renderer, texture: *SDL_Texture, srcrect: *SDL_FRect, origin: *SDL_FPoint, right: *SDL_FPoint, down: *SDL_FPoint): boolean <cimport,nodecl> end
global function SDL_RenderTextureTiled(renderer: *SDL_Renderer, texture: *SDL_Texture, srcrect: *SDL_FRect, scale: float32, dstrect: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_RenderTexture9Grid(renderer: *SDL_Renderer, texture: *SDL_Texture, srcrect: *SDL_FRect, left_width: float32, right_width: float32, top_height: float32, bottom_height: float32, scale: float32, dstrect: *SDL_FRect): boolean <cimport,nodecl> end
global function SDL_RenderGeometry(renderer: *SDL_Renderer, texture: *SDL_Texture, vertices: *SDL_Vertex, num_vertices: cint, indices: *cint, num_indices: cint): boolean <cimport,nodecl> end
global function SDL_RenderGeometryRaw(renderer: *SDL_Renderer, texture: *SDL_Texture, xy: *float32, xy_stride: cint, color: *SDL_FColor, color_stride: cint, uv: *float32, uv_stride: cint, num_vertices: cint, indices: pointer, num_indices: cint, size_indices: cint): boolean <cimport,nodecl> end
global function SDL_RenderReadPixels(renderer: *SDL_Renderer, rect: *SDL_Rect): *SDL_Surface <cimport,nodecl> end
global function SDL_RenderPresent(renderer: *SDL_Renderer): boolean <cimport,nodecl> end
global function SDL_DestroyTexture(texture: *SDL_Texture): void <cimport,nodecl> end
global function SDL_DestroyRenderer(renderer: *SDL_Renderer): void <cimport,nodecl> end
global function SDL_FlushRenderer(renderer: *SDL_Renderer): boolean <cimport,nodecl> end
global function SDL_GetRenderMetalLayer(renderer: *SDL_Renderer): pointer <cimport,nodecl> end
global function SDL_GetRenderMetalCommandEncoder(renderer: *SDL_Renderer): pointer <cimport,nodecl> end
global function SDL_AddVulkanRenderSemaphores(renderer: *SDL_Renderer, wait_stage_mask: uint32, wait_semaphore: int64, signal_semaphore: int64): boolean <cimport,nodecl> end
global function SDL_SetRenderVSync(renderer: *SDL_Renderer, vsync: cint): boolean <cimport,nodecl> end
global function SDL_GetRenderVSync(renderer: *SDL_Renderer, vsync: *cint): boolean <cimport,nodecl> end
global function SDL_RenderDebugText(renderer: *SDL_Renderer, x: float32, y: float32, str: cstring): boolean <cimport,nodecl> end
global function SDL_RenderDebugTextFormat(renderer: *SDL_Renderer, x: float32, y: float32, fmt: cstring, ...: cvarargs): boolean <cimport,nodecl> end
global function SDL_OpenTitleStorage(override: cstring, props: SDL_PropertiesID): *SDL_Storage <cimport,nodecl> end
global function SDL_OpenUserStorage(org: cstring, app: cstring, props: SDL_PropertiesID): *SDL_Storage <cimport,nodecl> end
global function SDL_OpenFileStorage(path: cstring): *SDL_Storage <cimport,nodecl> end
global function SDL_OpenStorage(iface: *SDL_StorageInterface, userdata: pointer): *SDL_Storage <cimport,nodecl> end
global function SDL_CloseStorage(storage: *SDL_Storage): boolean <cimport,nodecl> end
global function SDL_StorageReady(storage: *SDL_Storage): boolean <cimport,nodecl> end
global function SDL_GetStorageFileSize(storage: *SDL_Storage, path: cstring, length: *uint64): boolean <cimport,nodecl> end
global function SDL_ReadStorageFile(storage: *SDL_Storage, path: cstring, destination: pointer, length: uint64): boolean <cimport,nodecl> end
global function SDL_WriteStorageFile(storage: *SDL_Storage, path: cstring, source: pointer, length: uint64): boolean <cimport,nodecl> end
global function SDL_CreateStorageDirectory(storage: *SDL_Storage, path: cstring): boolean <cimport,nodecl> end
global function SDL_EnumerateStorageDirectory(storage: *SDL_Storage, path: cstring, callback: SDL_EnumerateDirectoryCallback, userdata: pointer): boolean <cimport,nodecl> end
global function SDL_RemoveStoragePath(storage: *SDL_Storage, path: cstring): boolean <cimport,nodecl> end
global function SDL_RenameStoragePath(storage: *SDL_Storage, oldpath: cstring, newpath: cstring): boolean <cimport,nodecl> end
global function SDL_CopyStorageFile(storage: *SDL_Storage, oldpath: cstring, newpath: cstring): boolean <cimport,nodecl> end
global function SDL_GetStoragePathInfo(storage: *SDL_Storage, path: cstring, info: *SDL_PathInfo): boolean <cimport,nodecl> end
global function SDL_GetStorageSpaceRemaining(storage: *SDL_Storage): uint64 <cimport,nodecl> end
global function SDL_GlobStorageDirectory(storage: *SDL_Storage, path: cstring, pattern: cstring, flags: SDL_GlobFlags, count: *cint): *cstring <cimport,nodecl> end
global function SDL_SetWindowsMessageHook(callback: SDL_WindowsMessageHook, userdata: pointer): void <cimport,nodecl> end
global function SDL_GetDirect3D9AdapterIndex(displayID: SDL_DisplayID): cint <cimport,nodecl> end
global function SDL_GetDXGIOutputInfo(displayID: SDL_DisplayID, adapterIndex: *cint, outputIndex: *cint): boolean <cimport,nodecl> end
global function SDL_SetX11EventHook(callback: SDL_X11EventHook, userdata: pointer): void <cimport,nodecl> end
global function SDL_IsTablet(): boolean <cimport,nodecl> end
global function SDL_IsTV(): boolean <cimport,nodecl> end
global function SDL_GetSandbox(): SDL_Sandbox <cimport,nodecl> end
global function SDL_OnApplicationWillTerminate(): void <cimport,nodecl> end
global function SDL_OnApplicationDidReceiveMemoryWarning(): void <cimport,nodecl> end
global function SDL_OnApplicationWillEnterBackground(): void <cimport,nodecl> end
global function SDL_OnApplicationDidEnterBackground(): void <cimport,nodecl> end
global function SDL_OnApplicationWillEnterForeground(): void <cimport,nodecl> end
global function SDL_OnApplicationDidEnterForeground(): void <cimport,nodecl> end
global function SDL_GetDateTimeLocalePreferences(dateFormat: *SDL_DateFormat, timeFormat: *SDL_TimeFormat): boolean <cimport,nodecl> end
global function SDL_GetCurrentTime(ticks: *SDL_Time): boolean <cimport,nodecl> end
global function SDL_TimeToDateTime(ticks: SDL_Time, dt: *SDL_DateTime, localTime: boolean): boolean <cimport,nodecl> end
global function SDL_DateTimeToTime(dt: *SDL_DateTime, ticks: *SDL_Time): boolean <cimport,nodecl> end
global function SDL_TimeToWindows(ticks: SDL_Time, dwLowDateTime: *uint32, dwHighDateTime: *uint32): void <cimport,nodecl> end
global function SDL_TimeFromWindows(dwLowDateTime: uint32, dwHighDateTime: uint32): SDL_Time <cimport,nodecl> end
global function SDL_GetDaysInMonth(year: cint, month: cint): cint <cimport,nodecl> end
global function SDL_GetDayOfYear(year: cint, month: cint, day: cint): cint <cimport,nodecl> end
global function SDL_GetDayOfWeek(year: cint, month: cint, day: cint): cint <cimport,nodecl> end
global function SDL_GetTicks(): uint64 <cimport,nodecl> end
global function SDL_GetTicksNS(): uint64 <cimport,nodecl> end
global function SDL_GetPerformanceCounter(): uint64 <cimport,nodecl> end
global function SDL_GetPerformanceFrequency(): uint64 <cimport,nodecl> end
global function SDL_Delay(ms: uint32): void <cimport,nodecl> end
global function SDL_DelayNS(ns: uint64): void <cimport,nodecl> end
global function SDL_DelayPrecise(ns: uint64): void <cimport,nodecl> end
global function SDL_AddTimer(interval: uint32, callback: SDL_TimerCallback, userdata: pointer): SDL_TimerID <cimport,nodecl> end
global function SDL_AddTimerNS(interval: uint64, callback: SDL_NSTimerCallback, userdata: pointer): SDL_TimerID <cimport,nodecl> end
global function SDL_RemoveTimer(id: SDL_TimerID): boolean <cimport,nodecl> end
global function SDL_CreateTray(icon: *SDL_Surface, tooltip: cstring): *SDL_Tray <cimport,nodecl> end
global function SDL_SetTrayIcon(tray: *SDL_Tray, icon: *SDL_Surface): void <cimport,nodecl> end
global function SDL_SetTrayTooltip(tray: *SDL_Tray, tooltip: cstring): void <cimport,nodecl> end
global function SDL_CreateTrayMenu(tray: *SDL_Tray): *SDL_TrayMenu <cimport,nodecl> end
global function SDL_CreateTraySubmenu(entry: *SDL_TrayEntry): *SDL_TrayMenu <cimport,nodecl> end
global function SDL_GetTrayMenu(tray: *SDL_Tray): *SDL_TrayMenu <cimport,nodecl> end
global function SDL_GetTraySubmenu(entry: *SDL_TrayEntry): *SDL_TrayMenu <cimport,nodecl> end
global function SDL_GetTrayEntries(menu: *SDL_TrayMenu, count: *cint): **SDL_TrayEntry <cimport,nodecl> end
global function SDL_RemoveTrayEntry(entry: *SDL_TrayEntry): void <cimport,nodecl> end
global function SDL_InsertTrayEntryAt(menu: *SDL_TrayMenu, pos: cint, label: cstring, flags: SDL_TrayEntryFlags): *SDL_TrayEntry <cimport,nodecl> end
global function SDL_SetTrayEntryLabel(entry: *SDL_TrayEntry, label: cstring): void <cimport,nodecl> end
global function SDL_GetTrayEntryLabel(entry: *SDL_TrayEntry): cstring <cimport,nodecl> end
global function SDL_SetTrayEntryChecked(entry: *SDL_TrayEntry, checked: boolean): void <cimport,nodecl> end
global function SDL_GetTrayEntryChecked(entry: *SDL_TrayEntry): boolean <cimport,nodecl> end
global function SDL_SetTrayEntryEnabled(entry: *SDL_TrayEntry, enabled: boolean): void <cimport,nodecl> end
global function SDL_GetTrayEntryEnabled(entry: *SDL_TrayEntry): boolean <cimport,nodecl> end
global function SDL_SetTrayEntryCallback(entry: *SDL_TrayEntry, callback: SDL_TrayCallback, userdata: pointer): void <cimport,nodecl> end
global function SDL_ClickTrayEntry(entry: *SDL_TrayEntry): void <cimport,nodecl> end
global function SDL_DestroyTray(tray: *SDL_Tray): void <cimport,nodecl> end
global function SDL_GetTrayEntryParent(entry: *SDL_TrayEntry): *SDL_TrayMenu <cimport,nodecl> end
global function SDL_GetTrayMenuParentEntry(menu: *SDL_TrayMenu): *SDL_TrayEntry <cimport,nodecl> end
global function SDL_GetTrayMenuParentTray(menu: *SDL_TrayMenu): *SDL_Tray <cimport,nodecl> end
global function SDL_UpdateTrays(): void <cimport,nodecl> end
global function SDL_GetVersion(): cint <cimport,nodecl> end
global function SDL_GetRevision(): cstring <cimport,nodecl> end
global SDL_PLATFORM_WINDOWS: cint <comptime> = 1
global SDL_WINAPI_FAMILY_PHONE: cint <comptime> = 0
global SDL_PLATFORM_WIN32: cint <comptime> = 1
global SDL_SIZE_MAX: culonglong <cimport,nodecl,const>
global SDL_MAX_SINT8: int8 <comptime> = 127
global SDL_MIN_SINT8: int8 <cimport,nodecl,const>
global SDL_MAX_UINT8: uint8 <comptime> = 255
global SDL_MIN_UINT8: uint8 <comptime> = 0
global SDL_MAX_SINT16: int16 <comptime> = 32767
global SDL_MIN_SINT16: int16 <cimport,nodecl,const>
global SDL_MAX_UINT16: uint16 <comptime> = 65535
global SDL_MIN_UINT16: uint16 <comptime> = 0
global SDL_MAX_SINT32: int32 <comptime> = 2147483647
global SDL_MIN_SINT32: int32 <cimport,nodecl,const>
global SDL_MAX_UINT32: uint32 <comptime> = 4294967295
global SDL_MIN_UINT32: uint32 <comptime> = 0
global SDL_FLT_EPSILON: float32 <comptime> = 1.1920928955078125e-7
global SDL_PRIs64: cstring <comptime> = "I64d"
global SDL_PRIu64: cstring <comptime> = "I64u"
global SDL_PRIx64: cstring <comptime> = "I64x"
global SDL_PRIX64: cstring <comptime> = "I64X"
global SDL_PRIs32: cstring <comptime> = "d"
global SDL_PRIu32: cstring <comptime> = "u"
global SDL_PRIx32: cstring <comptime> = "x"
global SDL_PRIX32: cstring <comptime> = "X"
global SDL_PRILL_PREFIX: cstring <comptime> = "I64"
global SDL_INVALID_UNICODE_CODEPOINT: cint <comptime> = 65533
global SDL_PI_D: float64 <comptime> = 3.141592653589793
global SDL_PI_F: float32 <comptime> = 3.141592653589793
global SDL_ASSERT_LEVEL: cint <comptime> = 2
global SDL_NULL_WHILE_LOOP_CONDITION: cint <comptime> = 0
global SDL_LIL_ENDIAN: cint <comptime> = 1234
global SDL_BIG_ENDIAN: cint <comptime> = 4321
global SDL_BYTEORDER: cint <comptime> = 1234
global SDL_FLOATWORDORDER: cint <comptime> = 1234
global function SDL_BeginThreadFunction(_Security: pointer, _StackSize: cuint, _StartAddress: function(a1: pointer): cuint, _ArgList: pointer, _InitFlag: cuint, _ThrdAddr: *cuint): usize <cimport,nodecl> end
global function SDL_EndThreadFunction(_Retval: cuint): void <cimport,nodecl> end
global SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER: cstring <comptime> = "SDL.thread.create.entry_function"
global SDL_PROP_THREAD_CREATE_NAME_STRING: cstring <comptime> = "SDL.thread.create.name"
global SDL_PROP_THREAD_CREATE_USERDATA_POINTER: cstring <comptime> = "SDL.thread.create.userdata"
global SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER: cstring <comptime> = "SDL.thread.create.stacksize"
global SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER: cstring <comptime> = "SDL.iostream.windows.handle"
global SDL_PROP_IOSTREAM_STDIO_FILE_POINTER: cstring <comptime> = "SDL.iostream.stdio.file"
global SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER: cstring <comptime> = "SDL.iostream.file_descriptor"
global SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER: cstring <comptime> = "SDL.iostream.android.aasset"
global SDL_PROP_IOSTREAM_MEMORY_POINTER: cstring <comptime> = "SDL.iostream.memory.base"
global SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER: cstring <comptime> = "SDL.iostream.memory.size"
global SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER: cstring <comptime> = "SDL.iostream.dynamic.memory"
global SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER: cstring <comptime> = "SDL.iostream.dynamic.chunksize"
global SDL_AUDIO_MASK_BITSIZE: cuint <comptime> = 255
global SDL_AUDIO_MASK_FLOAT: cint <comptime> = 256
global SDL_AUDIO_MASK_BIG_ENDIAN: cint <comptime> = 4096
global SDL_AUDIO_MASK_SIGNED: cint <comptime> = 32768
global SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK: SDL_AudioDeviceID <comptime> = 4294967295
global SDL_AUDIO_DEVICE_DEFAULT_RECORDING: SDL_AudioDeviceID <comptime> = 4294967294
global SDL_BLENDMODE_NONE: cuint <comptime> = 0
global SDL_BLENDMODE_BLEND: cuint <comptime> = 1
global SDL_BLENDMODE_BLEND_PREMULTIPLIED: cuint <comptime> = 16
global SDL_BLENDMODE_ADD: cuint <comptime> = 2
global SDL_BLENDMODE_ADD_PREMULTIPLIED: cuint <comptime> = 32
global SDL_BLENDMODE_MOD: cuint <comptime> = 4
global SDL_BLENDMODE_MUL: cuint <comptime> = 8
global SDL_BLENDMODE_INVALID: cuint <comptime> = 2147483647
global SDL_ALPHA_OPAQUE: cint <comptime> = 255
global SDL_ALPHA_OPAQUE_FLOAT: float32 <comptime> = 1.0
global SDL_ALPHA_TRANSPARENT: cint <comptime> = 0
global SDL_ALPHA_TRANSPARENT_FLOAT: float32 <comptime> = 0.0
global SDL_SURFACE_PREALLOCATED: cuint <comptime> = 1
global SDL_SURFACE_LOCK_NEEDED: cuint <comptime> = 2
global SDL_SURFACE_LOCKED: cuint <comptime> = 4
global SDL_SURFACE_SIMD_ALIGNED: cuint <comptime> = 8
global SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT: cstring <comptime> = "SDL.surface.SDR_white_point"
global SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT: cstring <comptime> = "SDL.surface.HDR_headroom"
global SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING: cstring <comptime> = "SDL.surface.tonemap"
global SDL_PROP_SURFACE_HOTSPOT_X_NUMBER: cstring <comptime> = "SDL.surface.hotspot.x"
global SDL_PROP_SURFACE_HOTSPOT_Y_NUMBER: cstring <comptime> = "SDL.surface.hotspot.y"
global SDL_CACHELINE_SIZE: cint <comptime> = 128
global SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER: cstring <comptime> = "SDL.video.wayland.wl_display"
global SDL_WINDOWPOS_UNDEFINED_MASK: cuint <comptime> = 536805376
global SDL_WINDOWPOS_CENTERED_MASK: cuint <comptime> = 805240832
global SDL_GL_CONTEXT_PROFILE_CORE: cint <comptime> = 1
global SDL_GL_CONTEXT_PROFILE_COMPATIBILITY: cint <comptime> = 2
global SDL_GL_CONTEXT_PROFILE_ES: cint <comptime> = 4
global SDL_GL_CONTEXT_DEBUG_FLAG: cint <comptime> = 1
global SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG: cint <comptime> = 2
global SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG: cint <comptime> = 4
global SDL_GL_CONTEXT_RESET_ISOLATION_FLAG: cint <comptime> = 8
global SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE: cint <comptime> = 0
global SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: cint <comptime> = 1
global SDL_GL_CONTEXT_RESET_NO_NOTIFICATION: cint <comptime> = 0
global SDL_GL_CONTEXT_RESET_LOSE_CONTEXT: cint <comptime> = 1
global SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN: cstring <comptime> = "SDL.display.HDR_enabled"
global SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER: cstring <comptime> = "SDL.display.KMSDRM.panel_orientation"
global SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN: cstring <comptime> = "SDL.window.create.always_on_top"
global SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN: cstring <comptime> = "SDL.window.create.borderless"
global SDL_PROP_WINDOW_CREATE_CONSTRAIN_POPUP_BOOLEAN: cstring <comptime> = "SDL.window.create.constrain_popup"
global SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN: cstring <comptime> = "SDL.window.create.focusable"
global SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN: cstring <comptime> = "SDL.window.create.external_graphics_context"
global SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER: cstring <comptime> = "SDL.window.create.flags"
global SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN: cstring <comptime> = "SDL.window.create.fullscreen"
global SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER: cstring <comptime> = "SDL.window.create.height"
global SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN: cstring <comptime> = "SDL.window.create.hidden"
global SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN: cstring <comptime> = "SDL.window.create.high_pixel_density"
global SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN: cstring <comptime> = "SDL.window.create.maximized"
global SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN: cstring <comptime> = "SDL.window.create.menu"
global SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN: cstring <comptime> = "SDL.window.create.metal"
global SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN: cstring <comptime> = "SDL.window.create.minimized"
global SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN: cstring <comptime> = "SDL.window.create.modal"
global SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN: cstring <comptime> = "SDL.window.create.mouse_grabbed"
global SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN: cstring <comptime> = "SDL.window.create.opengl"
global SDL_PROP_WINDOW_CREATE_PARENT_POINTER: cstring <comptime> = "SDL.window.create.parent"
global SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN: cstring <comptime> = "SDL.window.create.resizable"
global SDL_PROP_WINDOW_CREATE_TITLE_STRING: cstring <comptime> = "SDL.window.create.title"
global SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN: cstring <comptime> = "SDL.window.create.transparent"
global SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN: cstring <comptime> = "SDL.window.create.tooltip"
global SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN: cstring <comptime> = "SDL.window.create.utility"
global SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN: cstring <comptime> = "SDL.window.create.vulkan"
global SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER: cstring <comptime> = "SDL.window.create.width"
global SDL_PROP_WINDOW_CREATE_X_NUMBER: cstring <comptime> = "SDL.window.create.x"
global SDL_PROP_WINDOW_CREATE_Y_NUMBER: cstring <comptime> = "SDL.window.create.y"
global SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER: cstring <comptime> = "SDL.window.create.cocoa.window"
global SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER: cstring <comptime> = "SDL.window.create.cocoa.view"
global SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN: cstring <comptime> = "SDL.window.create.wayland.surface_role_custom"
global SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN: cstring <comptime> = "SDL.window.create.wayland.create_egl_window"
global SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER: cstring <comptime> = "SDL.window.create.wayland.wl_surface"
global SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER: cstring <comptime> = "SDL.window.create.win32.hwnd"
global SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER: cstring <comptime> = "SDL.window.create.win32.pixel_format_hwnd"
global SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER: cstring <comptime> = "SDL.window.create.x11.window"
global SDL_PROP_WINDOW_SHAPE_POINTER: cstring <comptime> = "SDL.window.shape"
global SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN: cstring <comptime> = "SDL.window.HDR_enabled"
global SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT: cstring <comptime> = "SDL.window.SDR_white_level"
global SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT: cstring <comptime> = "SDL.window.HDR_headroom"
global SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER: cstring <comptime> = "SDL.window.android.window"
global SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER: cstring <comptime> = "SDL.window.android.surface"
global SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER: cstring <comptime> = "SDL.window.uikit.window"
global SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER: cstring <comptime> = "SDL.window.uikit.metal_view_tag"
global SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER: cstring <comptime> = "SDL.window.uikit.opengl.framebuffer"
global SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER: cstring <comptime> = "SDL.window.uikit.opengl.renderbuffer"
global SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER: cstring <comptime> = "SDL.window.uikit.opengl.resolve_framebuffer"
global SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER: cstring <comptime> = "SDL.window.kmsdrm.dev_index"
global SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER: cstring <comptime> = "SDL.window.kmsdrm.drm_fd"
global SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER: cstring <comptime> = "SDL.window.kmsdrm.gbm_dev"
global SDL_PROP_WINDOW_COCOA_WINDOW_POINTER: cstring <comptime> = "SDL.window.cocoa.window"
global SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER: cstring <comptime> = "SDL.window.cocoa.metal_view_tag"
global SDL_PROP_WINDOW_OPENVR_OVERLAY_ID: cstring <comptime> = "SDL.window.openvr.overlay_id"
global SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER: cstring <comptime> = "SDL.window.vivante.display"
global SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER: cstring <comptime> = "SDL.window.vivante.window"
global SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER: cstring <comptime> = "SDL.window.vivante.surface"
global SDL_PROP_WINDOW_WIN32_HWND_POINTER: cstring <comptime> = "SDL.window.win32.hwnd"
global SDL_PROP_WINDOW_WIN32_HDC_POINTER: cstring <comptime> = "SDL.window.win32.hdc"
global SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER: cstring <comptime> = "SDL.window.win32.instance"
global SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER: cstring <comptime> = "SDL.window.wayland.display"
global SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER: cstring <comptime> = "SDL.window.wayland.surface"
global SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER: cstring <comptime> = "SDL.window.wayland.viewport"
global SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER: cstring <comptime> = "SDL.window.wayland.egl_window"
global SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER: cstring <comptime> = "SDL.window.wayland.xdg_surface"
global SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER: cstring <comptime> = "SDL.window.wayland.xdg_toplevel"
global SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING: cstring <comptime> = "SDL.window.wayland.xdg_toplevel_export_handle"
global SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER: cstring <comptime> = "SDL.window.wayland.xdg_popup"
global SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER: cstring <comptime> = "SDL.window.wayland.xdg_positioner"
global SDL_PROP_WINDOW_X11_DISPLAY_POINTER: cstring <comptime> = "SDL.window.x11.display"
global SDL_PROP_WINDOW_X11_SCREEN_NUMBER: cstring <comptime> = "SDL.window.x11.screen"
global SDL_PROP_WINDOW_X11_WINDOW_NUMBER: cstring <comptime> = "SDL.window.x11.window"
global SDL_WINDOW_SURFACE_VSYNC_DISABLED: cint <comptime> = 0
global SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE: cint <comptime> = -1
global SDL_PROP_FILE_DIALOG_FILTERS_POINTER: cstring <comptime> = "SDL.filedialog.filters"
global SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER: cstring <comptime> = "SDL.filedialog.nfilters"
global SDL_PROP_FILE_DIALOG_WINDOW_POINTER: cstring <comptime> = "SDL.filedialog.window"
global SDL_PROP_FILE_DIALOG_LOCATION_STRING: cstring <comptime> = "SDL.filedialog.location"
global SDL_PROP_FILE_DIALOG_MANY_BOOLEAN: cstring <comptime> = "SDL.filedialog.many"
global SDL_PROP_FILE_DIALOG_TITLE_STRING: cstring <comptime> = "SDL.filedialog.title"
global SDL_PROP_FILE_DIALOG_ACCEPT_STRING: cstring <comptime> = "SDL.filedialog.accept"
global SDL_PROP_FILE_DIALOG_CANCEL_STRING: cstring <comptime> = "SDL.filedialog.cancel"
global SDL_STANDARD_GRAVITY: float32 <comptime> = 9.80665
global SDL_JOYSTICK_AXIS_MAX: cint <comptime> = 32767
global SDL_JOYSTICK_AXIS_MIN: cint <comptime> = -32768
global SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN: cstring <comptime> = "SDL.joystick.cap.mono_led"
global SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN: cstring <comptime> = "SDL.joystick.cap.rgb_led"
global SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN: cstring <comptime> = "SDL.joystick.cap.player_led"
global SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN: cstring <comptime> = "SDL.joystick.cap.rumble"
global SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN: cstring <comptime> = "SDL.joystick.cap.trigger_rumble"
global SDL_HAT_CENTERED: cuint <comptime> = 0
global SDL_HAT_UP: cuint <comptime> = 1
global SDL_HAT_RIGHT: cuint <comptime> = 2
global SDL_HAT_DOWN: cuint <comptime> = 4
global SDL_HAT_LEFT: cuint <comptime> = 8
global SDL_HAT_RIGHTUP: cuint <comptime> = 3
global SDL_HAT_RIGHTDOWN: cuint <comptime> = 6
global SDL_HAT_LEFTUP: cuint <comptime> = 9
global SDL_HAT_LEFTDOWN: cuint <comptime> = 12
global SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN: cstring <comptime> = "SDL.joystick.cap.mono_led"
global SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN: cstring <comptime> = "SDL.joystick.cap.rgb_led"
global SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN: cstring <comptime> = "SDL.joystick.cap.player_led"
global SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN: cstring <comptime> = "SDL.joystick.cap.rumble"
global SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN: cstring <comptime> = "SDL.joystick.cap.trigger_rumble"
global SDL_KMOD_NONE: cuint <comptime> = 0
global SDL_KMOD_LSHIFT: cuint <comptime> = 1
global SDL_KMOD_RSHIFT: cuint <comptime> = 2
global SDL_KMOD_LEVEL5: cuint <comptime> = 4
global SDL_KMOD_LCTRL: cuint <comptime> = 64
global SDL_KMOD_RCTRL: cuint <comptime> = 128
global SDL_KMOD_LALT: cuint <comptime> = 256
global SDL_KMOD_RALT: cuint <comptime> = 512
global SDL_KMOD_LGUI: cuint <comptime> = 1024
global SDL_KMOD_RGUI: cuint <comptime> = 2048
global SDL_KMOD_NUM: cuint <comptime> = 4096
global SDL_KMOD_CAPS: cuint <comptime> = 8192
global SDL_KMOD_MODE: cuint <comptime> = 16384
global SDL_KMOD_SCROLL: cuint <comptime> = 32768
global SDL_KMOD_CTRL: cuint <comptime> = 192
global SDL_KMOD_SHIFT: cuint <comptime> = 3
global SDL_KMOD_ALT: cuint <comptime> = 768
global SDL_KMOD_GUI: cuint <comptime> = 3072
global SDL_PROP_TEXTINPUT_TYPE_NUMBER: cstring <comptime> = "SDL.textinput.type"
global SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER: cstring <comptime> = "SDL.textinput.capitalization"
global SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN: cstring <comptime> = "SDL.textinput.autocorrect"
global SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN: cstring <comptime> = "SDL.textinput.multiline"
global SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER: cstring <comptime> = "SDL.textinput.android.inputtype"
global SDL_BUTTON_LEFT: cint <comptime> = 1
global SDL_BUTTON_MIDDLE: cint <comptime> = 2
global SDL_BUTTON_RIGHT: cint <comptime> = 3
global SDL_BUTTON_X1: cint <comptime> = 4
global SDL_BUTTON_X2: cint <comptime> = 5
global SDL_TOUCH_MOUSEID: SDL_MouseID <cimport,nodecl,const>
global SDL_MOUSE_TOUCHID: SDL_TouchID <cimport,nodecl,const>
global SDL_PEN_MOUSEID: SDL_MouseID <cimport,nodecl,const>
global SDL_PEN_TOUCHID: SDL_TouchID <cimport,nodecl,const>
global SDL_PEN_INPUT_DOWN: cint <comptime> = 1
global SDL_PEN_INPUT_BUTTON_1: cint <comptime> = 2
global SDL_PEN_INPUT_BUTTON_2: cint <comptime> = 4
global SDL_PEN_INPUT_BUTTON_3: cint <comptime> = 8
global SDL_PEN_INPUT_BUTTON_4: cint <comptime> = 16
global SDL_PEN_INPUT_BUTTON_5: cint <comptime> = 32
global SDL_PEN_INPUT_ERASER_TIP: cint <comptime> = 1073741824
global SDL_GLOB_CASEINSENSITIVE: cint <comptime> = 1
global SDL_GPU_TEXTUREUSAGE_SAMPLER: cint <comptime> = 1
global SDL_GPU_TEXTUREUSAGE_COLOR_TARGET: cint <comptime> = 2
global SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET: cint <comptime> = 4
global SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ: cint <comptime> = 8
global SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ: cint <comptime> = 16
global SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE: cint <comptime> = 32
global SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE: cint <comptime> = 64
global SDL_GPU_BUFFERUSAGE_VERTEX: cint <comptime> = 1
global SDL_GPU_BUFFERUSAGE_INDEX: cint <comptime> = 2
global SDL_GPU_BUFFERUSAGE_INDIRECT: cint <comptime> = 4
global SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ: cint <comptime> = 8
global SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ: cint <comptime> = 16
global SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE: cint <comptime> = 32
global SDL_GPU_SHADERFORMAT_INVALID: cint <comptime> = 0
global SDL_GPU_SHADERFORMAT_PRIVATE: cint <comptime> = 1
global SDL_GPU_SHADERFORMAT_SPIRV: cint <comptime> = 2
global SDL_GPU_SHADERFORMAT_DXBC: cint <comptime> = 4
global SDL_GPU_SHADERFORMAT_DXIL: cint <comptime> = 8
global SDL_GPU_SHADERFORMAT_MSL: cint <comptime> = 16
global SDL_GPU_SHADERFORMAT_METALLIB: cint <comptime> = 32
global SDL_GPU_COLORCOMPONENT_R: cint <comptime> = 1
global SDL_GPU_COLORCOMPONENT_G: cint <comptime> = 2
global SDL_GPU_COLORCOMPONENT_B: cint <comptime> = 4
global SDL_GPU_COLORCOMPONENT_A: cint <comptime> = 8
global SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN: cstring <comptime> = "SDL.gpu.device.create.debugmode"
global SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN: cstring <comptime> = "SDL.gpu.device.create.preferlowpower"
global SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING: cstring <comptime> = "SDL.gpu.device.create.name"
global SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN: cstring <comptime> = "SDL.gpu.device.create.shaders.private"
global SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN: cstring <comptime> = "SDL.gpu.device.create.shaders.spirv"
global SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN: cstring <comptime> = "SDL.gpu.device.create.shaders.dxbc"
global SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN: cstring <comptime> = "SDL.gpu.device.create.shaders.dxil"
global SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN: cstring <comptime> = "SDL.gpu.device.create.shaders.msl"
global SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN: cstring <comptime> = "SDL.gpu.device.create.shaders.metallib"
global SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING: cstring <comptime> = "SDL.gpu.device.create.d3d12.semantic"
global SDL_PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING: cstring <comptime> = "SDL.gpu.computepipeline.create.name"
global SDL_PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING: cstring <comptime> = "SDL.gpu.graphicspipeline.create.name"
global SDL_PROP_GPU_SAMPLER_CREATE_NAME_STRING: cstring <comptime> = "SDL.gpu.sampler.create.name"
global SDL_PROP_GPU_SHADER_CREATE_NAME_STRING: cstring <comptime> = "SDL.gpu.shader.create.name"
global SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT: cstring <comptime> = "SDL.gpu.texture.create.d3d12.clear.r"
global SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT: cstring <comptime> = "SDL.gpu.texture.create.d3d12.clear.g"
global SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT: cstring <comptime> = "SDL.gpu.texture.create.d3d12.clear.b"
global SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT: cstring <comptime> = "SDL.gpu.texture.create.d3d12.clear.a"
global SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT: cstring <comptime> = "SDL.gpu.texture.create.d3d12.clear.depth"
global SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_NUMBER: cstring <comptime> = "SDL.gpu.texture.create.d3d12.clear.stencil"
global SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING: cstring <comptime> = "SDL.gpu.texture.create.name"
global SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING: cstring <comptime> = "SDL.gpu.buffer.create.name"
global SDL_PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING: cstring <comptime> = "SDL.gpu.transferbuffer.create.name"
global SDL_HAPTIC_CONSTANT: cint <comptime> = 1
global SDL_HAPTIC_SINE: cint <comptime> = 2
global SDL_HAPTIC_SQUARE: cint <comptime> = 4
global SDL_HAPTIC_TRIANGLE: cint <comptime> = 8
global SDL_HAPTIC_SAWTOOTHUP: cint <comptime> = 16
global SDL_HAPTIC_SAWTOOTHDOWN: cint <comptime> = 32
global SDL_HAPTIC_RAMP: cint <comptime> = 64
global SDL_HAPTIC_SPRING: cint <comptime> = 128
global SDL_HAPTIC_DAMPER: cint <comptime> = 256
global SDL_HAPTIC_INERTIA: cint <comptime> = 512
global SDL_HAPTIC_FRICTION: cint <comptime> = 1024
global SDL_HAPTIC_LEFTRIGHT: cint <comptime> = 2048
global SDL_HAPTIC_RESERVED1: cint <comptime> = 4096
global SDL_HAPTIC_RESERVED2: cint <comptime> = 8192
global SDL_HAPTIC_RESERVED3: cint <comptime> = 16384
global SDL_HAPTIC_CUSTOM: cint <comptime> = 32768
global SDL_HAPTIC_GAIN: cint <comptime> = 65536
global SDL_HAPTIC_AUTOCENTER: cint <comptime> = 131072
global SDL_HAPTIC_STATUS: cint <comptime> = 262144
global SDL_HAPTIC_PAUSE: cint <comptime> = 524288
global SDL_HAPTIC_POLAR: cint <comptime> = 0
global SDL_HAPTIC_CARTESIAN: cint <comptime> = 1
global SDL_HAPTIC_SPHERICAL: cint <comptime> = 2
global SDL_HAPTIC_STEERING_AXIS: cint <comptime> = 3
global SDL_HAPTIC_INFINITY: cuint <comptime> = 4294967295
global SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED: cstring <comptime> = "SDL_ALLOW_ALT_TAB_WHILE_GRABBED"
global SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY: cstring <comptime> = "SDL_ANDROID_ALLOW_RECREATE_ACTIVITY"
global SDL_HINT_ANDROID_BLOCK_ON_PAUSE: cstring <comptime> = "SDL_ANDROID_BLOCK_ON_PAUSE"
global SDL_HINT_ANDROID_LOW_LATENCY_AUDIO: cstring <comptime> = "SDL_ANDROID_LOW_LATENCY_AUDIO"
global SDL_HINT_ANDROID_TRAP_BACK_BUTTON: cstring <comptime> = "SDL_ANDROID_TRAP_BACK_BUTTON"
global SDL_HINT_APP_ID: cstring <comptime> = "SDL_APP_ID"
global SDL_HINT_APP_NAME: cstring <comptime> = "SDL_APP_NAME"
global SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS: cstring <comptime> = "SDL_APPLE_TV_CONTROLLER_UI_EVENTS"
global SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION: cstring <comptime> = "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION"
global SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE: cstring <comptime> = "SDL_AUDIO_ALSA_DEFAULT_DEVICE"
global SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE: cstring <comptime> = "SDL_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE"
global SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE: cstring <comptime> = "SDL_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE"
global SDL_HINT_AUDIO_CATEGORY: cstring <comptime> = "SDL_AUDIO_CATEGORY"
global SDL_HINT_AUDIO_CHANNELS: cstring <comptime> = "SDL_AUDIO_CHANNELS"
global SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME: cstring <comptime> = "SDL_AUDIO_DEVICE_APP_ICON_NAME"
global SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES: cstring <comptime> = "SDL_AUDIO_DEVICE_SAMPLE_FRAMES"
global SDL_HINT_AUDIO_DEVICE_STREAM_NAME: cstring <comptime> = "SDL_AUDIO_DEVICE_STREAM_NAME"
global SDL_HINT_AUDIO_DEVICE_STREAM_ROLE: cstring <comptime> = "SDL_AUDIO_DEVICE_STREAM_ROLE"
global SDL_HINT_AUDIO_DISK_INPUT_FILE: cstring <comptime> = "SDL_AUDIO_DISK_INPUT_FILE"
global SDL_HINT_AUDIO_DISK_OUTPUT_FILE: cstring <comptime> = "SDL_AUDIO_DISK_OUTPUT_FILE"
global SDL_HINT_AUDIO_DISK_TIMESCALE: cstring <comptime> = "SDL_AUDIO_DISK_TIMESCALE"
global SDL_HINT_AUDIO_DRIVER: cstring <comptime> = "SDL_AUDIO_DRIVER"
global SDL_HINT_AUDIO_DUMMY_TIMESCALE: cstring <comptime> = "SDL_AUDIO_DUMMY_TIMESCALE"
global SDL_HINT_AUDIO_FORMAT: cstring <comptime> = "SDL_AUDIO_FORMAT"
global SDL_HINT_AUDIO_FREQUENCY: cstring <comptime> = "SDL_AUDIO_FREQUENCY"
global SDL_HINT_AUDIO_INCLUDE_MONITORS: cstring <comptime> = "SDL_AUDIO_INCLUDE_MONITORS"
global SDL_HINT_AUTO_UPDATE_JOYSTICKS: cstring <comptime> = "SDL_AUTO_UPDATE_JOYSTICKS"
global SDL_HINT_AUTO_UPDATE_SENSORS: cstring <comptime> = "SDL_AUTO_UPDATE_SENSORS"
global SDL_HINT_BMP_SAVE_LEGACY_FORMAT: cstring <comptime> = "SDL_BMP_SAVE_LEGACY_FORMAT"
global SDL_HINT_CAMERA_DRIVER: cstring <comptime> = "SDL_CAMERA_DRIVER"
global SDL_HINT_CPU_FEATURE_MASK: cstring <comptime> = "SDL_CPU_FEATURE_MASK"
global SDL_HINT_JOYSTICK_DIRECTINPUT: cstring <comptime> = "SDL_JOYSTICK_DIRECTINPUT"
global SDL_HINT_FILE_DIALOG_DRIVER: cstring <comptime> = "SDL_FILE_DIALOG_DRIVER"
global SDL_HINT_DISPLAY_USABLE_BOUNDS: cstring <comptime> = "SDL_DISPLAY_USABLE_BOUNDS"
global SDL_HINT_EMSCRIPTEN_ASYNCIFY: cstring <comptime> = "SDL_EMSCRIPTEN_ASYNCIFY"
global SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR: cstring <comptime> = "SDL_EMSCRIPTEN_CANVAS_SELECTOR"
global SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT: cstring <comptime> = "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT"
global SDL_HINT_ENABLE_SCREEN_KEYBOARD: cstring <comptime> = "SDL_ENABLE_SCREEN_KEYBOARD"
global SDL_HINT_EVDEV_DEVICES: cstring <comptime> = "SDL_EVDEV_DEVICES"
global SDL_HINT_EVENT_LOGGING: cstring <comptime> = "SDL_EVENT_LOGGING"
global SDL_HINT_FORCE_RAISEWINDOW: cstring <comptime> = "SDL_FORCE_RAISEWINDOW"
global SDL_HINT_FRAMEBUFFER_ACCELERATION: cstring <comptime> = "SDL_FRAMEBUFFER_ACCELERATION"
global SDL_HINT_GAMECONTROLLERCONFIG: cstring <comptime> = "SDL_GAMECONTROLLERCONFIG"
global SDL_HINT_GAMECONTROLLERCONFIG_FILE: cstring <comptime> = "SDL_GAMECONTROLLERCONFIG_FILE"
global SDL_HINT_GAMECONTROLLERTYPE: cstring <comptime> = "SDL_GAMECONTROLLERTYPE"
global SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES: cstring <comptime> = "SDL_GAMECONTROLLER_IGNORE_DEVICES"
global SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT: cstring <comptime> = "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT"
global SDL_HINT_GAMECONTROLLER_SENSOR_FUSION: cstring <comptime> = "SDL_GAMECONTROLLER_SENSOR_FUSION"
global SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT: cstring <comptime> = "SDL_GDK_TEXTINPUT_DEFAULT_TEXT"
global SDL_HINT_GDK_TEXTINPUT_DESCRIPTION: cstring <comptime> = "SDL_GDK_TEXTINPUT_DESCRIPTION"
global SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH: cstring <comptime> = "SDL_GDK_TEXTINPUT_MAX_LENGTH"
global SDL_HINT_GDK_TEXTINPUT_SCOPE: cstring <comptime> = "SDL_GDK_TEXTINPUT_SCOPE"
global SDL_HINT_GDK_TEXTINPUT_TITLE: cstring <comptime> = "SDL_GDK_TEXTINPUT_TITLE"
global SDL_HINT_HIDAPI_LIBUSB: cstring <comptime> = "SDL_HIDAPI_LIBUSB"
global SDL_HINT_HIDAPI_LIBUSB_WHITELIST: cstring <comptime> = "SDL_HIDAPI_LIBUSB_WHITELIST"
global SDL_HINT_HIDAPI_UDEV: cstring <comptime> = "SDL_HIDAPI_UDEV"
global SDL_HINT_GPU_DRIVER: cstring <comptime> = "SDL_GPU_DRIVER"
global SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS: cstring <comptime> = "SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS"
global SDL_HINT_HIDAPI_IGNORE_DEVICES: cstring <comptime> = "SDL_HIDAPI_IGNORE_DEVICES"
global SDL_HINT_IME_IMPLEMENTED_UI: cstring <comptime> = "SDL_IME_IMPLEMENTED_UI"
global SDL_HINT_IOS_HIDE_HOME_INDICATOR: cstring <comptime> = "SDL_IOS_HIDE_HOME_INDICATOR"
global SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS: cstring <comptime> = "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"
global SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES: cstring <comptime> = "SDL_JOYSTICK_ARCADESTICK_DEVICES"
global SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED: cstring <comptime> = "SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED"
global SDL_HINT_JOYSTICK_BLACKLIST_DEVICES: cstring <comptime> = "SDL_JOYSTICK_BLACKLIST_DEVICES"
global SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED: cstring <comptime> = "SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED"
global SDL_HINT_JOYSTICK_DEVICE: cstring <comptime> = "SDL_JOYSTICK_DEVICE"
global SDL_HINT_JOYSTICK_ENHANCED_REPORTS: cstring <comptime> = "SDL_JOYSTICK_ENHANCED_REPORTS"
global SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES: cstring <comptime> = "SDL_JOYSTICK_FLIGHTSTICK_DEVICES"
global SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED: cstring <comptime> = "SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED"
global SDL_HINT_JOYSTICK_GAMEINPUT: cstring <comptime> = "SDL_JOYSTICK_GAMEINPUT"
global SDL_HINT_JOYSTICK_GAMECUBE_DEVICES: cstring <comptime> = "SDL_JOYSTICK_GAMECUBE_DEVICES"
global SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED: cstring <comptime> = "SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED"
global SDL_HINT_JOYSTICK_HIDAPI: cstring <comptime> = "SDL_JOYSTICK_HIDAPI"
global SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS"
global SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_GAMECUBE"
global SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE"
global SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_JOY_CONS"
global SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED"
global SDL_HINT_JOYSTICK_HIDAPI_LUNA: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_LUNA"
global SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC"
global SDL_HINT_JOYSTICK_HIDAPI_PS3: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_PS3"
global SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER"
global SDL_HINT_JOYSTICK_HIDAPI_PS4: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_PS4"
global SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL"
global SDL_HINT_JOYSTICK_HIDAPI_PS5: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_PS5"
global SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED"
global SDL_HINT_JOYSTICK_HIDAPI_SHIELD: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_SHIELD"
global SDL_HINT_JOYSTICK_HIDAPI_STADIA: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_STADIA"
global SDL_HINT_JOYSTICK_HIDAPI_STEAM: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_STEAM"
global SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_STEAM_HOME_LED"
global SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_STEAMDECK"
global SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_STEAM_HORI"
global SDL_HINT_JOYSTICK_HIDAPI_SWITCH: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_SWITCH"
global SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED"
global SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED"
global SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS"
global SDL_HINT_JOYSTICK_HIDAPI_WII: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_WII"
global SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED"
global SDL_HINT_JOYSTICK_HIDAPI_XBOX: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_XBOX"
global SDL_HINT_JOYSTICK_HIDAPI_XBOX_360: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_XBOX_360"
global SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED"
global SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS"
global SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_XBOX_ONE"
global SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED: cstring <comptime> = "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED"
global SDL_HINT_JOYSTICK_IOKIT: cstring <comptime> = "SDL_JOYSTICK_IOKIT"
global SDL_HINT_JOYSTICK_LINUX_CLASSIC: cstring <comptime> = "SDL_JOYSTICK_LINUX_CLASSIC"
global SDL_HINT_JOYSTICK_LINUX_DEADZONES: cstring <comptime> = "SDL_JOYSTICK_LINUX_DEADZONES"
global SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS: cstring <comptime> = "SDL_JOYSTICK_LINUX_DIGITAL_HATS"
global SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES: cstring <comptime> = "SDL_JOYSTICK_LINUX_HAT_DEADZONES"
global SDL_HINT_JOYSTICK_MFI: cstring <comptime> = "SDL_JOYSTICK_MFI"
global SDL_HINT_JOYSTICK_RAWINPUT: cstring <comptime> = "SDL_JOYSTICK_RAWINPUT"
global SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT: cstring <comptime> = "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT"
global SDL_HINT_JOYSTICK_ROG_CHAKRAM: cstring <comptime> = "SDL_JOYSTICK_ROG_CHAKRAM"
global SDL_HINT_JOYSTICK_THREAD: cstring <comptime> = "SDL_JOYSTICK_THREAD"
global SDL_HINT_JOYSTICK_THROTTLE_DEVICES: cstring <comptime> = "SDL_JOYSTICK_THROTTLE_DEVICES"
global SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED: cstring <comptime> = "SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED"
global SDL_HINT_JOYSTICK_WGI: cstring <comptime> = "SDL_JOYSTICK_WGI"
global SDL_HINT_JOYSTICK_WHEEL_DEVICES: cstring <comptime> = "SDL_JOYSTICK_WHEEL_DEVICES"
global SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED: cstring <comptime> = "SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED"
global SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES: cstring <comptime> = "SDL_JOYSTICK_ZERO_CENTERED_DEVICES"
global SDL_HINT_JOYSTICK_HAPTIC_AXES: cstring <comptime> = "SDL_JOYSTICK_HAPTIC_AXES"
global SDL_HINT_KEYCODE_OPTIONS: cstring <comptime> = "SDL_KEYCODE_OPTIONS"
global SDL_HINT_KMSDRM_DEVICE_INDEX: cstring <comptime> = "SDL_KMSDRM_DEVICE_INDEX"
global SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER: cstring <comptime> = "SDL_KMSDRM_REQUIRE_DRM_MASTER"
global SDL_HINT_LOGGING: cstring <comptime> = "SDL_LOGGING"
global SDL_HINT_MAC_BACKGROUND_APP: cstring <comptime> = "SDL_MAC_BACKGROUND_APP"
global SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK: cstring <comptime> = "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK"
global SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH: cstring <comptime> = "SDL_MAC_OPENGL_ASYNC_DISPATCH"
global SDL_HINT_MAC_OPTION_AS_ALT: cstring <comptime> = "SDL_MAC_OPTION_AS_ALT"
global SDL_HINT_MAC_SCROLL_MOMENTUM: cstring <comptime> = "SDL_MAC_SCROLL_MOMENTUM"
global SDL_HINT_MAIN_CALLBACK_RATE: cstring <comptime> = "SDL_MAIN_CALLBACK_RATE"
global SDL_HINT_MOUSE_AUTO_CAPTURE: cstring <comptime> = "SDL_MOUSE_AUTO_CAPTURE"
global SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS: cstring <comptime> = "SDL_MOUSE_DOUBLE_CLICK_RADIUS"
global SDL_HINT_MOUSE_DOUBLE_CLICK_TIME: cstring <comptime> = "SDL_MOUSE_DOUBLE_CLICK_TIME"
global SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR: cstring <comptime> = "SDL_MOUSE_DEFAULT_SYSTEM_CURSOR"
global SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE: cstring <comptime> = "SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE"
global SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH: cstring <comptime> = "SDL_MOUSE_FOCUS_CLICKTHROUGH"
global SDL_HINT_MOUSE_NORMAL_SPEED_SCALE: cstring <comptime> = "SDL_MOUSE_NORMAL_SPEED_SCALE"
global SDL_HINT_MOUSE_RELATIVE_MODE_CENTER: cstring <comptime> = "SDL_MOUSE_RELATIVE_MODE_CENTER"
global SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE: cstring <comptime> = "SDL_MOUSE_RELATIVE_SPEED_SCALE"
global SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE: cstring <comptime> = "SDL_MOUSE_RELATIVE_SYSTEM_SCALE"
global SDL_HINT_MOUSE_RELATIVE_WARP_MOTION: cstring <comptime> = "SDL_MOUSE_RELATIVE_WARP_MOTION"
global SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE: cstring <comptime> = "SDL_MOUSE_RELATIVE_CURSOR_VISIBLE"
global SDL_HINT_MOUSE_TOUCH_EVENTS: cstring <comptime> = "SDL_MOUSE_TOUCH_EVENTS"
global SDL_HINT_MUTE_CONSOLE_KEYBOARD: cstring <comptime> = "SDL_MUTE_CONSOLE_KEYBOARD"
global SDL_HINT_NO_SIGNAL_HANDLERS: cstring <comptime> = "SDL_NO_SIGNAL_HANDLERS"
global SDL_HINT_OPENGL_LIBRARY: cstring <comptime> = "SDL_OPENGL_LIBRARY"
global SDL_HINT_EGL_LIBRARY: cstring <comptime> = "SDL_EGL_LIBRARY"
global SDL_HINT_OPENGL_ES_DRIVER: cstring <comptime> = "SDL_OPENGL_ES_DRIVER"
global SDL_HINT_OPENVR_LIBRARY: cstring <comptime> = "SDL_OPENVR_LIBRARY"
global SDL_HINT_ORIENTATIONS: cstring <comptime> = "SDL_ORIENTATIONS"
global SDL_HINT_POLL_SENTINEL: cstring <comptime> = "SDL_POLL_SENTINEL"
global SDL_HINT_PREFERRED_LOCALES: cstring <comptime> = "SDL_PREFERRED_LOCALES"
global SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE: cstring <comptime> = "SDL_QUIT_ON_LAST_WINDOW_CLOSE"
global SDL_HINT_RENDER_DIRECT3D_THREADSAFE: cstring <comptime> = "SDL_RENDER_DIRECT3D_THREADSAFE"
global SDL_HINT_RENDER_DIRECT3D11_DEBUG: cstring <comptime> = "SDL_RENDER_DIRECT3D11_DEBUG"
global SDL_HINT_RENDER_VULKAN_DEBUG: cstring <comptime> = "SDL_RENDER_VULKAN_DEBUG"
global SDL_HINT_RENDER_GPU_DEBUG: cstring <comptime> = "SDL_RENDER_GPU_DEBUG"
global SDL_HINT_RENDER_GPU_LOW_POWER: cstring <comptime> = "SDL_RENDER_GPU_LOW_POWER"
global SDL_HINT_RENDER_DRIVER: cstring <comptime> = "SDL_RENDER_DRIVER"
global SDL_HINT_RENDER_LINE_METHOD: cstring <comptime> = "SDL_RENDER_LINE_METHOD"
global SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE: cstring <comptime> = "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE"
global SDL_HINT_RENDER_VSYNC: cstring <comptime> = "SDL_RENDER_VSYNC"
global SDL_HINT_RETURN_KEY_HIDES_IME: cstring <comptime> = "SDL_RETURN_KEY_HIDES_IME"
global SDL_HINT_ROG_GAMEPAD_MICE: cstring <comptime> = "SDL_ROG_GAMEPAD_MICE"
global SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED: cstring <comptime> = "SDL_ROG_GAMEPAD_MICE_EXCLUDED"
global SDL_HINT_RPI_VIDEO_LAYER: cstring <comptime> = "SDL_RPI_VIDEO_LAYER"
global SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME: cstring <comptime> = "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME"
global SDL_HINT_SHUTDOWN_DBUS_ON_QUIT: cstring <comptime> = "SDL_SHUTDOWN_DBUS_ON_QUIT"
global SDL_HINT_STORAGE_TITLE_DRIVER: cstring <comptime> = "SDL_STORAGE_TITLE_DRIVER"
global SDL_HINT_STORAGE_USER_DRIVER: cstring <comptime> = "SDL_STORAGE_USER_DRIVER"
global SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL: cstring <comptime> = "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL"
global SDL_HINT_THREAD_PRIORITY_POLICY: cstring <comptime> = "SDL_THREAD_PRIORITY_POLICY"
global SDL_HINT_TIMER_RESOLUTION: cstring <comptime> = "SDL_TIMER_RESOLUTION"
global SDL_HINT_TOUCH_MOUSE_EVENTS: cstring <comptime> = "SDL_TOUCH_MOUSE_EVENTS"
global SDL_HINT_TRACKPAD_IS_TOUCH_ONLY: cstring <comptime> = "SDL_TRACKPAD_IS_TOUCH_ONLY"
global SDL_HINT_TV_REMOTE_AS_JOYSTICK: cstring <comptime> = "SDL_TV_REMOTE_AS_JOYSTICK"
global SDL_HINT_VIDEO_ALLOW_SCREENSAVER: cstring <comptime> = "SDL_VIDEO_ALLOW_SCREENSAVER"
global SDL_HINT_VIDEO_DISPLAY_PRIORITY: cstring <comptime> = "SDL_VIDEO_DISPLAY_PRIORITY"
global SDL_HINT_VIDEO_DOUBLE_BUFFER: cstring <comptime> = "SDL_VIDEO_DOUBLE_BUFFER"
global SDL_HINT_VIDEO_DRIVER: cstring <comptime> = "SDL_VIDEO_DRIVER"
global SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES: cstring <comptime> = "SDL_VIDEO_DUMMY_SAVE_FRAMES"
global SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK: cstring <comptime> = "SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK"
global SDL_HINT_VIDEO_FORCE_EGL: cstring <comptime> = "SDL_VIDEO_FORCE_EGL"
global SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES: cstring <comptime> = "SDL_VIDEO_MAC_FULLSCREEN_SPACES"
global SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY: cstring <comptime> = "SDL_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY"
global SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS: cstring <comptime> = "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"
global SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES: cstring <comptime> = "SDL_VIDEO_OFFSCREEN_SAVE_FRAMES"
global SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS: cstring <comptime> = "SDL_VIDEO_SYNC_WINDOW_OPERATIONS"
global SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR: cstring <comptime> = "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR"
global SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION: cstring <comptime> = "SDL_VIDEO_WAYLAND_MODE_EMULATION"
global SDL_HINT_VIDEO_WAYLAND_MODE_SCALING: cstring <comptime> = "SDL_VIDEO_WAYLAND_MODE_SCALING"
global SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR: cstring <comptime> = "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR"
global SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY: cstring <comptime> = "SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY"
global SDL_HINT_VIDEO_WIN_D3DCOMPILER: cstring <comptime> = "SDL_VIDEO_WIN_D3DCOMPILER"
global SDL_HINT_VIDEO_X11_EXTERNAL_WINDOW_INPUT: cstring <comptime> = "SDL_VIDEO_X11_EXTERNAL_WINDOW_INPUT"
global SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR: cstring <comptime> = "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR"
global SDL_HINT_VIDEO_X11_NET_WM_PING: cstring <comptime> = "SDL_VIDEO_X11_NET_WM_PING"
global SDL_HINT_VIDEO_X11_NODIRECTCOLOR: cstring <comptime> = "SDL_VIDEO_X11_NODIRECTCOLOR"
global SDL_HINT_VIDEO_X11_SCALING_FACTOR: cstring <comptime> = "SDL_VIDEO_X11_SCALING_FACTOR"
global SDL_HINT_VIDEO_X11_VISUALID: cstring <comptime> = "SDL_VIDEO_X11_VISUALID"
global SDL_HINT_VIDEO_X11_WINDOW_VISUALID: cstring <comptime> = "SDL_VIDEO_X11_WINDOW_VISUALID"
global SDL_HINT_VIDEO_X11_XRANDR: cstring <comptime> = "SDL_VIDEO_X11_XRANDR"
global SDL_HINT_VITA_ENABLE_BACK_TOUCH: cstring <comptime> = "SDL_VITA_ENABLE_BACK_TOUCH"
global SDL_HINT_VITA_ENABLE_FRONT_TOUCH: cstring <comptime> = "SDL_VITA_ENABLE_FRONT_TOUCH"
global SDL_HINT_VITA_MODULE_PATH: cstring <comptime> = "SDL_VITA_MODULE_PATH"
global SDL_HINT_VITA_PVR_INIT: cstring <comptime> = "SDL_VITA_PVR_INIT"
global SDL_HINT_VITA_RESOLUTION: cstring <comptime> = "SDL_VITA_RESOLUTION"
global SDL_HINT_VITA_PVR_OPENGL: cstring <comptime> = "SDL_VITA_PVR_OPENGL"
global SDL_HINT_VITA_TOUCH_MOUSE_DEVICE: cstring <comptime> = "SDL_VITA_TOUCH_MOUSE_DEVICE"
global SDL_HINT_VULKAN_DISPLAY: cstring <comptime> = "SDL_VULKAN_DISPLAY"
global SDL_HINT_VULKAN_LIBRARY: cstring <comptime> = "SDL_VULKAN_LIBRARY"
global SDL_HINT_WAVE_FACT_CHUNK: cstring <comptime> = "SDL_WAVE_FACT_CHUNK"
global SDL_HINT_WAVE_CHUNK_LIMIT: cstring <comptime> = "SDL_WAVE_CHUNK_LIMIT"
global SDL_HINT_WAVE_RIFF_CHUNK_SIZE: cstring <comptime> = "SDL_WAVE_RIFF_CHUNK_SIZE"
global SDL_HINT_WAVE_TRUNCATION: cstring <comptime> = "SDL_WAVE_TRUNCATION"
global SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED: cstring <comptime> = "SDL_WINDOW_ACTIVATE_WHEN_RAISED"
global SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN: cstring <comptime> = "SDL_WINDOW_ACTIVATE_WHEN_SHOWN"
global SDL_HINT_WINDOW_ALLOW_TOPMOST: cstring <comptime> = "SDL_WINDOW_ALLOW_TOPMOST"
global SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN: cstring <comptime> = "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN"
global SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4: cstring <comptime> = "SDL_WINDOWS_CLOSE_ON_ALT_F4"
global SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS: cstring <comptime> = "SDL_WINDOWS_ENABLE_MENU_MNEMONICS"
global SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP: cstring <comptime> = "SDL_WINDOWS_ENABLE_MESSAGELOOP"
global SDL_HINT_WINDOWS_GAMEINPUT: cstring <comptime> = "SDL_WINDOWS_GAMEINPUT"
global SDL_HINT_WINDOWS_RAW_KEYBOARD: cstring <comptime> = "SDL_WINDOWS_RAW_KEYBOARD"
global SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL: cstring <comptime> = "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL"
global SDL_HINT_WINDOWS_INTRESOURCE_ICON: cstring <comptime> = "SDL_WINDOWS_INTRESOURCE_ICON"
global SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL: cstring <comptime> = "SDL_WINDOWS_INTRESOURCE_ICON_SMALL"
global SDL_HINT_WINDOWS_USE_D3D9EX: cstring <comptime> = "SDL_WINDOWS_USE_D3D9EX"
global SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE: cstring <comptime> = "SDL_WINDOWS_ERASE_BACKGROUND_MODE"
global SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT: cstring <comptime> = "SDL_X11_FORCE_OVERRIDE_REDIRECT"
global SDL_HINT_X11_WINDOW_TYPE: cstring <comptime> = "SDL_X11_WINDOW_TYPE"
global SDL_HINT_X11_XCB_LIBRARY: cstring <comptime> = "SDL_X11_XCB_LIBRARY"
global SDL_HINT_XINPUT_ENABLED: cstring <comptime> = "SDL_XINPUT_ENABLED"
global SDL_HINT_ASSERT: cstring <comptime> = "SDL_ASSERT"
global SDL_HINT_PEN_MOUSE_EVENTS: cstring <comptime> = "SDL_PEN_MOUSE_EVENTS"
global SDL_HINT_PEN_TOUCH_EVENTS: cstring <comptime> = "SDL_PEN_TOUCH_EVENTS"
global SDL_INIT_AUDIO: cuint <comptime> = 16
global SDL_INIT_VIDEO: cuint <comptime> = 32
global SDL_INIT_JOYSTICK: cuint <comptime> = 512
global SDL_INIT_HAPTIC: cuint <comptime> = 4096
global SDL_INIT_GAMEPAD: cuint <comptime> = 8192
global SDL_INIT_EVENTS: cuint <comptime> = 16384
global SDL_INIT_SENSOR: cuint <comptime> = 32768
global SDL_INIT_CAMERA: cuint <comptime> = 65536
global SDL_PROP_APP_METADATA_NAME_STRING: cstring <comptime> = "SDL.app.metadata.name"
global SDL_PROP_APP_METADATA_VERSION_STRING: cstring <comptime> = "SDL.app.metadata.version"
global SDL_PROP_APP_METADATA_IDENTIFIER_STRING: cstring <comptime> = "SDL.app.metadata.identifier"
global SDL_PROP_APP_METADATA_CREATOR_STRING: cstring <comptime> = "SDL.app.metadata.creator"
global SDL_PROP_APP_METADATA_COPYRIGHT_STRING: cstring <comptime> = "SDL.app.metadata.copyright"
global SDL_PROP_APP_METADATA_URL_STRING: cstring <comptime> = "SDL.app.metadata.url"
global SDL_PROP_APP_METADATA_TYPE_STRING: cstring <comptime> = "SDL.app.metadata.type"
global SDL_MESSAGEBOX_ERROR: cuint <comptime> = 16
global SDL_MESSAGEBOX_WARNING: cuint <comptime> = 32
global SDL_MESSAGEBOX_INFORMATION: cuint <comptime> = 64
global SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT: cuint <comptime> = 128
global SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT: cuint <comptime> = 256
global SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT: cuint <comptime> = 1
global SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT: cuint <comptime> = 2
global SDL_PROP_PROCESS_CREATE_ARGS_POINTER: cstring <comptime> = "SDL.process.create.args"
global SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER: cstring <comptime> = "SDL.process.create.environment"
global SDL_PROP_PROCESS_CREATE_STDIN_NUMBER: cstring <comptime> = "SDL.process.create.stdin_option"
global SDL_PROP_PROCESS_CREATE_STDIN_POINTER: cstring <comptime> = "SDL.process.create.stdin_source"
global SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER: cstring <comptime> = "SDL.process.create.stdout_option"
global SDL_PROP_PROCESS_CREATE_STDOUT_POINTER: cstring <comptime> = "SDL.process.create.stdout_source"
global SDL_PROP_PROCESS_CREATE_STDERR_NUMBER: cstring <comptime> = "SDL.process.create.stderr_option"
global SDL_PROP_PROCESS_CREATE_STDERR_POINTER: cstring <comptime> = "SDL.process.create.stderr_source"
global SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN: cstring <comptime> = "SDL.process.create.stderr_to_stdout"
global SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN: cstring <comptime> = "SDL.process.create.background"
global SDL_PROP_PROCESS_PID_NUMBER: cstring <comptime> = "SDL.process.pid"
global SDL_PROP_PROCESS_STDIN_POINTER: cstring <comptime> = "SDL.process.stdin"
global SDL_PROP_PROCESS_STDOUT_POINTER: cstring <comptime> = "SDL.process.stdout"
global SDL_PROP_PROCESS_STDERR_POINTER: cstring <comptime> = "SDL.process.stderr"
global SDL_PROP_PROCESS_BACKGROUND_BOOLEAN: cstring <comptime> = "SDL.process.background"
global SDL_SOFTWARE_RENDERER: cstring <comptime> = "software"
global SDL_PROP_RENDERER_CREATE_NAME_STRING: cstring <comptime> = "SDL.renderer.create.name"
global SDL_PROP_RENDERER_CREATE_WINDOW_POINTER: cstring <comptime> = "SDL.renderer.create.window"
global SDL_PROP_RENDERER_CREATE_SURFACE_POINTER: cstring <comptime> = "SDL.renderer.create.surface"
global SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER: cstring <comptime> = "SDL.renderer.create.output_colorspace"
global SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER: cstring <comptime> = "SDL.renderer.create.present_vsync"
global SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER: cstring <comptime> = "SDL.renderer.create.vulkan.instance"
global SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER: cstring <comptime> = "SDL.renderer.create.vulkan.surface"
global SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER: cstring <comptime> = "SDL.renderer.create.vulkan.physical_device"
global SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER: cstring <comptime> = "SDL.renderer.create.vulkan.device"
global SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER: cstring <comptime> = "SDL.renderer.create.vulkan.graphics_queue_family_index"
global SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER: cstring <comptime> = "SDL.renderer.create.vulkan.present_queue_family_index"
global SDL_PROP_RENDERER_NAME_STRING: cstring <comptime> = "SDL.renderer.name"
global SDL_PROP_RENDERER_WINDOW_POINTER: cstring <comptime> = "SDL.renderer.window"
global SDL_PROP_RENDERER_SURFACE_POINTER: cstring <comptime> = "SDL.renderer.surface"
global SDL_PROP_RENDERER_VSYNC_NUMBER: cstring <comptime> = "SDL.renderer.vsync"
global SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER: cstring <comptime> = "SDL.renderer.max_texture_size"
global SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER: cstring <comptime> = "SDL.renderer.texture_formats"
global SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER: cstring <comptime> = "SDL.renderer.output_colorspace"
global SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN: cstring <comptime> = "SDL.renderer.HDR_enabled"
global SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT: cstring <comptime> = "SDL.renderer.SDR_white_point"
global SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT: cstring <comptime> = "SDL.renderer.HDR_headroom"
global SDL_PROP_RENDERER_D3D9_DEVICE_POINTER: cstring <comptime> = "SDL.renderer.d3d9.device"
global SDL_PROP_RENDERER_D3D11_DEVICE_POINTER: cstring <comptime> = "SDL.renderer.d3d11.device"
global SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER: cstring <comptime> = "SDL.renderer.d3d11.swap_chain"
global SDL_PROP_RENDERER_D3D12_DEVICE_POINTER: cstring <comptime> = "SDL.renderer.d3d12.device"
global SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER: cstring <comptime> = "SDL.renderer.d3d12.swap_chain"
global SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER: cstring <comptime> = "SDL.renderer.d3d12.command_queue"
global SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER: cstring <comptime> = "SDL.renderer.vulkan.instance"
global SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER: cstring <comptime> = "SDL.renderer.vulkan.surface"
global SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER: cstring <comptime> = "SDL.renderer.vulkan.physical_device"
global SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER: cstring <comptime> = "SDL.renderer.vulkan.device"
global SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER: cstring <comptime> = "SDL.renderer.vulkan.graphics_queue_family_index"
global SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER: cstring <comptime> = "SDL.renderer.vulkan.present_queue_family_index"
global SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER: cstring <comptime> = "SDL.renderer.vulkan.swapchain_image_count"
global SDL_PROP_RENDERER_GPU_DEVICE_POINTER: cstring <comptime> = "SDL.renderer.gpu.device"
global SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER: cstring <comptime> = "SDL.texture.create.colorspace"
global SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER: cstring <comptime> = "SDL.texture.create.format"
global SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER: cstring <comptime> = "SDL.texture.create.access"
global SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER: cstring <comptime> = "SDL.texture.create.width"
global SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER: cstring <comptime> = "SDL.texture.create.height"
global SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT: cstring <comptime> = "SDL.texture.create.SDR_white_point"
global SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT: cstring <comptime> = "SDL.texture.create.HDR_headroom"
global SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER: cstring <comptime> = "SDL.texture.create.d3d11.texture"
global SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER: cstring <comptime> = "SDL.texture.create.d3d11.texture_u"
global SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER: cstring <comptime> = "SDL.texture.create.d3d11.texture_v"
global SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER: cstring <comptime> = "SDL.texture.create.d3d12.texture"
global SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER: cstring <comptime> = "SDL.texture.create.d3d12.texture_u"
global SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER: cstring <comptime> = "SDL.texture.create.d3d12.texture_v"
global SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER: cstring <comptime> = "SDL.texture.create.metal.pixelbuffer"
global SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER: cstring <comptime> = "SDL.texture.create.opengl.texture"
global SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER: cstring <comptime> = "SDL.texture.create.opengl.texture_uv"
global SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER: cstring <comptime> = "SDL.texture.create.opengl.texture_u"
global SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER: cstring <comptime> = "SDL.texture.create.opengl.texture_v"
global SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER: cstring <comptime> = "SDL.texture.create.opengles2.texture"
global SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER: cstring <comptime> = "SDL.texture.create.opengles2.texture_uv"
global SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER: cstring <comptime> = "SDL.texture.create.opengles2.texture_u"
global SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER: cstring <comptime> = "SDL.texture.create.opengles2.texture_v"
global SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER: cstring <comptime> = "SDL.texture.create.vulkan.texture"
global SDL_PROP_TEXTURE_COLORSPACE_NUMBER: cstring <comptime> = "SDL.texture.colorspace"
global SDL_PROP_TEXTURE_FORMAT_NUMBER: cstring <comptime> = "SDL.texture.format"
global SDL_PROP_TEXTURE_ACCESS_NUMBER: cstring <comptime> = "SDL.texture.access"
global SDL_PROP_TEXTURE_WIDTH_NUMBER: cstring <comptime> = "SDL.texture.width"
global SDL_PROP_TEXTURE_HEIGHT_NUMBER: cstring <comptime> = "SDL.texture.height"
global SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT: cstring <comptime> = "SDL.texture.SDR_white_point"
global SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT: cstring <comptime> = "SDL.texture.HDR_headroom"
global SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER: cstring <comptime> = "SDL.texture.d3d11.texture"
global SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER: cstring <comptime> = "SDL.texture.d3d11.texture_u"
global SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER: cstring <comptime> = "SDL.texture.d3d11.texture_v"
global SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER: cstring <comptime> = "SDL.texture.d3d12.texture"
global SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER: cstring <comptime> = "SDL.texture.d3d12.texture_u"
global SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER: cstring <comptime> = "SDL.texture.d3d12.texture_v"
global SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER: cstring <comptime> = "SDL.texture.opengl.texture"
global SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER: cstring <comptime> = "SDL.texture.opengl.texture_uv"
global SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER: cstring <comptime> = "SDL.texture.opengl.texture_u"
global SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER: cstring <comptime> = "SDL.texture.opengl.texture_v"
global SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER: cstring <comptime> = "SDL.texture.opengl.target"
global SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT: cstring <comptime> = "SDL.texture.opengl.tex_w"
global SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT: cstring <comptime> = "SDL.texture.opengl.tex_h"
global SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER: cstring <comptime> = "SDL.texture.opengles2.texture"
global SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER: cstring <comptime> = "SDL.texture.opengles2.texture_uv"
global SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER: cstring <comptime> = "SDL.texture.opengles2.texture_u"
global SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER: cstring <comptime> = "SDL.texture.opengles2.texture_v"
global SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER: cstring <comptime> = "SDL.texture.opengles2.target"
global SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER: cstring <comptime> = "SDL.texture.vulkan.texture"
global SDL_RENDERER_VSYNC_DISABLED: cint <comptime> = 0
global SDL_RENDERER_VSYNC_ADAPTIVE: cint <comptime> = -1
global SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE: cint <comptime> = 8
global SDL_MS_PER_SECOND: cint <comptime> = 1000
global SDL_US_PER_SECOND: cint <comptime> = 1000000
global SDL_NS_PER_SECOND: clonglong <comptime> = 1000000000
global SDL_NS_PER_MS: cint <comptime> = 1000000
global SDL_NS_PER_US: cint <comptime> = 1000
global SDL_TRAYENTRY_BUTTON: cuint <comptime> = 1
global SDL_TRAYENTRY_CHECKBOX: cuint <comptime> = 2
global SDL_TRAYENTRY_SUBMENU: cuint <comptime> = 4
global SDL_TRAYENTRY_DISABLED: cuint <comptime> = 2147483648
global SDL_TRAYENTRY_CHECKED: cuint <comptime> = 1073741824
global SDL_MAJOR_VERSION: cint <comptime> = 3
global SDL_MINOR_VERSION: cint <comptime> = 2
global SDL_MICRO_VERSION: cint <comptime> = 22
